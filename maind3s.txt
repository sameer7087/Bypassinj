#include "imgui/imgui.h"
#include <vector>
#include <random>
#include <math.h>
#include "imgui/backends/imgui_impl_android.h"
#include "imgui/backends/imgui_impl_opengl3.h"
#include "Iconcpp.h"
#include "ImguiPP.h"
#include "Menu.h"
#include "Font.h"
#include "Icon.h"
#include "fake_dlfcn.h"
#include "Includes.h"
#include "plthook.h"
#include "json.hpp"
#include "Vector2.hpp"
#include "Vector3.hpp"
#include "StrEnc.h"
#include "Spoof.h"
#include "Tools.h"
#include "SDK.hpp"
#include "KittyMemory/MemoryPatch.h"
#include "foxcheats/include/ScanEngine.hpp"
#include "Items.h"
#include "Includes/Utils.h"
#include "Includes/Macros.h"
//#include <curl/curl.h>
//#include <openssl/rsa.h>
//#include <openssl/pem.h>
//#define MAX_BUFFER_SIZE 1024
#include <cstring>
int speedknock12 = 1800.0f;
bool AUTOOO;
std::vector<ImVec2> circles_pos;
std::vector<ImVec2> circles_dir;
std::vector<int> circles_radius;
bool GameInfo1;
bool tarr;
bool tar;
namespace settings {

	inline ImVec4 particleColour = ImVec4(255, 255, 255, 255);

}
bool Ficstuckk;
bool 悬浮窗; 
bool Flash;
bool FLASHHHH; 
bool knockspeed;
auto BulletFireSpeed = 0;
bool Godviewpeak;
bool highjumpp;
bool instanthitv2f;
bool instanthitv3f;
int instantslider;
int AutoFlashht;
float instantedit;
bool ISLANDDDDDD; 
bool InfoGame;
bool AutoFlashh; 

bool FLASSHHHHHHH;

ImVec4 accentcolor = ImColor(122, 41, 39);
ImColor frame = (accentcolor);

#define GWorld_Offset 0xe8e215b4
#define GUObject_Offset 0x9113670
#define GNames_Offset 0x47e6fac
#define GetActorArray 0x611fb50
#define GNativeAndroidApp_Offset 0x8d6c104
#define ProcessEvent_Offset 0x5cafbf0
#define CanvasMap_Offset 0x8BB1968
#define GEngine_Offset 0x8BB1968
#define Actors_Offset 0x70



bool WriteAddr(void* addr, void* buffer, size_t length) {
    unsigned long page_size = sysconf(_SC_PAGESIZE);
    unsigned long size = page_size * sizeof(uintptr_t);
    return mprotect((void*)((uintptr_t)addr - ((uintptr_t)addr % page_size) - page_size),
        (size_t)size, PROT_EXEC | PROT_READ | PROT_WRITE) == 0 &&
        memcpy(addr, buffer, length) != 0;
};
bool sp;

int Write_Float(long int addr, float value) {
    Tools::WriteAddr((void *) (addr), (void *) &value, 4);
    return 0;
}


#define DefineHook(RET, NAME, ARGS) \
    RET(*Orig_##NAME)               \
    ARGS;                           \
    RET Hook_##NAME ARGS

template <typename T>
void Write(uintptr_t addr, T value)
{
    WriteAddr((void*)addr, &value, sizeof(T));
};

using json = nlohmann::json;
using namespace SDK;
bool fastpara;
bool sexy;
bool KOSOMGERGA;
bool skinweaponnn; 
bool AutoFlashv5;
bool BYPASSBBB;
// ======================================================================== //
float Targett;
bool textborder;
int Test55;
int XFov;
bool fake;
bool DangerM;
bool blobby;
bool autotcp;
bool autoudp;
bool balltcp;
bool balludp;
bool nearstAR;
bool paraassists;
bool birdmodee;
bool Knockkmode;
bool check6;
bool killmsg;
bool slowmode;
bool Headselctor;
float padview;
float ipadview;
float SXZ;

// ======================================================================== //
bool golgmummy = false;
bool island = false;
bool Silvanus = false;
bool offslow = false;
bool aviwa = false;
bool ammo;
bool fuck = false;
bool fullMapFlash = false;
bool FlashFull = false;
bool JinuxSuit = false;
bool Poseidon = false;
bool Fatpara = false;
bool EAGLEVIEW = false;
bool killmessage = true;
bool JOKER = false;
bool syt = false;
bool Ipad = false;
static std::string EXP = " ";
bool FASTSHOOTOP;
float FASTSHOOTOP1;
bool KEYEXPIRE = false;
bool Magic = false;
bool EagleIsland = false;
bool Akm = false;
bool isravan = false;
bool FixStuck = false;
bool goldwhite = false;
bool goldblack = false;
bool Godzilla = false;
bool blacklambo = false;
bool bluelambo = false;
bool skylambo = false;
bool rainbow = false;
bool yellowfirelambo = false;
bool xhit = false;
bool magic = false;
bool initImGui = false;
bool pink = false;
bool rectangle = false;
bool OPAMMO = false;
bool border = false;
bool Hitx = false;
bool AutoFire = false;
bool pharo = false;
bool pharo2 = false;
bool TargetLine = false;
bool TargetLineA = false;
bool Avalanche = false;
bool green = false;
bool M416 = false;
bool FlashFulll = false;
bool show_Color1 = false;
bool show_another_info = false;
bool Unlock = false;
bool Bypass4 = true;
bool FLASHSLOW;
bool LOCK;
bool FLASHOP;
bool FLASH;
bool FIXSTUCK;
bool hitop;
bool recoil;
bool blacksky;
bool nofog;
bool firespeed1;
bool Alert1;
bool lessrecoil1;
bool norecoil1;
bool staticross1;
bool nofog1;
bool nograss1;
bool notree1;
bool reset;
bool carfly1;
bool killx1;
bool Sexy12 = true;
float sexy122;
int screenWidth = -1, glWidth, screenHeight = -1, glHeight;
time_t rng = 0;
float density = -1;
float 子追算法;
float FOVSizea = 0; // AimBot Fov
float FOVSize = 50; // Bullet Track Fov
std::string g_Token, g_Auth;
std::string errMsg;
bool bValid = false;
#define SLEEP_TIME 1000LL / 120LL
uintptr_t tersafe;
// uintptr_t UE4;
json items_data;
json items_data_r;
json items_data_sm;
json items_data_sn;
json items_data_h;
json items_data_ammo;
json items_data_mag;
json items_data_scop;
bool ins1;
bool ins2;
uintptr_t g_Anort;
float FLOAT1;
float FLOAT2;

bool notree2;
static float rainbowTimePIRO = 0.0f;

float fuck1;
bool rec0;

DWORD libue4header = 0x0;
DWORD libanogsheader = 0x0;

#define targetLibName OBFUSCATE("libUE4.so")
#define targetLibName OBFUSCATE("libanort.so")
#define targetLibName OBFUSCATE("libanogs.so")
#define targetLibName OBFUSCATE("libpixuiCurl.so")
#define targetLibName OBFUSCATE("libTDataMaster.so")
#define targetLibName OBFUSCATE("libgamemaster.so")
#define targetLibName OBFUSCATE("libtgpa.so")
#define targetLibName OBFUSCATE("libgcloudcore.so")
#define targetLibName OBFUSCATE("libgcloud.so")

bool xcolor;
#define IM_PI 3.14159265358979323846f
#define RAD2DEG(x) ((float)(x) * (float)(180.f / IM_PI))
#define DEG2RAD(x) ((float)(x) * (float)(IM_PI / 180.f))
uint32_t ColorsBack[] = { 0xDECC45, 0x43B5CC, 0x465B6B, 0x4A92C2, 0xBA7E3D, 0xE3D8CF, 0xB0FC5D, 0x54201D, 0x798F28, 0x160C1F, 0xE3AE71, 0x965B53, 0x8F88B5, 0xACE05E, 0x00FCFC, 0xB3B14F, 0x214A30, 0x470A15, 0xF7734F, 0x9B2CDB, 0x2F84A8, 0xA6519A, 0x1BC468, 0xB34F7C, 0x737D47, 0x702A1E, 0x943E42, 0x8CB9ED, 0xD7ED34, 0xCCB885, 0x533659, 0x5842D6, 0x8C969B, 0x4D8F75, 0xC45D3D, 0xD97B59, 0x5E2B19, 0x274C54, 0x700B48, 0x471025, 0x71B6E3, 0x538596, 0xDBD6D3, 0x839931, 0x5D5173, 0x49ADAD, 0xA2CC2D, 0xF5FA66, 0xFCAD00, 0x614C2F };
long GetRandomColorByIndexAlpa(int index) {
    srand(index);
    int a = 220;
    int r = ((ColorsBack[rand() % 50] & 0xFF0000) >> 16);
    int g = ((ColorsBack[rand() % 50] & 0x00FF00) >> 8);
    int b = (ColorsBack[rand() % 50] & 0x0000FF);
    return IM_COL32(r, g, b, a);
}
bool heall;
typedef void (*ImGuiDemoMarkerCallback)(const char* file, int line, const char* section, void* user_data);
extern ImGuiDemoMarkerCallback GImGuiDemoMarkerCallback;
extern void* GImGuiDemoMarkerCallbackUserData;
ImGuiDemoMarkerCallback GImGuiDemoMarkerCallback = NULL;
void* GImGuiDemoMarkerCallbackUserData = NULL;
#define IMGUI_DEMO_MARKER(section)                                                                   \
    do                                                                                               \
    {                                                                                                \
        if (GImGuiDemoMarkerCallback != NULL)                                                        \
            GImGuiDemoMarkerCallback(__FILE__, __LINE__, section, GImGuiDemoMarkerCallbackUserData); \
    } while (0)

enum EAim
{
    Distance = 0,
    Croshhair = 1
};

enum EAimTarget
{
    Head = 0,
    Chest = 1
};

enum EAimTrigger
{
    Shooting = 0,
    None = 1,
    Scoping = 2,
    Both = 3,
    Any = 4
};

std::map<int, bool> Items;
std::map<int, float*> ItemColors;

struct sConfig
{
	bool fuckoff;
    bool Shake;
    bool Battery;
    bool SKINoi;
    bool MagicBullet;
    bool Recoil;
    bool Instant;
    bool Ghost;
    bool Cross;
    bool less;
    bool blockspect;
    bool Para;
    bool HitEffect;
    bool fuck;
    bool fly;
    bool ShowDamaze;
    bool ShowDamage;
    bool Fixstuck;
    bool FastShoot;
    bool AutoParachute;
    bool Alert;
    bool XhitCostumColorRoyal;
    bool CorssHairColor;
    float Royal_color[4] = { 1.0f, 0.0f, 0.0f, 1.0f };
    bool XhitRainBowRoyal;
    float PIROrainbowSpeedPIRO;
    float xHitEffect;
    int MagicBulletl;
    bool FLASH;
    bool GodView;
    bool small;
    int flyS;
    int BatteryLevel;
    int FLASH1;
    float ControlSpeed;
    float ControlSpeedf;
    bool Bypass5;
    float Skill;
    float Skill1;
    float Skill3;
    float Skill4;
    float Skill2;
    bool Ipad;
    int IpadS;
    float Line;
    float Skeleton;
    struct sESPMenu
    {
		bool Ipad;
        bool Line;
        bool HideEsp;
        bool Box;
        bool Vehicleinfo;
        bool Skeleton;
        bool Health;
        bool Grenade;
        bool ShowKnockedHealth;
        bool Name;
        bool Distance;
        bool TeamID;
        bool LineBelow;
        bool LineMid;
        bool NoBot;
        bool LootBox;
        bool Vehicle;
        bool AutoFire;
        bool Instant;
        bool Recoil;
        bool small;
    };
    sESPMenu ESPMenu;

    struct smemory
    {
        bool Recoil;
        bool Shake;
        bool small;
        bool Instant;
        bool HitEffect;
        bool ipad;
    };

    smemory memory{ 0 };
    struct sVehicleESP
    {
        bool ShowVehicle;
        bool ShowDistance;
    };
    sVehicleESP VehicleESP{ 0 };
    struct sWeaponAim
    {
        bool Enable;
        bool AimBot;
        float Cross;
        bool Recc;
        bool Pred;
        float Meter;
        bool BulletTracking;
        EAimTarget Target;
        EAimTrigger Trigger;
        bool VisCheck;
        bool IgnoreKnock;
        bool IgnoreBot;
        bool Bot;
    };
    sWeaponAim AimBot{ 0 };
    sWeaponAim BulletTracking{ 0 };
   // sWeaponAim BulletTracking{ 0 };

    struct sColorsESP
    {
        float* Line;
        float* Box;
        float* Name;
        float* Distance;
        float* Health;
        float* TeamID;
        float* Skeleton;
        float* Skeletonbot;
        float* Vehicle;
        float* FPS;
        float* Text;
        float* Boxbot;
        float* Menucolour;
        float* Fovv;
        float* Fov;
        float* Skeletonnon;
        float* nonbot;
    };
    sColorsESP ColorsESP{ 0 };
    struct sOTHER
    {
        bool FPS;
        bool HIDEESP;
        bool EXPIRYTIME;
    };
    sOTHER OTHER{ 0 };
};
sConfig Config{ 0 };

#define CREATE_COLOR(r, g, b, a) new float[4]{(float)r, (float)g, (float)b, (float)a};




// ========================================== //
uintptr_t UE4;
uintptr_t g_UE4;
uintptr_t g_Anogs;
uintptr_t g_cloud;
uintptr_t g_swappy;
uintptr_t g_TDataMaster;
uintptr_t tprt;
uintptr_t AimBullet_Offset;
android_app* g_App = 0;
ASTExtraPlayerCharacter* g_LocalPlayer = 0;
ASTExtraPlayerController* g_LocalController = 0;



struct sRegion
{
    uintptr_t start, end;
};

std::vector<sRegion> trapRegions;

bool isObjectInvalid(UObject* obj)
{
    if (!Tools::IsPtrValid(obj))
    {
        return true;
    }

    if (!Tools::IsPtrValid(obj->ClassPrivate))
    {
        return true;
    }

    if (obj->InternalIndex <= 0)
    {
        return true;
    }

    if (obj->NamePrivate.ComparisonIndex <= 0)
    {
        return true;
    }

    if ((uintptr_t)(obj) % sizeof(uintptr_t) != 0x0 && (uintptr_t)(obj) % sizeof(uintptr_t) != 0x4)
    {
        return true;
    }

    if (std::any_of(trapRegions.begin(), trapRegions.end(), [obj](sRegion region)
        { return ((uintptr_t)obj) >= region.start && ((uintptr_t)obj) <= region.end; }) ||
        std::any_of(trapRegions.begin(), trapRegions.end(), [obj](sRegion region)
            { return ((uintptr_t)obj->ClassPrivate) >= region.start && ((uintptr_t)obj->ClassPrivate) <= region.end; }))
    {
        return true;
    }

    return false;



}

static UEngine* GEngine = 0;
UWorld* GetWorld() {
    while (!GEngine) {
        GEngine = UObject::FindObject<UEngine>("UAEGameEngine Transient.UAEGameEngine_1");
        sleep(1);
    }
    if (GEngine) {
        auto ViewPort = GEngine->GameViewport;
        if (ViewPort) {
            return ViewPort->World;
        }
    }
    return 0;
}

TNameEntryArray* GetGNames() {
    return ((TNameEntryArray * (*)()) (UE4 + GNames_Offset))();
}

std::string getLibraryName(void* address) {
    std::vector<std::string> libraries = { "libUE4.so", "libTDataMaster.so", "libgcloud.so", "libanogs.so", "libanort.so", "libCrashSight.so", "libapp.so", "libav1d.so", "libav1d_jni.so", "libavif_android.so", "libc++_shared.so", "libc++_shared.so", "libcubehawk.so", "libflutter.so", "libgamemaster.so", "libgcloudarch.so", "libgcloudcore.so", "libGCloudVoice.so", "libgnustl_shared.so", "libGvoiceNN.so", "libijkffmpeg.so", "libINTLCompliance.so", "libINTLFoundation.so", "libITOP.so", "libkk-image.so", "libmarsxlog.so", "libmmkv.so", "libnpps-jni.so", "libopenplatform.so", "libPandoraVideo.so", "libPixUI_PXPlugin.so", "libpixuiCurl.so", "libPxExtFFi.so", "libsentry.so", "libsentry-android.so", "libspecialgem.so", "libswappy.so", "libtgpa.so", "libtool-checker.so", "libvlink.so" };
    for (const auto& lib : libraries) {
        uintptr_t baseAddr = KittyMemory::getAbsoluteAddress(lib.c_str(), 0, true);
        if (baseAddr != 0) {
            Dl_info info;
            if (dladdr(address, &info)) {
                if (std::string(info.dli_fname).find(lib) != std::string::npos) {
                    return lib;
                }
            }
        }
    }
    return "";
}

std::vector<AActor*> GetActors() {
    auto World = GetWorld();
    if (!World)
        return std::vector<AActor*>();

    auto PersistentLevel = World->PersistentLevel;
    if (!PersistentLevel)
        return std::vector<AActor*>();

    struct GovnoArray {
        uintptr_t base;
        int32_t count;
        int32_t max;
    };
    static thread_local GovnoArray Actors{};

    Actors = *(((GovnoArray * (*)(uintptr_t))(UE4 + GetActorArray))(reinterpret_cast<uintptr_t>(PersistentLevel)));

    if (Actors.count <= 0) {
        return {};
    }

    std::vector<AActor*> actors;
    for (int i = 0; i < Actors.count; i++) {
        auto Actor = *(uintptr_t*)(Actors.base + (i * sizeof(uintptr_t)));
        if (Actor) {
            actors.push_back(reinterpret_cast<AActor* const>(Actor));
        }
    }
    return actors;
}


template<class T>
void GetAllActors(std::vector<T*>& Actors) {
    UGameplayStatics* gGameplayStatics = (UGameplayStatics*)gGameplayStatics->StaticClass();
    auto GWorld = GetWorld();
    if (GWorld) {
        TArray<AActor*> Actors2;
        gGameplayStatics->GetAllActorsOfClass((UObject*)GWorld, T::StaticClass(), &Actors2);
        for (int i = 0; i < Actors2.Num(); i++) {
            Actors.push_back((T*)Actors2[i]);
        }
    }
}





SDK::FVector SubtractVectors(SDK::FVector a, SDK::FVector b) {
    SDK::FVector result;
    result.X = a.X - b.X;
    result.Y = a.Y - b.Y;
    result.Z = a.Z - b.Z;
    return result;
}
std::string getObjectPath(UObject* Object)
{
    std::string s;
    for (auto super = Object->ClassPrivate; super; super = (UClass*)super->SuperStruct)
    {
        if (!s.empty())
            s += ".";
        s += super->NamePrivate.GetName();
    }
    return s;
}

// ====================== //
int32_t ToColor(float* col)
{
    return ImGui::ColorConvertFloat4ToU32(*(ImVec4*)(col));
}
//==//



#include <cmath>
FVector CalculateWeaponMuzzlePosition(const FVector& weaponLocation, const FRotator& weaponRotation, float weaponBodyLength) {

    float radPitch = weaponRotation.Pitch * (3.14159265358979323846 / 180.0f);
    float radYaw = weaponRotation.Yaw * (3.14159265358979323846 / 180.0f);


    float forwardX = std::cos(radPitch) * std::cos(radYaw);
    float forwardY = std::cos(radPitch) * std::sin(radYaw);
    float forwardZ = std::sin(radPitch);


    FVector muzzlePosition = {
        weaponLocation.X + forwardX * weaponBodyLength,
        weaponLocation.Y + forwardY * weaponBodyLength,
        weaponLocation.Z + forwardZ * weaponBodyLength
    };

    return muzzlePosition;
}


FRotator ToRotator(FVector local, FVector target) {
    FVector Lund = SubtractVectors(target, local);
    FRotator newViewAngle;
    newViewAngle.Pitch =
            -std::atan2(Lund.Z, std::sqrt(Lund.X * Lund.X + Lund.Y * Lund.Y)) * (180.f / M_PI);
    newViewAngle.Yaw = std::atan2(Lund.Y, Lund.X) * (180.f / M_PI);
    newViewAngle.Roll = 0.f;
    if (newViewAngle.Yaw < 0.f) {
        newViewAngle.Yaw += 360.f;
    }
    return newViewAngle;
}
void VectorAnglesRadar(Vector3& forward, FVector& angles) {
    if (forward.X == 0.f && forward.Y == 0.f) {
        angles.X = forward.Z > 0.f ? -90.f : 90.f;
        angles.Y = 0.f;
    }
    else {
        angles.X = RAD2DEG(atan2(-forward.Z, forward.Magnitude(forward)));
        angles.Y = RAD2DEG(atan2(forward.Y, forward.X));
    }
    angles.Z = 0.f;
}

void RotateTriangle(std::array<Vector3, 3>& points, float rotation) {
    const auto points_center = (points.at(0) + points.at(1) + points.at(2)) / 3;
    for (auto& point : points) {
        point = point - points_center;
        const auto temp_x = point.X;
        const auto temp_y = point.Y;
        const auto theta = DEG2RAD(rotation);
        const auto c = cosf(theta);
        const auto s = sinf(theta);
        point.X = temp_x * c - temp_y * s;
        point.Y = temp_x * s + temp_y * c;
        point = point + points_center;
    }
}

FVector WorldToRadar(float Yaw, FVector Origin, FVector LocalOrigin, float PosX, float PosY, Vector3 Size, bool& outbuff) {
    bool flag = false;
    double num = (double)Yaw;
    double num2 = num * 0.017453292519943295;
    float num3 = (float)std::cosf(num2);
    float num4 = (float)std::sinf(num2);
    float num5 = Origin.X - LocalOrigin.X;
    float num6 = Origin.Y - LocalOrigin.Y;
    FVector Xector;
    Xector.X = (num6 * num3 - num5 * num4) / 150.f;
    Xector.Y = (num5 * num3 + num6 * num4) / 150.f;
    FVector Xector2;
    Xector2.X = Xector.X + PosX + Size.X / 2.f;
    Xector2.Y = -Xector.Y + PosY + Size.Y / 2.f;
    bool flag2 = Xector2.X > PosX + Size.X;
    if (flag2) {
        Xector2.X = PosX + Size.X;
    }
    else {
        bool flag3 = Xector2.X < PosX;
        if (flag3) {
            Xector2.X = PosX;
        }
    }
    bool flag4 = Xector2.Y > PosY + Size.Y;
    if (flag4) {
        Xector2.Y = PosY + Size.Y;
    }
    else {
        bool flag5 = Xector2.Y < PosY;
        if (flag5) {
            Xector2.Y = PosY;
        }
    }
    bool flag6 = Xector2.Y == PosY || Xector2.X == PosX;
    if (flag6) {
        flag = true;
    }
    outbuff = flag;
    return Xector2;
}


FVector2D pushToScreenBorder(FVector2D Pos, FVector2D screen, int borders, int offset) {
    int x = (int)Pos.X;
    int y = (int)Pos.Y;
    if ((borders & 1) == 1) {
        y = 0 - offset;
    }
    if ((borders & 2) == 2) {
        x = (int)screen.X + offset;
    }
    if ((borders & 4) == 4) {
        y = (int)screen.Y + offset;
    }
    if ((borders & 8) == 8) {
        x = 0 - offset;
    }
    return FVector2D(x, y);
}

int isOutsideSafezone(FVector2D pos, FVector2D screen) {
    FVector2D mSafezoneTopLeft(screen.X * 0.04f, screen.Y * 0.04f);
    FVector2D mSafezoneBottomRight(screen.X * 0.96f, screen.Y * 0.96f);
    int result = 0;
    if (pos.Y < mSafezoneTopLeft.Y) {
        result |= 1;
    }
    if (pos.X > mSafezoneBottomRight.X) {
        result |= 2;
    }
    if (pos.Y > mSafezoneBottomRight.Y) {
        result |= 4;
    }
    if (pos.X < mSafezoneTopLeft.X) {
        result |= 8;
    }
    return result;
}


//=======================//
#define W2S(w, s) UGameplayStatics::ProjectWorldToScreen(localController, w, true, s)
//===========AIMBOTDEFINE======////

auto GetTargetForBT() {
    ASTExtraPlayerCharacter *result = 0;
    float max = std::numeric_limits<float>::infinity();

    auto GWorld = GetWorld();
    if (GWorld) {
        ULevel *PersistentLevel = GWorld->PersistentLevel;
        if (PersistentLevel) {
            TArray<AActor *> Actors = *(TArray<AActor *> *) ((uintptr_t) PersistentLevel +
                                                             Actors_Offset);


            auto localPlayer = g_LocalPlayer;
            auto localController = g_LocalController;

            if (localPlayer) {
                for (int i = 0; i < Actors.Num(); i++) {
                    auto Actor = Actors[i];
                    if (isObjectInvalid(Actor))
                        continue;

                    if (Actor->IsA(ASTExtraPlayerCharacter::StaticClass())) {
                        auto Player = (ASTExtraPlayerCharacter *) Actor;

                        if (Player->PlayerKey == localPlayer->PlayerKey)
                            continue;

                        if (Player->TeamID == localPlayer->TeamID)
                            continue;

                        if (Player->bDead)
                            continue;

                        if (Config.BulletTracking.IgnoreKnock) {
                            if (Player->Health == 0.0f)
                                continue;
                        }

                        if (Config.BulletTracking.VisCheck) {
                                        auto CurrentWeaponReplicated = (ASTExtraShootWeapon*)g_LocalPlayer->WeaponManagerComponent->CurrentWeaponReplicated;

    if (CurrentWeaponReplicated) {

        FVector weaponlocation = CurrentWeaponReplicated->K2_GetActorLocation();

        FRotator weaponRotation = CurrentWeaponReplicated->K2_GetActorRotation();

        float weaponBodyLength = CurrentWeaponReplicated->GetWeaponBodyLength();

        FVector muzzlePosition = CalculateWeaponMuzzlePosition(weaponlocation, weaponRotation, weaponBodyLength / 1.5);

        if (!localController->LineOfSightTo(Player, muzzlePosition, true))
            continue;

    }
}

                        if (Config.BulletTracking.IgnoreBot) {
                            if (Player->bIsAI)
                                continue;
                        }

                        auto Root = Player->GetBonePos("Root", {});
                        auto Head = Player->GetBonePos("Head", {});

                        FVector2D RootSc, HeadSc;
                        if (W2S(Root, &RootSc) && W2S(Head, &HeadSc)) {
                            float height = abs(HeadSc.Y - RootSc.Y);
                            float width = height * 0.65f;

                            FVector middlePoint = {HeadSc.X + (width / 2), HeadSc.Y + (height / 2),
                                                   0};
                            if ((middlePoint.X >= 0 && middlePoint.X <= glWidth) &&
                                (middlePoint.Y >= 0 && middlePoint.Y <= glHeight)) {
                                FVector2D v2Middle = FVector2D((float) (glWidth / 2),
                                                               (float) (glHeight / 2));
                                FVector2D v2Loc = FVector2D(middlePoint.X, middlePoint.Y);

                                float dist = FVector2D::Distance(v2Middle, v2Loc);

                                if (dist < max) {
                                    max = dist;
                                    result = Player;
                                }
                            }
                        }
                    }
                }
            }

            return result;
        }
    }
}


auto GetTargetByPussy() {
    ASTExtraPlayerCharacter *result = 0;
    float max = std::numeric_limits<float>::infinity();
     auto Actors = GetActors();
     
    auto localPlayer = g_LocalPlayer;
    auto localController = g_LocalController;
    FVector ViewPosY{0, 0, 0};
    if (localPlayer) {                   
       ViewPosY = localPlayer->GetBonePos("Head", {});
       ViewPosY.Z += 99999999999999999999999.f;
    }  
    if (localPlayer) {
        for (int i = 0; i < Actors.size(); i++) {
            auto Actor = Actors[i];
            if (isObjectInvalid(Actor))
                continue;

            if (Actor->IsA(ASTExtraPlayerCharacter::StaticClass())) {
                auto Player = (ASTExtraPlayerCharacter *) Actor;

                if (Player->PlayerKey == localPlayer->PlayerKey)
                    continue;

                if (Player->TeamID == localPlayer->TeamID)
                    continue;

                if (Player->bDead)
                    continue;

               /* if (Config.BulletTracking.IgnoreKnocked) {
                    if (Player->Health == 0.0f)
                        continue;
                }
        
                if (Config.BulletTracking.IgnoreBots) {
                    if (Player->bEnsure)
                        continue;
                }*/
                  
                 
                    if (!localController->LineOfSightTo(Player, ViewPosY, true))
                              continue;
      
                        float dist = g_LocalPlayer->GetDistanceTo(Player);
                             if (dist < max) {
                                 max = dist;
                              result = Player;
                        }
                    }
                }
            }
            
    return result;
}


auto GetBestLineTarget()
{
    ASTExtraPlayerCharacter *result = 0;
    float max = std::numeric_limits<float>::infinity();
    auto Actors = GetActors();

    auto localPlayer = g_LocalPlayer;
    auto localController = g_LocalController;
    FVector ViewPosY{0, 0, 0};
    if (localPlayer)
    {
        ViewPosY = localPlayer->GetBonePos("Head", {});
        ViewPosY.Z += -100000000000000000000000000000000000000.0f;
    }

    if (localPlayer)
    {
        for (int i = 0; i < Actors.size(); i++)
        {
            auto Actor = Actors[i];
            if (isObjectInvalid(Actor))
                continue;

            if (Actor->IsA(ASTExtraPlayerCharacter::StaticClass()))
            {

                auto Player = (ASTExtraPlayerCharacter *)Actor;
                float lund = localPlayer->GetDistanceTo(Player) / 100.0f;

                if (lund > 5000.0f)
                    continue;

                if (Player->PlayerKey == localPlayer->PlayerKey)
                    continue;

                if (Player->TeamID == localPlayer->TeamID)
                    continue;

                if (Player->bDead)
                    continue;

                if (Config.BulletTracking.IgnoreKnock)
                {
                    if (Player->Health == 0.0f)
                        continue;
                }

                if (Config.BulletTracking.VisCheck)
                {
                                auto CurrentWeaponReplicated = (ASTExtraShootWeapon*)g_LocalPlayer->WeaponManagerComponent->CurrentWeaponReplicated;

    if (CurrentWeaponReplicated) {

        FVector weaponlocation = CurrentWeaponReplicated->K2_GetActorLocation();

        FRotator weaponRotation = CurrentWeaponReplicated->K2_GetActorRotation();

        float weaponBodyLength = CurrentWeaponReplicated->GetWeaponBodyLength();

        FVector muzzlePosition = CalculateWeaponMuzzlePosition(weaponlocation, weaponRotation, weaponBodyLength / 1.5);

        if (!localController->LineOfSightTo(Player, muzzlePosition, true))
            continue;

    }
}

                if (Config.BulletTracking.IgnoreBot)
                {
                    if (Player->bIsAI)
                        continue;
                }
                float dist = localPlayer->GetDistanceTo(Player);
                if (dist < max)
                {
                    max = dist;
                    result = Player;
                }
            }
        }
    }

    return result;
}

auto GetTargetByCrossDist() {
    ASTExtraPlayerCharacter *result = 0;
    float max = std::numeric_limits<float>::infinity();

    auto GWorld = GetWorld();
    if (GWorld) {
        ULevel *PersistentLevel = GWorld->PersistentLevel;
        if (PersistentLevel) {
            TArray<AActor *> Actors = *(TArray<AActor *> *) ((uintptr_t) PersistentLevel + Actors_Offset);

            auto localPlayer = g_LocalPlayer;
            auto localController = g_LocalController;

            if (localPlayer) {
                for (int i = 0; i < Actors.Num(); i++) {
                    auto Actor = Actors[i];
                    if (isObjectInvalid(Actor))
                        continue;

                    if (Actor->IsA(ASTExtraPlayerCharacter::StaticClass())) {
                        auto Player = (ASTExtraPlayerCharacter *) Actor;

                        if (Player->PlayerKey == localPlayer->PlayerKey)
                            continue;


                        if (Player->bDead)
                            continue;


                        if (Config.BulletTracking.VisCheck) {
                                      auto CurrentWeaponReplicated = (ASTExtraShootWeapon*)g_LocalPlayer->WeaponManagerComponent->CurrentWeaponReplicated;

    if (CurrentWeaponReplicated) {

        FVector weaponlocation = CurrentWeaponReplicated->K2_GetActorLocation();

        FRotator weaponRotation = CurrentWeaponReplicated->K2_GetActorRotation();

        float weaponBodyLength = CurrentWeaponReplicated->GetWeaponBodyLength();

        FVector muzzlePosition = CalculateWeaponMuzzlePosition(weaponlocation, weaponRotation, weaponBodyLength / 1.5);

        if (!localController->LineOfSightTo(Player, muzzlePosition, true))
            continue;

    }
}

                        auto Root = Player->GetBonePos("Root", {});
                        auto Head = Player->GetBonePos("Head", {});

                        FVector2D RootSc, HeadSc;
                        if (W2S(Root, &RootSc) && W2S(Head, &HeadSc)) {
                            float height = abs(HeadSc.Y - RootSc.Y);
                            float width = height * 0.65f;

                            FVector middlePoint = {HeadSc.X + (width / 2), HeadSc.Y + (height / 2), 0};
                            if ((middlePoint.X >= 0 && middlePoint.X <= glWidth) && (middlePoint.Y >= 0 && middlePoint.Y <= glHeight)) {
                                FVector2D v2Middle = FVector2D((float) (glWidth / 2), (float) (glHeight / 2));
                                FVector2D v2Loc = FVector2D(middlePoint.X, middlePoint.Y);

                                float dist = FVector2D::Distance(v2Middle, v2Loc);

                                if (dist < max) {
                                    max = dist;
                                    result = Player;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    return result;
}
/*
auto GetTargetByPussy() {
    ASTExtraPlayerCharacter* result = 0;
    float max = std::numeric_limits<float>::infinity();
    auto Actors = GetActors();

    auto localPlayer = g_LocalPlayer;
    auto localController = g_LocalController;
    FVector ViewPosY{ 0, 0, 0 };
    if (localPlayer) {
        ViewPosY = localPlayer->GetBonePos("Head", {});
        ViewPosY.Z += -10000000000000000000000000000000000000000.0f;
    }


    if (localPlayer) {
        for (int i = 0; i < Actors.size(); i++) {
            auto Actor = Actors[i];
            if (isObjectInvalid(Actor))
                continue;

            if (Actor->IsA(ASTExtraPlayerCharacter::StaticClass())) {

                auto Player = (ASTExtraPlayerCharacter*)Actor;
                auto CurrentWeaponReplicated = (ASTExtraShootWeapon*)localPlayer->WeaponManagerComponent->CurrentWeaponReplicated;
                float Distance = localPlayer->GetDistanceTo(Player) / 100.0f;
                if (Distance > 500.0f)
                    continue;
                if (Player->PlayerKey == localPlayer->PlayerKey)
                    continue;

                if (Player->TeamID == localPlayer->TeamID)
                    continue;

                if (Player->bDead)
                    continue;

                if (Config.BulletTracking.IgnoreKnock) {
                    if (Player->Health == 0.0f)
                        continue;
                }

                if (Config.BulletTracking.IgnoreBot) {
                    if (Player->bEnsure)
                        continue;
                }
                if (CurrentWeaponReplicated) {

                    FVector weaponlocation = CurrentWeaponReplicated->K2_GetActorLocation();

                    FRotator weaponRotation = CurrentWeaponReplicated->K2_GetActorRotation();

                    float weaponBodyLength = CurrentWeaponReplicated->GetWeaponBodyLength();
                    FVector muzzlePosition = CalculateWeaponMuzzlePosition(weaponlocation, weaponRotation, weaponBodyLength / 1.5);
                    if (!localController->LineOfSightTo(Player, muzzlePosition, true))
                        continue;

                }
                float dist = localPlayer->GetDistanceTo(Player);
                if (dist < max) {
                    max = dist;
                    result = Player;
                }
            }
        }
    }

    return result;
}*/

const char* GetVehicleName(ASTExtraVehicleBase* Vehicle)
{
    switch (Vehicle->VehicleShapeType)
    {
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Motorbike:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Motorbike_SideCart:
        return "Motorbike";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Dacia:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_HeavyDacia:
        return "Dacia";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_MiniBus:
        return "Mini Bus";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_PickUp:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_PickUp01:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_HeavyPickup:
        return "Pick Up";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Buggy:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_HeavyBuggy:
        return "Buggy";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_UAZ:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_UAZ01:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_UAZ02:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_UAZ03:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_HeavyUAZ:
        return "UAZ";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_PG117:
        return "PG117";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Aquarail:
        return "Aquarail";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Mirado:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Mirado01:
        return "Mirado";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Rony:
        return "Rony";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Scooter:
        return "Scooter";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_SnowMobile:
        return "Snow Mobile";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_TukTukTuk:
        return "Tuk Tuk";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_SnowBike:
        return "Snow Bike";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Surfboard:
        return "Surf Board";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Snowboard:
        return "Snow Board";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Amphibious:
        return "Amphibious";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_LadaNiva:
        return "Lada Niva";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_UAV:
        return "UAV";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_MegaDrop:
        return "Mega Drop";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Lamborghini:
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_Lamborghini01:
        return "Lamborghini";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_GoldMirado:
        return "Gold Mirado";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_BigFoot:
        return "Big Foot";
        break;
    case ESTExtraVehicleShapeType::ESTExtraVehicleShapeType__VST_HeavyUH60:
        return "UH60";
        break;
    default:
        return "Vehicle";
        break;
    }
    return "Vehicle";
}
void (*orig_shoot_event)(USTExtraShootWeaponComponent *thiz, FVector start, FRotator rot, void *unk1, int unk2) = 0;



void shoot_event(USTExtraShootWeaponComponent *thiz, FVector start, FRotator rot, ASTExtraShootWeapon *weapon, int unk1) {


auto KismetMathLibrary = (UKismetMathLibrary *) UKismetMathLibrary::StaticClass();
   
    if (!KismetMathLibrary)
        return orig_shoot_event(thiz, start, rot, weapon, unk1);

if (Config.BulletTracking.Enable) {
        ASTExtraPlayerCharacter *Target = GetBestLineTarget();
        if (Target) {
            FVector targetAimPos = Target->GetBonePos("Head", {0, 0, 0});
			if (tarr) {
            targetAimPos.Z -= (float) Targett;
			}
			if (tar) {
				targetAimPos.Z -= -EAimTarget::Chest;
			}
            FRotator sex = ToRotator(start, targetAimPos);
            return orig_shoot_event(thiz, targetAimPos, sex, weapon, unk1);
        }
    }
    return orig_shoot_event(thiz, start, rot, weapon, unk1);
}
//=====Bullettradck=====//
class FPSCounter
{
protected:
    unsigned int m_fps;
    unsigned int m_fpscount;
    long m_fpsinterval;

public:
    FPSCounter() : m_fps(0), m_fpscount(0), m_fpsinterval(0)
    {
    }

    void update()
    {
        m_fpscount++;

        if (m_fpsinterval < time(0))
        {
            m_fps = m_fpscount;

            m_fpscount = 0;
            m_fpsinterval = time(0) + 1;
        }
    }

    unsigned int get() const
    {
        return m_fps;
    }
};

FPSCounter fps;

void DrawBoxEnemy(ImDrawList* draw, ImVec2 X, ImVec2 Y, float thicc, int color)
{
    draw->AddLine({ X.x, X.y }, { Y.x, Y.y }, color, thicc);
}
int AVIWA_FLOAT(long int addr, float value)
{
    Tools::WriteAddr((void*)(addr), (void*)&value, 4);
    return 0;
}
int AVIWA_DWORD(long int addr, float value)
{
    Tools::WriteAddr((void*)(addr), (void*)&value, 4);
    return 0;
}

int AVIWA_QWORD(long int addr, int64_t value)
{
    Tools::WriteAddr((void*)(addr), (void*)&value, sizeof(value));
    return 0;
}

//===================== ESP DRAW =====================//

float GetD3DDistance(FVector a, FVector b)
{
    FVector vector = {a.X - b.X, a.Y - b.Y, a.Z - b.Z};
    return sqrt(((vector.X * vector.X) + (vector.Y * vector.Y)) + (vector.Z * vector.Z));
}/*
void(*orig_shoot_event)(USTExtraShootWeaponComponent* thiz, FVector start, FRotator rot, void* unk1, int unk2) = 0;

void shoot_event(USTExtraShootWeaponComponent* thiz, FVector start, FRotator rot,
    ASTExtraShootWeapon* weapon, int unk1) {
    if (Config.BulletTracking.Enable) {
        if (Target) {
        ASTExtraPlayerCharacter* Target = GetBestLineTarget();
            FVector targetAimPos = Target->GetBonePos("Head", {});
            targetAimPos.Z -= -EAimTarget::Chest;
            FVector fDir = UKismetMathLibrary::Subtract_VectorVector(targetAimPos, start);
            FRotator sex = UKismetMathLibrary::Conv_VectorToRotator(fDir);
            rot = sex;
        }
    }
    return orig_shoot_event(thiz, start, rot, weapon, unk1);
}
/*
/*
void(*orig_shoot_event)(USTExtraShootWeaponComponent* thiz, FVector start, FRotator rot, void* unk1, int unk2) = 0;

void shoot_event(USTExtraShootWeaponComponent* thiz, FVector start, FRotator rot,
    ASTExtraShootWeapon* weapon, int unk1) {
    if (Config.BulletTracking.Enable) {
        ASTExtraPlayerCharacter* Target = GetTargetByPussy();
        if (Target) {
            FVector targetAimPos = Target->GetBonePos("Head", {});
            targetAimPos.Z -= -EAimTarget::Chest;
            FVector fDir = UKismetMathLibrary::Subtract_VectorVector(targetAimPos, start);
            FRotator sex = UKismetMathLibrary::Conv_VectorToRotator(fDir);
            rot = sex;
        }
    }
    return orig_shoot_event(thiz, start, rot, weapon, unk1);
}*/

void RenderESPPRIVATE(AHUD *HUD, int ScreenWidth, int ScreenHeight)
{
    ASTExtraPlayerCharacter *localPlayer = 0;
    ASTExtraPlayerController *localPlayerController = 0;

    UCanvas *Canvas = HUD->Canvas;
    if (Canvas)
    {



        UGameplayStatics *gGameplayStatics = (UGameplayStatics *)UGameplayStatics::StaticClass();
        auto GWorld = GetWorld();
        if (GWorld)
        {
            UNetDriver *NetDriver = GWorld->NetDriver;
            if (NetDriver)
            {
                UNetConnection *ServerConnection = NetDriver->ServerConnection;
                if (ServerConnection)
                {
                    localPlayerController = (ASTExtraPlayerController *)ServerConnection->PlayerController;
                }
            }

            if (localPlayerController)
            {
                // localPlayerController->AntiCheatManagerComp = 0;
                // localPlayerController->bShouldReportAntiCheat = false;
                // localPlayerController->CheatClass =0;
                // localPlayerController->CheatManager =0;
                // if (!g_Token.empty() && !g_Auth.empty() && g_Token == g_Auth) {

                // }

                std::vector<ASTExtraPlayerCharacter *> PlayerCharacter;
                GetAllActors(PlayerCharacter);
                for (auto actor = PlayerCharacter.begin();
                     actor != PlayerCharacter.end(); actor++)
                {
                    auto Actor = *actor;

                    if (Actor->PlayerKey ==
                        ((ASTExtraPlayerController *)localPlayerController)->PlayerKey)
                    {
                        localPlayer = Actor;
                        break;
                    }
                }

                {
                    if (localPlayer)
                    {
                  

                        // localPlayer->MoveAntiCheatComponent = 0;
                        // localPlayer->LagCompensationComponent = 0;
                        // localPlayer->SecuryComponent = 0;
                        // localPlayer->bEnableSecurity = false;

                        auto infinity = std::numeric_limits<float>::infinity();
                        auto WeaponManagerComponent = localPlayer->WeaponManagerComponent;
                        // auto Player = (ASTExtraPlayerCharacter *)Actor;           
                        // bool IsVisible = localPlayerController->LineOfSightTo(localPlayer, {0, 0, 0}, true);                   
                         
                   
                        if (AUTOOO)
                        {
                            if ((g_LocalPlayer && g_LocalPlayer->RootComponent) && localPlayerController)
                            {
                                ASTExtraPlayerCharacter *Target;
                                Target = GetBestLineTarget();
                                auto WeaponManagerComponent = localPlayer->WeaponManagerComponent;
                                if (WeaponManagerComponent)
                                {
                                    auto propSlot = WeaponManagerComponent->GetCurrentUsingPropSlot();
                                    if ((int)propSlot.GetValue() >= 1 && (int)propSlot.GetValue() <= 3)
                                    {
                                                if (Config.fuckoff)
                                                {
                                                   g_LocalController->OnReleaseFire();
                                                }
                                                if (Target && Target->RootComponent)
                                                {
                                                    localPlayerController->OnPressFire();
                                                }
                                                else
                                                {
                                                    Config.fuckoff = true;
                                                }                                            
                                    }
                                }
                            }
                        }
                        else
                        {
                          Config.fuck = true;
                        }


                        if (localPlayer->PartHitComponent)
                        {
                            auto ConfigCollisionDistSqAngles = localPlayer->PartHitComponent->ConfigCollisionDistSqAngles;
                            for (int j = 0; j < ConfigCollisionDistSqAngles.Num(); j++)
                            {
                                ConfigCollisionDistSqAngles[j].Angle = 180.0f;
                            }
                            localPlayer->PartHitComponent->ConfigCollisionDistSqAngles = ConfigCollisionDistSqAngles;
                        }
                    }
                }
            }
            g_LocalPlayer = localPlayer;
            g_LocalController = localPlayerController;
        }
    }
}
/*
void RenderESPPRIVATE(AHUD* HUD, int ScreenWidth, int ScreenHeight) {
    ASTExtraPlayerCharacter* localPlayer = 0;
    ASTExtraPlayerController* localPlayerController = 0;

    UCanvas* Canvas = HUD->Canvas;
    if (Canvas) {
        UGameplayStatics* gGameplayStatics = (UGameplayStatics*)UGameplayStatics::StaticClass();
        auto GWorld = GetWorld();
        if (GWorld) {
            UNetDriver* NetDriver = GWorld->NetDriver;
            if (NetDriver) {
                UNetConnection* ServerConnection = NetDriver->ServerConnection;
                if (ServerConnection) {
                    localPlayerController = (ASTExtraPlayerController*)ServerConnection->PlayerController;
                }
            }

            if (localPlayerController) {
                std::vector<ASTExtraPlayerCharacter*> PlayerCharacter;
                GetAllActors(PlayerCharacter);
                for (auto actor = PlayerCharacter.begin();
                    actor != PlayerCharacter.end(); actor++) {
                    auto Actor = *actor;

                    if (Actor->PlayerKey == ((ASTExtraPlayerController*)localPlayerController)->PlayerKey) {
                        localPlayer = Actor;
                        break;
                    }
                }


                {
                    if (localPlayer) {
                        auto infinity = std::numeric_limits<float>::infinity();
                        auto WeaponManagerComponent = localPlayer->WeaponManagerComponent;

                        if (Config.fuck) {
                            if ((g_LocalPlayer && g_LocalPlayer->RootComponent) &&
                                localPlayerController) {
                                ASTExtraPlayerCharacter* Target;
                                Target = GetTargetByPussy();
                                auto WeaponManagerComponent = localPlayer->WeaponManagerComponent;
                                if (WeaponManagerComponent) {
                                    auto propSlot = WeaponManagerComponent->GetCurrentUsingPropSlot();
                                    if ((int)propSlot.GetValue() >= 1 &&
                                        (int)propSlot.GetValue() <= 3) {
                                        auto CurrentWeaponReplicated = (ASTExtraShootWeapon*)WeaponManagerComponent->CurrentWeaponReplicated;
                                        if (CurrentWeaponReplicated) {
                                            auto ShootWeaponComponent = CurrentWeaponReplicated->ShootWeaponComponent;
                                            if (ShootWeaponComponent) {
                                                if (Target && Target->RootComponent) {
                                                    localPlayerController->OnPressFire();
                                                }
                                                else {
                                                    g_LocalController->OnReleaseFire();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (localPlayer->PartHitComponent) {
                            auto ConfigCollisionDistSqAngles = localPlayer->PartHitComponent->ConfigCollisionDistSqAngles;
                            for (int j = 0; j < ConfigCollisionDistSqAngles.Num(); j++) {
                                ConfigCollisionDistSqAngles[j].Angle = 180.0f;
                            }
                            localPlayer->PartHitComponent->ConfigCollisionDistSqAngles = ConfigCollisionDistSqAngles;
                        }
                    }
                }
            }
            g_LocalPlayer = localPlayer;
            g_LocalController = localPlayerController;
        }
    }
}
*/
void RotateArrows(std::array<Vector3, 7>& points, float rotation) {
    const auto points_center = (points.at(0) + points.at(1) + points.at(2)) / 3;
    for (auto& point : points) {
        point = point - points_center;
        const auto temp_x = point.X;
        const auto temp_y = point.Y;
        const auto theta = DEG2RAD(rotation);
        const auto c = cosf(theta);
        const auto s = sinf(theta);
        point.X = temp_x * c - temp_y * s;
        point.Y = temp_x * s + temp_y * c;
        point = point + points_center;
    }
}

void LineE(ImDrawList* draw, Vector3 posFrom, Vector3 posTo, float Thickness, ImColor col) {
    draw->AddLine({ posFrom.X, posFrom.Y }, { posTo.X, posTo.Y }, col, 2.0f);
}

void DrawArrowsFilled(ImDrawList* draw, Vector3 xy1, Vector3 xy2, Vector3 xy3, Vector3 xy4, Vector3 xy5, Vector3 xy6, Vector3 xy7, float Thickness, ImColor col) {
    LineE(draw, xy1, xy2, Thickness, col);
    LineE(draw, xy2, xy3, Thickness, col);
    LineE(draw, xy3, xy7, Thickness, col);
    LineE(draw, xy7, xy6, Thickness, col);
    LineE(draw, xy6, xy5, Thickness, col);
    LineE(draw, xy5, xy4, Thickness, col);
    LineE(draw, xy4, xy1, Thickness, col);
}


void Box4Line(ImDrawList *draw, float thicc, int x, int y, int w, int h, int color) {
 int iw = w / 4;
 int ih = h / 4;
 // top
 draw->AddRect(ImVec2(x, y),ImVec2(x + iw, y), color, thicc);
 draw->AddRect(ImVec2(x + w - iw, y),ImVec2(x + w, y), color, thicc);
 draw->AddRect(ImVec2(x, y),ImVec2(x, y + ih), color, thicc);
 draw->AddRect(ImVec2(x + w - 1, y),ImVec2(x + w - 1, y + ih), color, thicc);;
 // bottom
 draw->AddRect(ImVec2(x, y + h),ImVec2(x + iw, y + h), color, thicc);
 draw->AddRect(ImVec2(x + w - iw, y + h),ImVec2(x + w, y + h), color, thicc);
 draw->AddRect(ImVec2(x, y + h - ih), ImVec2(x, y + h), color, thicc);
 draw->AddRect(ImVec2(x + w - 1, y + h - ih), ImVec2(x + w - 1, y + h), color, thicc);
}


void draw_circle(ImVec2 pos, int radius, ImU32 color)
{
    ImDrawList* draw_list = ImGui::GetWindowDrawList();
    unsigned char* color_ptr = (unsigned char*)&color;
    draw_list->AddCircleFilled(pos, radius - 1, IM_COL32(color_ptr[0], color_ptr[1], color_ptr[2], 75));
}
 
void draw_line(ImVec2 pos1, ImVec2 pos2, ImU32 color, int radius)
{
    ImDrawList* draw_list = ImGui::GetWindowDrawList();
    float distance = std::sqrt(
        std::pow(pos2.x - pos1.x, 2) + // std:: pow
        std::pow(pos2.y - pos1.y, 2)    // std:: pow
    );
    float alpha;
    if (Distance <= 20.0f) {
        alpha = 255.0f;
    }
    else {
        alpha = (1.0f - ((Distance - 20.0f) / 25.0f)) * 255.0f;
    }
 
    int r = (color & 0xFF0000) >> 16; // Extract red component
    int g = (color & 0x00FF00) >> 8;  // Extract green component
    int b = (color & 0x0000FF);       // Extract blue component
 
    unsigned char* color_ptr = (unsigned char*)&color;
 
    draw_list->AddLine(pos1, pos2, IM_COL32(color_ptr[0], color_ptr[1], color_ptr[2], static_cast<int>(alpha)), 1.0f);
    if (Distance >= 40.0f) {
        draw_list->AddCircleFilled(pos1, radius - 0.96f, IM_COL32(color_ptr[0], color_ptr[1], color_ptr[2], alpha * 200.0f));
        draw_list->AddCircleFilled(pos2, radius - 0.96f, IM_COL32(color_ptr[0], color_ptr[1], color_ptr[2], alpha * 200.0f));
    }
    else if (Distance <= 20.0f) {
        draw_list->AddCircleFilled(pos1, radius, IM_COL32(color_ptr[0], color_ptr[1], color_ptr[2], alpha * 200.0f));
        draw_list->AddCircleFilled(pos2, radius, IM_COL32(color_ptr[0], color_ptr[1], color_ptr[2], alpha * 200.0f));
    }
    else {
        float radius_factor = 1.0f - ((Distance - 20.0f) / 20.0f);
        float offset_factor = 1.0f - radius_factor;
        float offset = (radius - radius * radius_factor) * offset_factor;
        draw_list->AddCircleFilled(pos1, radius - offset, IM_COL32(color_ptr[0], color_ptr[1], color_ptr[2], alpha * 200.0f));
        draw_list->AddCircleFilled(pos2, radius - offset, IM_COL32(color_ptr[0], color_ptr[1], color_ptr[2], alpha * 200.0f));
    }
}
 
void move_circles()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, 360);
 
    for (int i = 0; i < circles_pos.size(); i++)
    {
        ImVec2& pos = circles_pos[i];
        ImVec2& dir = circles_dir[i];
        int radius = circles_radius[i];
 
        pos.x += dir.x * 0.4;
        pos.y += dir.y * 0.4;
 
        if (pos.x - radius < 0 || pos.x + radius > ImGui::GetWindowWidth())
        {
            dir.x = -dir.x;
            dir.y = dis(gen) % 2 == 0 ? -1 : 1;
        }
 
        if (pos.y - radius < 0 || pos.y + radius > ImGui::GetWindowHeight())
        {
            dir.y = -dir.y;
            dir.x = dis(gen) % 2 == 0 ? -1 : 1;
        }
    }
}





void draw_circles_and_lines(ImU32 color)
{
    move_circles();
 
    for (int i = 0; i < circles_pos.size(); i++)
    {
        draw_circle(circles_pos[i], circles_radius[i], color);
 
        for (int j = i + 1; j < circles_pos.size(); j++)
        {
            float Distance = ImGui::GetIO().FontGlobalScale * std::sqrt(
                std::pow(circles_pos[j].x - circles_pos[i].x, 2) + // std:: pow
                std::pow(circles_pos[j].y - circles_pos[i].y, 2)    // std:: pow
            );
 
            if (Distance <= 45.0f)
            {
                draw_line(circles_pos[i], circles_pos[j], color, circles_radius[i]);
            }
        }
    }
}

void setup_circles()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, 1);
    std::uniform_int_distribution<> pos_dis(0, static_cast<int>(1980));
    std::uniform_int_distribution<> pos_dis_y(0, static_cast<int>(1080));
 
    for (int i = 0; i < 1000; i++) // 1000 is the number of cricle you render i recommend 400.
    {
        circles_pos.push_back(ImVec2(pos_dis(gen), pos_dis_y(gen)));
        circles_dir.push_back(ImVec2(dis(gen) == 0 ? -1 : 1, dis(gen) == 0 ? -1 : 1));
        circles_radius.push_back(3);
    }
}
bool fixx;
bool Magicbu;
bool FUCK;
bool Magicb;
void DrawESP(ImDrawList* draw, int glWidth, int glHeight) {
	if (FUCK)  {
MemoryPatch::createWithHex("libgcloud.so", 0x30A588, "00 20 70 47").Modify();

} else {

MemoryPatch::createWithHex("libgcloud.so", 0x30A588, "A2 F3 51 51").Modify();//OFF
}
if (fixx) {
	MemoryPatch::createWithHex("libUE4.so", 0x2873C5C, "00 00 00 00").Modify();
	MemoryPatch::createWithHex("libUE4.so", 0x2873C50, "00 00 00 00").Modify();
}
if (Magicbu) {
	MemoryPatch::createWithHex("libUE4.so", 0x6D3F448, "00 00 00 00").Modify();
	//MemoryPatch::createWithHex("libUE4.so", 0x6D3F454, "00 00 00 00").Modify();
}


  if (Sexy12)
    {

        //std::string credit = OBFUSCATE("! Enemy Aiming at you !");
        //auto textSize = ImGui::CalcTextSize2(credit.c_str(), 0, ((float)density / 14.0f));
        //draw->AddText(NULL, ((float)density / 14.0f), { ((float)glWidth / 2) - (textSize.x / 2), 30 }, IM_COL32(255, 0, 0, 255), credit.c_str());
    }

    auto GWorld = GetWorld();
    if (GWorld)
    {
        if (GWorld->PersistentLevel)
        {
            auto Actors = *(TArray<AActor*> *)((uintptr_t)GWorld->PersistentLevel + 0x70);

            int totalEnemies = 0, totalBots = 0;

            ASTExtraPlayerCharacter* localPlayer = 0;
            ASTExtraPlayerController* localController = 0;

            for (int i = 0; i < Actors.Num(); i++)
            {
                auto Actor = Actors[i];
                if (isObjectInvalid(Actor))
                    continue;

                if (Actor->IsA(ASTExtraPlayerController::StaticClass()))
                {
                    localController = (ASTExtraPlayerController*)Actor;
                    break;
                }
            }

            if (localController)
            {
                for (int i = 0; i < Actors.Num(); i++)
                {
                    auto Actor = Actors[i];
                    if (isObjectInvalid(Actor))
                        continue;

                    if (Actor->IsA(ASTExtraPlayerCharacter::StaticClass()))
                    {
                        if (((ASTExtraPlayerCharacter*)Actor)->PlayerKey == localController->PlayerKey)
                        {
                            localPlayer = (ASTExtraPlayerCharacter*)Actor;
                            break;
                        }
						
	
                    }
                }

                if (localController == 0) {
                    //draw->AddText({((float) density / 10.0f), 40},IM_COL32(255, 0, 0, 255),sFPS.c_str());
                } else {
                    //    ImGui::Text("FPS: %.1f", sFPS);
                    KEYEXPIRE = false;
                    //   sFPS += 1000.0f / ImGui::GetIO().Framerate;
                    //    draw->AddText({((float) density / 14.0f), 40},IM_COL32(255, 0, 0, 255),sFPS.c_str());
                }

                if (localPlayer)
                {
                    if (localPlayer->PartHitComponent)
                    {
                        auto ConfigCollisionDistSqAngles = localPlayer->PartHitComponent->ConfigCollisionDistSqAngles;
                        for (int j = 0; j < ConfigCollisionDistSqAngles.Num(); j++)
                        {
                            ConfigCollisionDistSqAngles[j].Angle = 180.0f;
                        }
                        localPlayer->PartHitComponent->ConfigCollisionDistSqAngles = ConfigCollisionDistSqAngles;
                    }
				
                     auto GWorld = GetWorld();
    if (GWorld) {
        if (GWorld->PersistentLevel) {
            auto Actors = *(TArray<AActor *> *) ((uintptr_t) GWorld->PersistentLevel + Actors_Offset);

            int totalEnemies = 0, totalBots = 0;
            
            ASTExtraPlayerCharacter *localPlayer = 0;
            ASTExtraPlayerController *localController = 0;
			
		         
				for (int i = 0; i < Actors.Num(); i++) {
                auto Actor = Actors[i];
                if (isObjectInvalid(Actor))
                    continue;

                if (Actor->IsA(ASTExtraPlayerController::StaticClass())) {
                    localController = (ASTExtraPlayerController *) Actor;
                    break;
                }
            }
		
			
            if (localController) {
                for (int i = 0; i < Actors.Num(); i++) {
                    auto Actor = Actors[i];
                    if (isObjectInvalid(Actor))
                        continue;

                    if (Actor->IsA(ASTExtraPlayerCharacter::StaticClass())) {
                        if (((ASTExtraPlayerCharacter *) Actor)->PlayerKey == localController->PlayerKey) {
                            localPlayer = (ASTExtraPlayerCharacter *) Actor;
                            break;
                        }
                    }
                }


                if (localPlayer) {
                    if (localPlayer->PartHitComponent) {
                        auto ConfigCollisionDistSqAngles = localPlayer->PartHitComponent->ConfigCollisionDistSqAngles;
                        for (int j = 0; j < ConfigCollisionDistSqAngles.Num(); j++) {
                            ConfigCollisionDistSqAngles[j].Angle = 180.0f;
                        }
                        localPlayer->PartHitComponent->ConfigCollisionDistSqAngles = ConfigCollisionDistSqAngles;
                    }
                    static bool bShooting = false;
                    if (Config.BulletTracking.Enable) {
                        auto WeaponManagerComponent = localPlayer->WeaponManagerComponent;
                        if (WeaponManagerComponent) {
                            auto propSlot = WeaponManagerComponent->GetCurrentUsingPropSlot();
                            if ((int) propSlot.GetValue() >= 1 && (int) propSlot.GetValue() <= 3) {
                                auto CurrentWeaponReplicated = (ASTExtraShootWeapon *) WeaponManagerComponent->CurrentWeaponReplicated;
                                if (CurrentWeaponReplicated) {
                                    auto ShootWeaponComponent = CurrentWeaponReplicated->ShootWeaponComponent;
                                    if (ShootWeaponComponent) {
                                        int shoot_event_idx = 168;
                                        auto VTable = (void **) ShootWeaponComponent->VTable;
                                        auto f_mprotect = [](uintptr_t addr, size_t len,
                                                             int32_t prot) -> int32_t {
                                            static_assert(PAGE_SIZE == 4096);
                                            constexpr
                                            size_t page_size = static_cast<size_t>(PAGE_SIZE);
                                            void *start = reinterpret_cast<void *>(addr &
                                                                                   -page_size);
                                            uintptr_t end =
                                                    (addr + len + page_size - 20) & -page_size;
                                            return mprotect(start, end -
                                                                   reinterpret_cast<uintptr_t>(start),
                                                            prot);
                                        };
                                                        if (VTable && (VTable[shoot_event_idx] != shoot_event)) {
                    orig_shoot_event = decltype(orig_shoot_event)(VTable[shoot_event_idx]);
                    // SMOKER_SANJI1 NEW DATA BULLET TRACK
                    f_mprotect((uintptr_t)(&VTable[shoot_event_idx]), sizeof(uintptr_t), PROT_READ | PROT_WRITE);
                    VTable[shoot_event_idx] = (void*)shoot_event;
                                    }
                                }
                            }
                        }
                    }
                    }

                    FVector ViewPosY{ 0, 0, 0 };
                    if (localPlayer) {
                        ViewPosY = localPlayer->GetBonePos("Head", {});
                        ViewPosY.Z += 10.f;
                    }

if (GameInfo1) {
for (int i = 0; i < Actors.Num(); i++) {
            auto Actor = Actors[i];
            if (isObjectInvalid(Actor))
                continue;
                if (Actor->IsA(ASTExtraGameStateBase::StaticClass())) {                           
                            auto InGame = (ASTExtraGameStateBase *) Actor;      
                            auto WarGameState = (AVehicleWarGameState *) Actor;      
                            auto GameStateTeam = (ABRGameStateTeam_DeathMatch *) Actor;  
                            auto WarState = (AWarGameState *) Actor;  
                            auto TeamMode = (UTeamModeComponent *) Actor;  
                            auto PlayerTeamDeath = (ABRPlayerStateTeam_DeathMatch *) Actor;
                            auto FectionGameMode = (APVEInfectionGameMode *) Actor;
              int TotalCount = totalEnemies + totalBots;
              
                            if (GameInfo1) {
                                std::string s;
       static bool blinkState = true;
            static float blinkTimer = 0.0f;
            blinkTimer += ImGui::GetIO().DeltaTime;
            if (blinkTimer > 0.5f)
            {
                blinkState = !blinkState;
                blinkTimer = 0.0f;
            }
            ImVec4 ballColor = blinkState ? ImVec4(1.0f, 0.0f, 0.0f, 1.0f) : ImVec4(0.0f, 0.0f, 0.0f, 0.0f);
            ImGui::TextColored(ballColor, ICON_FA_CIRCLE);

            ImGui::SameLine();
            ImGui::TextColored(ImVec4(1.0f, 0.5f, 0.0f, 1.0f), "Game Information");
            ImGui::Separator();
            ImGui::Text("%d Players alive with %d Teams, Real Players: %d", static_cast<int>(InGame->AlivePlayerNum), static_cast<int>(InGame->AliveTeamNum), static_cast<int>(InGame->PlayerNum));
            ImGui::Text("Match ID: %d, Match Time: %ds | %dm", static_cast<int>(InGame->GameID), static_cast<int>(InGame->ElapsedTime), static_cast<int>(InGame->ElapsedTime) / 60);
            ImGui::Separator();
            ImGui::TextColored(ImVec4(0.0f, 1.0f, 0.0f, 1.0f), ICON_FA_TELEGRAM);
            ImGui::SameLine();
            ImGui::TextColored(ImVec4(0.0f, 1.0f, 0.0f, 1.0f), "");
            ImGui::Separator();
            ImGui::End();   
                                } else if ( (InGame->GameID) = 0 ){
                  
                             ImGui::Text("Connected to lobby, please exit.");
            
          }
                
}}}
                    for (int i = 0; i < Actors.Num(); i++) {
                        auto Actor = Actors[i];
                        if (isObjectInvalid(Actor))
                            continue;
                        long Pl;
                        if (Actor->IsA(ASTExtraPlayerCharacter::StaticClass())) {
                            long AM = IM_COL32(0, 255, 0, 255);
                            long AMM = IM_COL32(0, 255, 0, 255);
                            long PlayerBoxClrCf = IM_COL32(0, 255, 0, 255);
                            long PlayerBoxClrCf2 = IM_COL32(0, 255, 0, 255);
                            Pl = IM_COL32(0, 255, 0, 255);

                            auto Player = (ASTExtraPlayerCharacter*)Actor;
                            if (!localController->LineOfSightTo(Player, { 0, 0, 0 }, true)) {
                                PlayerBoxClrCf = IM_COL32(255, 0, 0, 255);
                                PlayerBoxClrCf2 = IM_COL32(255, 0, 0, 255);
                                Pl = IM_COL32(255, 0, 0, 255);
                                AM = IM_COL32(255, 0, 0, 255);
                                AMM = IM_COL32(255, 0, 0, 255);
                            }

                            float Distance = localPlayer->GetDistanceTo(Player) / 100.0f;
                            if (Distance > 700.0f)
                                continue;

                            if (Player->PlayerKey == localController->PlayerKey)
                                continue;

                            if (Player->TeamID == localController->TeamID)
                                continue;

                            if (Player->bDead)
                                continue;

                            /* if (!Player->Mesh)
                                continue;*/

                            if (Player->bEnsure)
                                totalBots++;
                            else totalEnemies++;

                            if (Config.ESPMenu.NoBot)
                                if (Player->bEnsure)
                                    continue;


                            /*

                            if (Player->bEnsure)
                                              {
                                                  totalBots++;

                                              if (!localController->LineOfSightTo(Player, {0, 0, 0}, true)) {

                                                  }
                                              } else {
                                                  totalEnemies++;

                                              if (!localController->LineOfSightTo(Player, {0, 0, 0}, true)) {

                                              }
                                              if (Player->Health == 0.0f && !Player->bDead) {


                                                  }
                                              }*/



                            if (Config.Alert) {
                                bool ITACH = false; FVector MyPosition, EnemyPosition;
                                ASTExtraVehicleBase* CurrentVehiclea = Player->CurrentVehicle;
                                if (CurrentVehiclea) {
                                    MyPosition = CurrentVehiclea->RootComponent->RelativeLocation;
                                }
                                else {
                                    MyPosition = Player->RootComponent->RelativeLocation;
                                } ASTExtraVehicleBase* CurrentVehicle = localPlayer->CurrentVehicle;
                                if (CurrentVehicle) {
                                    EnemyPosition = CurrentVehicle->RootComponent->RelativeLocation;
                                }
                                else {
                                    EnemyPosition = localPlayer->RootComponent->RelativeLocation;
                                }FVector EntityPos = WorldToRadar(localController->PlayerCameraManager->CameraCache.POV.Rotation.Yaw, MyPosition, EnemyPosition, NULL, NULL, Vector3(glWidth, glHeight, 0), ITACH);
                                FVector angle = FVector();
                                Vector3 forward = Vector3((float)(glWidth / 2) - EntityPos.X, (float)(glHeight / 2) - EntityPos.Y, 0.0f);
                                VectorAnglesRadar(forward, angle);
                                const auto angle_yaw_rad = DEG2RAD(angle.Y + 180.f);
                                const auto new_point_x = (glWidth / 2) + (64) / 2 * 8 * cosf(angle_yaw_rad);
                                const auto new_point_y = (glHeight / 2) + (64) / 2 * 8 * sinf(angle_yaw_rad);
                                std::array<Vector3, 7> points{
                                Vector3(new_point_x - (5.6f * (float)1.5f), new_point_y - (7.31272f * 1.5272f)),
                                Vector3(new_point_x + (10.607f * 1.529f) , new_point_y),
                                Vector3(new_point_x - (5.6282f * 1.529f), new_point_y + (7.308828f * 1.5383f)),
                                Vector3(new_point_x - (5.6702f * 1.5899f) , new_point_y - (4.30282f * 1.5282f)),
                                Vector3(new_point_x - (17.5718f * 1.53822f) , new_point_y - (4.30282f * 1.5282f)),
                                Vector3(new_point_x - (17.5292f * 1.522f) , new_point_y + (4.30828f * 1.5282f)),
                                Vector3(new_point_x - (5.628f * 1.5229f) , new_point_y + (4.30238f * 1.5282f)) };
                                RotateArrows(points, angle.Y + 180.f);
                                bool IsVisible = localController->LineOfSightTo(Player, { 0, 0, 0 }, true);
                                DrawArrowsFilled(draw, points.at(0), points.at(1), points.at(2), points.at(3), points.at(4), points.at(5), points.at(6), 1.5, PlayerBoxClrCf2);
                                draw->AddTriangleFilled(ImVec2(points.at(0).X, points.at(0).Y), ImVec2(points.at(1).X, points.at(1).Y), ImVec2(points.at(2).X, points.at(2).Y), Pl);
                                std::string s;
                                s += std::to_string((int)Distance);/*            0...D      */
                                if (IsVisible) {                  /*           /|\        */
                                    if (Player->bEnsure) {             /*           / \        */
                                    }
                                    else {
                                        auto textSize = ImGui::CalcTextSize(s.c_str(), 0, ((float)density / 20.0f));
                                        draw->AddText(NULL, ((float)density / 12.0f), { new_point_x - (textSize.x / 2), new_point_y + 7.1f }, IM_COL32(0, 0, 0, 255), s.c_str());
                                        draw->AddText(NULL, ((float)density / 12.0f), { new_point_x - (textSize.x / 2), new_point_y + 6.9f }, IM_COL32(0, 0, 0, 255), s.c_str());
                                        draw->AddText(NULL, ((float)density / 12.0f), { new_point_x - (textSize.x / 2), new_point_y + 7.f }, IM_COL32(255, 0, 0, 255), s.c_str());

                                    }
                                }
                                else {
                                    if (Player->bEnsure) {
                                    }
                                    else {
                                        auto textSize = ImGui::CalcTextSize(s.c_str(), 0, ((float)density / 20.0f));
                                        draw->AddText(NULL, ((float)density / 12.0f), { new_point_x - (textSize.x / 2), new_point_y + 7.1f }, IM_COL32(0, 0, 0, 255), s.c_str());
                                        draw->AddText(NULL, ((float)density / 12.0f), { new_point_x - (textSize.x / 2), new_point_y + 6.9f }, IM_COL32(0, 0, 0, 255), s.c_str());
                                        draw->AddText(NULL, ((float)density / 12.0f), { new_point_x - (textSize.x / 2), new_point_y + 7.f }, IM_COL32(255, 255, 0, 255), s.c_str());

                                    }
                                }
                            }

                            auto HeadPos = Player->GetBonePos("Head", {});
                            ImVec2 HeadPosSC;

                            auto RootPos = Player->GetBonePos("Root", {});
                            ImVec2 RootPosSC;

                            auto upper_r = Player->GetBonePos("upperarm_r", {});
                            ImVec2 upper_rPoSC;
                            auto lowerarm_r = Player->GetBonePos("lowerarm_r", {});
                            ImVec2 lowerarm_rPoSC;
                            auto hand_r = Player->GetBonePos("hand_r", {});
                            ImVec2 hand_rPoSC;
                            auto upper_l = Player->GetBonePos("upperarm_l", {});
                            ImVec2 upper_lPoSC;
                            auto lowerarm_l = Player->GetBonePos("lowerarm_l", {});
                            ImVec2 lowerarm_lSC;
                            auto hand_l = Player->GetBonePos("hand_l", {});
                            ImVec2 hand_lPoSC;
                            auto thigh_l = Player->GetBonePos("thigh_l", {});
                            ImVec2 thigh_lPoSC;
                            auto calf_l = Player->GetBonePos("calf_l", {});
                            ImVec2 calf_lPoSC;
                            auto foot_l = Player->GetBonePos("foot_l", {});
                            ImVec2 foot_lPoSC;
                            auto thigh_r = Player->GetBonePos("thigh_r", {});
                            ImVec2 thigh_rPoSC;
                            auto calf_r = Player->GetBonePos("calf_r", {});
                            ImVec2 calf_rPoSC;
                            auto foot_r = Player->GetBonePos("foot_r", {});
                            ImVec2 foot_rPoSC;
                            auto neck_01 = Player->GetBonePos("neck_01", {});
                            ImVec2 neck_01PoSC;
                            auto Pelvis = Player->GetBonePos("Pelvis", {});
                            ImVec2 PelvisPoSC;
                            int Pl;
                            Pl = IM_COL32(255, 000, 000, 255);
                            if (W2S(HeadPos, (FVector2D*)&HeadPosSC) &&
                                W2S(upper_r, (FVector2D*)&upper_rPoSC) &&
                                W2S(upper_l, (FVector2D*)&upper_lPoSC) &&
                                W2S(lowerarm_r, (FVector2D*)&lowerarm_rPoSC) &&
                                W2S(hand_r, (FVector2D*)&hand_rPoSC) &&
                                W2S(lowerarm_l, (FVector2D*)&lowerarm_lSC) &&
                                W2S(hand_l, (FVector2D*)&hand_lPoSC) &&
                                W2S(thigh_l, (FVector2D*)&thigh_lPoSC) &&
                                W2S(calf_l, (FVector2D*)&calf_lPoSC) &&
                                W2S(foot_l, (FVector2D*)&foot_lPoSC) &&
                                W2S(thigh_r, (FVector2D*)&thigh_rPoSC) &&
                                W2S(calf_r, (FVector2D*)&calf_rPoSC) &&
                                W2S(foot_r, (FVector2D*)&foot_rPoSC) &&
                                W2S(neck_01, (FVector2D*)&neck_01PoSC) &&
                                W2S(Pelvis, (FVector2D*)&PelvisPoSC) &&
                                W2S(RootPos, (FVector2D*)&RootPosSC)) {


                                if (Config.ESPMenu.Line)
                                {
                                    int colorLine = GetRandomColorByIndexAlpa(Player->TeamID);
                                    if (Player->bEnsure) {
                                        draw->AddLine({ (float)glWidth / 2, 0 }, HeadPosSC,
                                            PlayerBoxClrCf, Config.Line);
                                    }
                                    else {
                                        draw->AddLine({ (float)glWidth / 2, 0 }, HeadPosSC,
                                            PlayerBoxClrCf, Config.Line);
                                    }
                                }

                                if (Config.ESPMenu.Box)
                                {
                                    float boxHeight = abs(HeadPosSC.y - RootPosSC.y);
                                float boxWidth = boxHeight * 0.65f;
                                Box4Line(draw, 0.5f, HeadPosSC.x - (boxWidth / 2), HeadPosSC.y, boxWidth, boxHeight,  PlayerBoxClrCf);
                                }

                                if (Config.ESPMenu.Skeleton)
                                {
                                    if (Player->Health == 0.0f && !Player->bDead) {
                                        float boxWidth = 7.f - Distance * 0.03;
                                        draw->AddCircle({ HeadPosSC.x, HeadPosSC.y }, boxWidth, IM_COL32(102, 255, 255, 255), 0, Config.Skeleton);
                                        draw->AddLine({ upper_rPoSC.x, upper_rPoSC.y }, neck_01PoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ upper_lPoSC.x, upper_lPoSC.y }, neck_01PoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ upper_rPoSC.x, upper_rPoSC.y }, lowerarm_rPoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ lowerarm_rPoSC.x, lowerarm_rPoSC.y }, hand_rPoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ upper_lPoSC.x, upper_lPoSC.y }, lowerarm_lSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ lowerarm_lSC.x, lowerarm_lSC.y }, hand_lPoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ thigh_rPoSC.x, thigh_rPoSC.y }, thigh_lPoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ thigh_lPoSC.x, thigh_lPoSC.y }, calf_lPoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ calf_lPoSC.x, calf_lPoSC.y }, foot_lPoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ thigh_rPoSC.x, thigh_rPoSC.y }, calf_rPoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ calf_rPoSC.x, calf_rPoSC.y }, foot_rPoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ neck_01PoSC.x, neck_01PoSC.y }, PelvisPoSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                        draw->AddLine({ neck_01PoSC.x, neck_01PoSC.y }, HeadPosSC, IM_COL32(102, 255, 255, 255), Config.Skeleton);
                                    }
                                    else {
                                        float boxWidth = 7.f - Distance * 0.03;
                                        draw->AddCircle({ HeadPosSC.x, HeadPosSC.y }, boxWidth, PlayerBoxClrCf, 0, Config.Skeleton);
                                        draw->AddLine({ upper_rPoSC.x, upper_rPoSC.y }, neck_01PoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ upper_lPoSC.x, upper_lPoSC.y }, neck_01PoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ upper_rPoSC.x, upper_rPoSC.y }, lowerarm_rPoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ lowerarm_rPoSC.x, lowerarm_rPoSC.y }, hand_rPoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ upper_lPoSC.x, upper_lPoSC.y }, lowerarm_lSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ lowerarm_lSC.x, lowerarm_lSC.y }, hand_lPoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ thigh_rPoSC.x, thigh_rPoSC.y }, thigh_lPoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ thigh_lPoSC.x, thigh_lPoSC.y }, calf_lPoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ calf_lPoSC.x, calf_lPoSC.y }, foot_lPoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ thigh_rPoSC.x, thigh_rPoSC.y }, calf_rPoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ calf_rPoSC.x, calf_rPoSC.y }, foot_rPoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ neck_01PoSC.x, neck_01PoSC.y }, PelvisPoSC, PlayerBoxClrCf, Config.Skeleton);
                                        draw->AddLine({ neck_01PoSC.x, neck_01PoSC.y }, HeadPosSC, PlayerBoxClrCf, Config.Skeleton);
                                    }
                                }
								
								
                              // if (localPlayer->PoseState == )
                              //            {
                              //            //Flash On
                              //            
                              //            }
                              //            else
                              //            {
                              //            //Flash Off
                              //            
                              //            }

                                if (Config.Ipad) {
                                    localPlayer->ThirdPersonCameraComponent->SetFieldOfView(Config.IpadS);
                                    //ImGui::SliderFloat("set view",&view,50.0f, 300.0f);
                                }



                                if (Config.AutoParachute) {

                                    if (localPlayer->ParachuteState == static_cast<EParachuteState>(2)) // will work after parachute open
                                    {
                                        GetWorld()->PersistentLevel->WorldSettings->MinUndilatedFrameTime = 0.100f;
                                    }
                                    else
                                    {
                                        GetWorld()->PersistentLevel->WorldSettings->MinUndilatedFrameTime = 0.00050000002f;
                                    }
                                }

                                if (Config.fly) {
                                    UCharacterMovementComponent* CharacterMovement = localPlayer->CharacterMovement;
                                    if (CharacterMovement) {
                                        CharacterMovement->JumpZVelocity = (Config.flyS);
                                        CharacterMovement->GravityScale = 1.0f;

                                    }
                                }
								
								
							 if (Config.ESPMenu.Distance) {
                                    ImGuiStyle &style = ImGui::GetStyle();
                                    ImVec4 savedTextColor = style.Colors[ImGuiCol_Text];
                                    style.Colors[ImGuiCol_Text] = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);
  
  
                                    std::string s;

                                    

                                    if (Config.ESPMenu.Distance) {
                                        s += (!s.empty() ? "  " : "") +
                                             std::to_string((int) Distance) + " [M]";
                                    }

                                    auto textSize = ImGui::CalcTextSize(s.c_str(), 0,
                                                                         ((float) density / 18.0f));

                                    float strokeSize = 1.5f;
                                    for (float x = -strokeSize; x <= strokeSize; x += strokeSize) {
                                        for (float y = -strokeSize;
                                             y <= strokeSize; y += strokeSize) {
                                            draw->AddText(NULL, ((float) density / 18.0f),{RootPosSC.x  - (textSize.x / 2) + x,RootPosSC.y- -20.0f + y}, IM_COL32(0, 0, 0, 255),s.c_str());
                                        }
                                    }

                                    draw->AddText(NULL, ((float) density / 18.0f),{RootPosSC.x  -(textSize.x / 2), RootPosSC.y - -20.0f }, IM_COL32(255, 255, 255, 255), s.c_str());

                                    style.Colors[ImGuiCol_Text] = savedTextColor;
                                
					     }
								
								
								
								
							 if (Config.ESPMenu.TeamID || Config.ESPMenu.Name ||
                                    Config.ESPMenu.Distance) {
                                    ImGuiStyle &style = ImGui::GetStyle();
                                    ImVec4 savedTextColor = style.Colors[ImGuiCol_Text];
                                    style.Colors[ImGuiCol_Text] = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);
  
  
                                    std::string s;

                                    if (Config.ESPMenu.TeamID) {
                                        s += "[" + std::to_string(Player->TeamID) + "]   ";
                                    }

                                    if (Config.ESPMenu.Name) {
                                        s += Player->bEnsure ? "BOT"
                                                             : Player->PlayerName.ToString();
                                    }

                                    

                                    auto textSize = ImGui::CalcTextSize(s.c_str(), 0,
                                                                         ((float) density / 18.0f));

                                    float strokeSize = 1.5f;
                                    for (float x = -strokeSize; x <= strokeSize; x += strokeSize) {
                                        for (float y = -strokeSize;
                                             y <= strokeSize; y += strokeSize) {
                                            draw->AddText(NULL, ((float) density / 18.0f),{RootPosSC.x  - (textSize.x / 2) + x,RootPosSC.y - -2 + y}, IM_COL32(0, 0, 0, 255),s.c_str());
                                        }
                                    }

                                    draw->AddText(NULL, ((float) density / 18.0f),{RootPosSC.x  -(textSize.x / 2), RootPosSC.y - -2}, IM_COL32(255, 165, 0, 255), s.c_str());

                                    style.Colors[ImGuiCol_Text] = savedTextColor;
                                }



                                if (Config.ESPMenu.Health)
                                {
     int CurHP = (int) std::max(0, std::min((int) Player->Health, (int) Player->HealthMax));
    int MaxHP = (int) Player->HealthMax;

    float healthPercentage = (float) CurHP / MaxHP;

    // Define color thresholds and corresponding colors
    ImVec4 colors[] = {
        ImVec4(1.0f, 0.0f, 0.0f, 1.0f),  // Red for very low health
        ImVec4(1.0f, 1.0f, 0.0f, 1.0f),  // Yellow for moderate health
        ImVec4(0.0f, 1.0f, 0.0f, 1.0f)   // Green for high health
    };

    // Define health percentage thresholds
    float thresholds[] = {0.2f, 0.5f}; // Adjust these values as needed

    ImVec4 interpolatedColor;

    for (int i = 0; i < sizeof(thresholds) / sizeof(thresholds[0]); i++) {
        if (healthPercentage <= thresholds[i]) {
            interpolatedColor = colors[i];
            break;
        }
        if (i == sizeof(thresholds) / sizeof(thresholds[0]) - 1) {
            interpolatedColor = colors[i + 1]; // Use the last color if health is above all thresholds
        }
    }

    float barWidth = density / 8.0f;
    float barHeight = barWidth * 0.10f;

    ImVec2 barStart = {HeadPosSC.x - (barWidth / 2), HeadPosSC.y - 10.0f};
    ImVec2 barEndFilled = {barStart.x + barWidth * healthPercentage, barStart.y + barHeight};
    ImVec2 barEndRect = {barStart.x + barWidth, barStart.y + barHeight};

    ImU32 barColor = IM_COL32((int)(interpolatedColor.x * 255), (int)(interpolatedColor.y * 255), (int)(interpolatedColor.z * 255), 255);

    draw->AddRectFilled(barStart, barEndFilled, barColor);
    draw->AddRect(barStart, barEndRect, IM_COL32(0, 0, 0, 255));                          
  }




                                if (Config.ESPMenu.Vehicle || Config.ESPMenu.Vehicleinfo)
                                {
                                    if (Actors[i]->IsA(ASTExtraVehicleBase::StaticClass()))
                                    {
                                        auto Vehicle = (ASTExtraVehicleBase*)Actors[i];
                                        if (!Vehicle->Mesh)
                                            continue;
                                        int CurHP = (int)std::max(0, std::min((int)Vehicle->VehicleCommon->HP, (int)Vehicle->VehicleCommon->HPMax));
                                        int MaxHP = (int)Vehicle->VehicleCommon->HPMax;
                                        long curHP_Color = IM_COL32(std::min(((510 * (MaxHP - CurHP)) / MaxHP), 255), std::min(((510 * CurHP) / MaxHP), 255), 0, 155);
                                        float Distance = Vehicle->GetDistanceTo(localPlayer) / 100.f;
                                        FVector2D vehiclePos;
                                        if (W2S(Vehicle->K2_GetActorLocation(), &vehiclePos))
                                        {
                                            auto mWidthScale = std::min(0.10f * Distance, 50.f);
                                            auto mWidth = 70.f - mWidthScale;
                                            auto mHeight = mWidth * 0.15f;
                                            if (Config.ESPMenu.Vehicle)
                                            {
                                                std::string s = GetVehicleName(Vehicle);
                                                s += " [";
                                                s += std::to_string((int)Distance);
                                                s += "m]";
                                                auto textSize = ImGui::CalcTextSize2(s.c_str(), 0, ((float)density / 30.0f));
                                                // draw->AddTextStorke(NULL, 15.0f, (int)vehiclePos.X - (textSize.x / 2), (int)vehiclePos.Y, ToColor(Config.ColorsESP.Vehicle), s.c_str());
                                            }
                                            if (Config.ESPMenu.Vehicleinfo)
                                            {
                                                std::string sf;
                                                sf += "[Fuel:";
                                                sf += std::to_string((int)(100 * Vehicle->VehicleCommon->Fuel / Vehicle->VehicleCommon->FuelMax));
                                                sf += "%] - [HP:";
                                                sf += std::to_string((int)(100 * Vehicle->VehicleCommon->HP / Vehicle->VehicleCommon->HPMax));
                                                sf += "%]";
                                                auto textSize = ImGui::CalcTextSize2(sf.c_str(), 0, ((float)density / 30.0f));
                                                //draw->AddTextStorke(NULL, 15.0f, (int)vehiclePos.X - (textSize.x / 2), (int)vehiclePos.Y + 15, ToColor(Config.ColorsESP.Vehicle), sf.c_str());
                                            }
                                        }
                                    }
                                }

                                if (Config.FLASH) {

                                    localPlayer->SpeedScale = (Config.FLASH1);

                                   // localPlayer->STPlayerController->AcknowledgedPawn->CustomTimeDilation = 5.0f;

                                }
                                        if (FLASSHHHHHHH) {
                                         localPlayer->StandHalfHeight == 77.0f;
                                         localPlayer->StandHalfHeight == 50.0f;
                                               }



                                if (Config.Fixstuck) {
                                    localPlayer->StandHalfHeight = 77.0f;
                                    localPlayer->CrouchHalfHeight = 50.0f;

                                }

                                if (Config.ShowDamaze) {
                                    if (localPlayer->bIsWeaponFiring) {

                                        ((ASTExtraPlayerController*)(localPlayer->Controller))->GameReplayType = 2;

                                    }
                                    else {

                                        ((ASTExtraPlayerController*)(localPlayer->Controller))->GameReplayType = 1;
                                    }
                                }
							
                                if (Alert1) {

                                    bool shit = false;

                                    FVector MyPosition, EnemyPosition;
                                    ASTExtraVehicleBase* CurrentVehiclea = Player->CurrentVehicle;
                                    if (CurrentVehiclea) {
                                        MyPosition = CurrentVehiclea->RootComponent->RelativeLocation;
                                    }
                                    else {
                                        MyPosition = Player->RootComponent->RelativeLocation;
                                    }
                                    ASTExtraVehicleBase* CurrentVehicle = localPlayer->CurrentVehicle;
                                    if (CurrentVehicle) {
                                        EnemyPosition = CurrentVehicle->RootComponent->RelativeLocation;
                                    }
                                    else {
                                        EnemyPosition = localPlayer->RootComponent->RelativeLocation;
                                    }
                                    FVector EntityPos = WorldToRadar(localController->PlayerCameraManager->CameraCache.POV.Rotation.Yaw, MyPosition, EnemyPosition, NULL, NULL, Vector3(glWidth, glHeight, 0), shit);
                                    FVector angle = FVector();
                                    Vector3 forward = Vector3((float)(glWidth / 2) - EntityPos.X, (float)(glHeight / 2) - EntityPos.Y, 0.0f);
                                    VectorAnglesRadar(forward, angle);
                                    const auto angle_yaw_rad = DEG2RAD(angle.Y + 180.f);
                                    const auto new_point_x = (glWidth / 2) + (55/*alert dist from me*/) / 2 * 8 * cosf(angle_yaw_rad);
                                    const auto new_point_y = (glHeight / 2) + (55/*alert dist from me*/) / 2 * 8 * sinf(angle_yaw_rad);
                                    std::array<Vector3, 3> points{ Vector3(new_point_x - ((90) / 4 + 3.5f) / 2, new_point_y - ((55) / 4 + 3.5f) / 2, 0.f), Vector3(new_point_x + ((90) / 4 + 3.5f) / 4, new_point_y, 0.f), Vector3(new_point_x - ((90) / 4 + 3.5f) / 2, new_point_y + ((55) / 4 + 3.5f) / 2, 0.f) };
                                    RotateTriangle(points, angle.Y + 180.f);
                                    if (Player->bEnsure) {
                                        draw->AddTriangle(ImVec2(points.at(0).X, points.at(0).Y), ImVec2(points.at(1).X, points.at(1).Y), ImVec2(points.at(2).X, points.at(2).Y), IM_COL32(0, 255, 0, 255), 1.5f);
                                        draw->AddTriangleFilled(ImVec2(points.at(0).X, points.at(0).Y), ImVec2(points.at(1).X, points.at(1).Y), ImVec2(points.at(2).X, points.at(2).Y), IM_COL32(0, 255, 0, 255));
                                    }
                                    else {
                                        draw->AddTriangle(ImVec2(points.at(0).X, points.at(0).Y), ImVec2(points.at(1).X, points.at(1).Y), ImVec2(points.at(2).X, points.at(2).Y), IM_COL32(255, 0, 0, 255), 1.5f);
                                        draw->AddTriangleFilled(ImVec2(points.at(0).X, points.at(0).Y), ImVec2(points.at(1).X, points.at(1).Y), ImVec2(points.at(2).X, points.at(2).Y), IM_COL32(255, 0, 0, 255));
                                    }
                                }

                                if (Config.GodView) {
                                    USceneComponent* MeshContainer = localPlayer->MeshContainer;
                                    UCustomSpringArmComponent* SpringArmComp = localPlayer->SpringArmComp;
                                    MeshContainer->RelativeLocation.X = 113;
                                    SpringArmComp->RelativeLocation.X = 133;
                                } else {
                                USceneComponent * MeshContainer = localPlayer->MeshContainer;
                                UCustomSpringArmComponent* SpringArmComp = localPlayer->SpringArmComp;
                                MeshContainer->RelativeLocation.X = 0;
                                SpringArmComp->RelativeLocation.X = 0;
                                }


if (AutoFlashh) {
if (localPlayer->PoseState == ESTEPoseState::ESTEPoseState__Crouch || localPlayer->PoseState == ESTEPoseState::ESTEPoseState__CrouchSprint)
{
//Flash On 
Flash = true; 
}
else
{
//Flash Off
Flash = false; 
								}}
 if (rec0 || ins1 || ins2) {
                auto WeaponManagerComponent = localPlayer->WeaponManagerComponent;
                if (WeaponManagerComponent) {
                    auto Slot = WeaponManagerComponent->GetCurrentUsingPropSlot();
                    if ((int) Slot.GetValue() >= 1 && (int) Slot.GetValue() <= 3) {
                        auto CurrentWeaponReplicated = (ASTExtraShootWeapon *) WeaponManagerComponent->CurrentWeaponReplicated;
                        if (CurrentWeaponReplicated) {
                            auto ShootWeaponEntityComp = CurrentWeaponReplicated->ShootWeaponEntityComp;
                            auto ShootWeaponEffectComp = CurrentWeaponReplicated->ShootWeaponEffectComp;
                            if (ShootWeaponEntityComp && ShootWeaponEffectComp) {
                                if (Config.ESPMenu.Recoil) {
                                    ShootWeaponEntityComp->AccessoriesVRecoilFactor = 0.0f;
                                    ShootWeaponEntityComp->AccessoriesHRecoilFactor = 0.0f;
                                    ShootWeaponEntityComp->AccessoriesRecoveryFactor = 0.0f;

                                    ShootWeaponEntityComp->RecoilKickADS = 0.0f;
                                }

                              if (ins1) {
                           auto infinity = std::numeric_limits<float>::infinity(); memset(&ShootWeaponEntityComp->WeaponHitPartCoff,
                                           infinity,
                                           sizeof(FWeaponHitPartCoff));
                                    memset(&ShootWeaponEntityComp->WeaponHitPartCoffZombie,
                                           infinity,
                                           sizeof(FWeaponHitPartCoff));
                                     auto ShootWeaponEntity = CurrentWeaponReplicated->ShootWeaponEntityComp;
                              //      auto ShootWeaponEntity = CurrentWeaponReplicated->ShootWeaponEntityComponent;
auto BulletFireSpeed = *(float*)((uintptr_t)ShootWeaponEntity + 0x408);
BulletFireSpeed = infinity;
ShootWeaponEntityComp->LaunchGravityScale = infinity;
ShootWeaponEntityComp->VehicleDamageScale = infinity;
ShootWeaponEntityComp->BaseImpactDamage = infinity;
ShootWeaponEntityComp->BulletRange = infinity;
ShootWeaponEntityComp->BulletMomentum = infinity;
                                
                            }
							if (ins2) {
                                    ShootWeaponEntityComp->BulletMomentum = 10000000.0f;
                                    ShootWeaponEntityComp->BulletRange = 10000000.0f;
                                    ShootWeaponEntityComp->BaseImpactDamage = 100000000.0f;
                                    ShootWeaponEntityComp->MaxDamageRate = 100000000.0f;
         ShootWeaponEntityComp->BulletTrackDistanceFix = 100000000.0f;

                                }
                                if (rec0) {
memset(&ShootWeaponEntityComp->RecoilInfo, 0,sizeof(FSRecoilInfo));
ShootWeaponEntityComp->AccessoriesVRecoilFactor = 0.0f;
ShootWeaponEntityComp->AccessoriesHRecoilFactor = 0.0f;
ShootWeaponEntityComp->AccessoriesRecoveryFactor = 0.0f;
memset(&ShootWeaponEntityComp->DeviationInfo, 0,sizeof(FSDeviation));
ShootWeaponEntityComp->ShotGunCenterPerc = 0.0f;
ShootWeaponEntityComp->ShotGunVerticalSpread = 0.0f;
ShootWeaponEntityComp->ShotGunHorizontalSpread = 0.0f;
ShootWeaponEntityComp->GameDeviationFactor = 0.0f;
ShootWeaponEntityComp->GameDeviationAccuracy = 0.0f;
ShootWeaponEntityComp->CrossHairInitialSize = 0.0f;
ShootWeaponEntityComp->CrossHairBurstSpeed = 0.0f;
ShootWeaponEntityComp->CrossHairBurstIncreaseSpeed = 0.0f;
ShootWeaponEntityComp->VehicleWeaponDeviationAngle = 0.0f;
ShootWeaponEntityComp->RecoilKickADS = 0.0f;
ShootWeaponEntityComp->AccessoriesVRecoilFactor = 0.0f;
                                    ShootWeaponEntityComp->AccessoriesHRecoilFactor = 0.0f;
                                    ShootWeaponEntityComp->AccessoriesRecoveryFactor = 0.0f;
                                    ShootWeaponEffectComp->CameraShakeInnerRadius = 0.0f;
                                    ShootWeaponEffectComp->CameraShakeOuterRadius = 0.0f;
                                    ShootWeaponEffectComp->CameraShakFalloff = 0.0f;
                                    memset(&ShootWeaponEntityComp->RecoilInfo, 0,sizeof(FSRecoilInfo));
ShootWeaponEntityComp->AccessoriesVRecoilFactor = 0.0f;
ShootWeaponEntityComp->AccessoriesHRecoilFactor = 0.0f;
ShootWeaponEntityComp->AccessoriesRecoveryFactor = 0.0f;
memset(&ShootWeaponEntityComp->DeviationInfo, 0,sizeof(FSDeviation));
ShootWeaponEntityComp->ShotGunCenterPerc = 0.0f;
ShootWeaponEntityComp->ShotGunVerticalSpread = 0.0f;
ShootWeaponEntityComp->ShotGunHorizontalSpread = 0.0f;
ShootWeaponEntityComp->GameDeviationFactor = 0.0f;
ShootWeaponEntityComp->GameDeviationAccuracy = 0.0f;
ShootWeaponEntityComp->CrossHairInitialSize = 0.0f;
ShootWeaponEntityComp->CrossHairBurstSpeed = 0.0f;
ShootWeaponEntityComp->CrossHairBurstIncreaseSpeed = 0.0f;
ShootWeaponEntityComp->VehicleWeaponDeviationAngle = 0.0f;
ShootWeaponEntityComp->RecoilKickADS = 0.0f;
memset(&ShootWeaponEntityComp->RecoilInfo, 0, sizeof(FSRecoilInfo));

											ShootWeaponEntityComp->AccessoriesVRecoilFactor = 0.0f;
											ShootWeaponEntityComp->AccessoriesHRecoilFactor = 0.0f;
											ShootWeaponEntityComp->AccessoriesRecoveryFactor = 0.0f;

											memset(&ShootWeaponEntityComp->DeviationInfo, 0, sizeof(FSDeviation));

											ShootWeaponEntityComp->ShotGunCenterPerc = 0.0f;
											ShootWeaponEntityComp->ShotGunVerticalSpread = 0.0f;
											ShootWeaponEntityComp->ShotGunHorizontalSpread = 0.0f;

											ShootWeaponEntityComp->GameDeviationFactor = 0.0f;
											ShootWeaponEntityComp->GameDeviationAccuracy = 0.0f;

											ShootWeaponEntityComp->RecoilKickADS = 0.0f;
										
										ShootWeaponEffectComp->CameraShakeInnerRadius = 0.0f;
											ShootWeaponEffectComp->CameraShakeOuterRadius = 0.0f;
											ShootWeaponEffectComp->CameraShakFalloff = 0.0f;
}

}
								                                }
                            }
                        }
                    }


                                    if (Config.Instant || Config.Cross || Config.ShowDamage ) {
                                        auto WeaponManagerComponent = localPlayer->WeaponManagerComponent;
                                        if (WeaponManagerComponent) {
                                            auto Slot = WeaponManagerComponent->GetCurrentUsingPropSlot();
                                            if ((int)Slot.GetValue() >= 1 && (int)Slot.GetValue() <= 3) {
                                                auto CurrentWeaponReplicated = (ASTExtraShootWeapon*)WeaponManagerComponent->CurrentWeaponReplicated;
                                                if (CurrentWeaponReplicated) {
                                                    auto ShootWeaponEntityComp = CurrentWeaponReplicated->ShootWeaponEntityComp;
                                                    auto ShootWeaponEffectComp = CurrentWeaponReplicated->ShootWeaponEffectComp;
                                                    if (ShootWeaponEntityComp && ShootWeaponEffectComp) {
                                                        if (Config.Recoil) {
                                                     *(float *)((uintptr_t)ShootWeaponEntityComp + 0x934) = 0;
                                                        ShootWeaponEntityComp->RecoilKickADS = 0.0f;             // No Shake 1
                                                        ShootWeaponEntityComp->AnimationKick = 0.0f;             // No Shake 2
                                                        ShootWeaponEntityComp->GameDeviationFactor = 0.0f;       // Static Croshair
                                                        ShootWeaponEntityComp->ShotGunCenterPerc = 0.0f;         // No Spread 1
                                                        ShootWeaponEntityComp->ShotGunVerticalSpread = 0.0f;     // No Spread 2
                                                        ShootWeaponEntityComp->ShotGunHorizontalSpread = 0.0f;   // No Spread 3
                                                        ShootWeaponEntityComp->AccessoriesVRecoilFactor = 0.0f;  // More Accuracy 1
                                                        ShootWeaponEntityComp->AccessoriesHRecoilFactor = 0.0f;  // More Accuracy 2
                                                        ShootWeaponEntityComp->AccessoriesRecoveryFactor = 0.0f; // More Accuracy 3
                                                        }
                                                        if (Config.Cross) {
                                        static float cnt = 0.0f;
                                        const float RainbowSpeed = 18.0f;
                                        const int RainbowColorCount = 7;
                                        const float FullCircle = 360.0f;
                                        const float IncrementValue = 0.02f;

                                        FLinearColor rainbowColors[RainbowColorCount] = {
                                                FLinearColor(1.0f, 0.0f, 0.0f, 1.0f),
                                                FLinearColor(1.0f, 0.5f, 0.0f, 1.0f),
                                                FLinearColor(1.0f, 1.0f, 0.0f, 1.0f),
                                                FLinearColor(0.0f, 1.0f, 0.0f, 1.0f),
                                                FLinearColor(0.0f, 0.0f, 1.0f, 1.0f),
                                                FLinearColor(0.5f, 0.0f, 1.0f, 1.0f),
                                                FLinearColor(1.0f, 0.0f, 1.0f, 1.0f)
                                        };

                                        int rainbowColorIndex = static_cast<int>(fmod(cnt * RainbowSpeed, RainbowColorCount));
                                        FLinearColor color1 = rainbowColors[rainbowColorIndex];
                                        FLinearColor color2 = rainbowColors[(rainbowColorIndex + 1) % RainbowColorCount];

                                        float rainbowPhase = fmod(cnt * RainbowSpeed, 1.0f);
                                        FLinearColor interpolatedColor = FLinearColor(
                                                color1.R + (color2.R - color1.R) * rainbowPhase,
                                                color1.G + (color2.G - color1.G) * rainbowPhase,
                                                color1.B + (color2.B - color1.B) * rainbowPhase,
                                                1.0f
                                        );
                                        localController->CrossHairColor = interpolatedColor;

                                        if (cnt >= FullCircle) {
                                            cnt = 0.0f;
                                        } else {
                                            cnt += IncrementValue;
                                        }
                                    }


                                                        if (Config.Instant) {
															
                                                           ShootWeaponEntityComp->BulletRange = 100000.0f;
                                                           ShootWeaponEntityComp->BaseImpactDamage = 100000.0f;
                                                           ShootWeaponEntityComp->WeaponAimFOV = 100000.0f;
                                                           ShootWeaponEntityComp->MaxDamageRate = 100000.0f;
                                                           ShootWeaponEntityComp->MaxVelocityOffsetAddRate = 100000.0f;
                                                           ShootWeaponEntityComp->BulletRange = 100000.0f;
                                                           ShootWeaponEntityComp->BurstShootInterval = 0;
                                                           ShootWeaponEntityComp->BurstShootCD = 100000.0f;
                                                           ShootWeaponEntityComp->WeaponBodyLength = 100000.0f;
                                                           ShootWeaponEntityComp->MaxBulletImpactFXClampDistance = 100000.0f;
														}
														
														
                                       			if (Config.ShowDamage) {
                                                          if (localPlayer->bIsWeaponFiring) {
                                                      
                                                              ((ASTExtraPlayerController *) (localPlayer->Controller))->GameReplayType = 2;
                                                      
                                                          } else {
                                                      
                                                              ((ASTExtraPlayerController *) (localPlayer->Controller))->GameReplayType = 1;
                                                          }
                                                      }			

                                                    }
                                                }
                                            }

                                        }
                                    }
									

                                if (Actors[i]->IsA(APickUpWrapperActor::StaticClass())) {
                                    auto PickUp = (APickUpWrapperActor*)Actors[i];
                                    if (Items[PickUp->DefineID.TypeSpecificID]) {
                                        auto RootComponent = PickUp->RootComponent;
                                        if (!RootComponent)
                                            continue;

                                        float Distance = PickUp->GetDistanceTo(localPlayer) / 100.f;

                                        FVector2D itemPos;
                                        if (W2S(PickUp->K2_GetActorLocation(), &itemPos)) {
                                            std::string s;

                                            for (auto& category : items_data) {
                                                for (auto& item : category["Items"]) {
                                                    if (item["itemId"] == PickUp->DefineID.TypeSpecificID) {
                                                        s = item["itemName"].get<std::string>();
                                                        break;
                                                    }
                                                }
                                            }


                                            s += " - ";
                                            s += std::to_string((int)Distance);
                                            s += "m";

                                            draw->AddText(NULL, ((float)density / 25.0f), { itemPos.X, itemPos.Y }, ToColor(ItemColors[PickUp->DefineID.TypeSpecificID]), s.c_str());
                                        }
                                    }
                                }


                            }
                        }
                    }
                }
            }

            g_LocalController = localController;
            g_LocalPlayer = localPlayer;
            std::string s;
            int TotalCount = totalEnemies + totalBots;
                if (TotalCount > 0) {
                auto Flags69 = ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoTitleBar;
                ImVec2 center = ImGui::GetMainViewport()->GetCenter();
                ImGui::SetNextWindowPos(ImVec2(center.x, 100), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.5f));
                ImGui::SetNextWindowSize(ImVec2(210.0f, 35.0f));
                ImGui::PushStyleColor(ImGuiCol_Border, IM_COL32(0,255,0,255));
                ImGui::PushStyleColor(ImGuiCol_WindowBg, IM_COL32(0,0,0,180));
                ImGui::Begin("ene", 0, Flags69);
                ImGui::PopStyleColor(2);
                ImGui::Text(("Total enemy around you : %d "),  TotalCount);
                ImGui::End();
            } else {
		         auto Flags69 = ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoTitleBar;
                 ImVec2 center = ImGui::GetMainViewport()->GetCenter();
                 ImGui::SetNextWindowPos(ImVec2(center.x, 100), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.5f));
                 ImGui::SetNextWindowSize(ImVec2(210.0f, 35.0f));
                 ImGui::PushStyleColor(ImGuiCol_Border, IM_COL32(0,255,0,180));
                 ImGui::PushStyleColor(ImGuiCol_WindowBg, IM_COL32(0,0,0,180));
                 ImGui::Begin("ene", 0, Flags69);
                 ImGui::PopStyleColor(2);
                 ImGui::Text(("Total enemy around you : %d "),  TotalCount);
                 ImGui::End();
				
			}
			
        }


        fps.update();
    }

    if (Config.BulletTracking.Enable) {
        draw->AddCircle(ImVec2(glWidth / 2.0f, glHeight / 2.0f), Config.BulletTracking.Cross * 1.0f, ToColor(Config.ColorsESP.Fovv), 180, 1.0f);
    }
				}
}

//std::string getClipboardText() {
//    if (!g_App)
//        return "";
//
//    auto activity = g_App->activity;
//    if (!activity)
//        return "";
//
//    auto vm = activity->vm;
//    if (!vm)
//        return "";
//
//    auto object = activity->clazz;
//    if (!object)
//        return "";
//
//    std::string result;
//
//    JNIEnv *env;
//    vm->AttachCurrentThread(&env, 0);
//    {
//        auto ContextClass = env->FindClass("android/content/Context");
//        auto getSystemServiceMethod = env->GetMethodID(ContextClass, "getSystemService", "(Ljava/lang/String;)Ljava/lang/Object;");
//
//        auto str = env->NewStringUTF("clipboard");
//        auto clipboardManager = env->CallObjectMethod(object, getSystemServiceMethod, str);
//        env->DeleteLocalRef(str);
//
//        auto ClipboardManagerClass = env->FindClass("android/content/ClipboardManager");
//        auto getText = env->GetMethodID(ClipboardManagerClass, "getText", "()Ljava/lang/CharSequence;");
//
//        auto CharSequenceClass = env->FindClass("java/lang/CharSequence");
//        auto toStringMethod = env->GetMethodID(CharSequenceClass, "toString", "()Ljava/lang/String;");
//
//        auto text = env->CallObjectMethod(clipboardManager, getText);
//        if (text) {
//            str = (jstring) env->CallObjectMethod(text, toStringMethod);
//            result = env->GetStringUTFChars(str, 0);
//            env->DeleteLocalRef(str);
//            env->DeleteLocalRef(text);
//        }
//
//        env->DeleteLocalRef(CharSequenceClass);
//        env->DeleteLocalRef(ClipboardManagerClass);
//        env->DeleteLocalRef(clipboardManager);
//        env->DeleteLocalRef(ContextClass);
//    }
//    vm->DetachCurrentThread();
//
//    return result;
//}
//
//// ============================TNA======TNA====================================== //
//const char *GetAndroidID(JNIEnv *env, jobject context) {
//    jclass contextClass = env->FindClass(/*android/content/Context*/ StrEnc("`L+&0^[S+-:J^$,r9q92(as", "\x01\x22\x4F\x54\x5F\x37\x3F\x7C\x48\x42\x54\x3E\x3B\x4A\x58\x5D\x7A\x1E\x57\x46\x4D\x19\x07", 23).c_str());
//    jmethodID getContentResolverMethod = env->GetMethodID(contextClass, /*getContentResolver*/ StrEnc("E8X\\7r7ys_Q%JS+L+~", "\x22\x5D\x2C\x1F\x58\x1C\x43\x1C\x1D\x2B\x03\x40\x39\x3C\x47\x3A\x4E\x0C", 18).c_str(), /*()Landroid/content/ContentResolver;*/ StrEnc("8^QKmj< }5D:9q7f.BXkef]A*GYLNg}B!/L", "\x10\x77\x1D\x2A\x03\x0E\x4E\x4F\x14\x51\x6B\x59\x56\x1F\x43\x03\x40\x36\x77\x28\x0A\x08\x29\x24\x44\x33\x0B\x29\x3D\x08\x11\x34\x44\x5D\x77", 35).c_str());
//    jclass settingSecureClass = env->FindClass(/*android/provider/Settings$Secure*/ StrEnc("T1yw^BCF^af&dB_@Raf}\\FS,zT~L(3Z\"", "\x35\x5F\x1D\x05\x31\x2B\x27\x69\x2E\x13\x09\x50\x0D\x26\x3A\x32\x7D\x32\x03\x09\x28\x2F\x3D\x4B\x09\x70\x2D\x29\x4B\x46\x28\x47", 32).c_str());
//    jmethodID getStringMethod = env->GetStaticMethodID(settingSecureClass, /*getString*/ StrEnc("e<F*J5c0Y", "\x02\x59\x32\x79\x3E\x47\x0A\x5E\x3E", 9).c_str(), /*(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;*/ StrEnc("$6*%R*!XO\"m18o,0S!*`uI$IW)l_/_knSdlRiO1T`2sH|Ouy__^}%Y)JsQ:-\"(2_^-$i{?H", "\x0C\x7A\x4B\x4B\x36\x58\x4E\x31\x2B\x0D\x0E\x5E\x56\x1B\x49\x5E\x27\x0E\x69\x0F\x1B\x3D\x41\x27\x23\x7B\x09\x2C\x40\x33\x1D\x0B\x21\x5F\x20\x38\x08\x39\x50\x7B\x0C\x53\x1D\x2F\x53\x1C\x01\x0B\x36\x31\x39\x46\x0C\x15\x43\x2B\x05\x30\x15\x41\x43\x46\x55\x70\x0D\x59\x56\x00\x15\x58\x73", 71).c_str());
//
//    auto obj = env->CallObjectMethod(context, getContentResolverMethod);
//    auto str = (jstring) env->CallStaticObjectMethod(settingSecureClass, getStringMethod, obj, env->NewStringUTF(/*android_id*/ StrEnc("ujHO)8OfOE", "\x14\x04\x2C\x3D\x46\x51\x2B\x39\x26\x21", 10).c_str()));
//    return env->GetStringUTFChars(str, 0);
//}
//
//const char *GetDeviceModel(JNIEnv *env) {
//    jclass buildClass = env->FindClass(/*android/os/Build*/ StrEnc("m5I{GKGWBP-VOxkA", "\x0C\x5B\x2D\x09\x28\x22\x23\x78\x2D\x23\x02\x14\x3A\x11\x07\x25", 16).c_str());
//    jfieldID modelId = env->GetStaticFieldID(buildClass, /*MODEL*/ StrEnc("|}[q:", "\x31\x32\x1F\x34\x76", 5).c_str(), /*Ljava/lang/String;*/ StrEnc(".D:C:ETZ1O-Ib&^h.Y", "\x62\x2E\x5B\x35\x5B\x6A\x38\x3B\x5F\x28\x02\x1A\x16\x54\x37\x06\x49\x62", 18).c_str());
//
//    auto str = (jstring) env->GetStaticObjectField(buildClass, modelId);
//    return env->GetStringUTFChars(str, 0);
//}
//
//const char *GetDeviceBrand(JNIEnv *env) {
//    jclass buildClass = env->FindClass(/*android/os/Build*/ StrEnc("0iW=2^>0zTRB!B90", "\x51\x07\x33\x4F\x5D\x37\x5A\x1F\x15\x27\x7D\x00\x54\x2B\x55\x54", 16).c_str());
//    jfieldID modelId = env->GetStaticFieldID(buildClass, /*BRAND*/ StrEnc("@{[FP", "\x02\x29\x1A\x08\x14", 5).c_str(), /*Ljava/lang/String;*/ StrEnc(".D:C:ETZ1O-Ib&^h.Y", "\x62\x2E\x5B\x35\x5B\x6A\x38\x3B\x5F\x28\x02\x1A\x16\x54\x37\x06\x49\x62", 18).c_str());
//
//    auto str = (jstring) env->GetStaticObjectField(buildClass, modelId);
//    return env->GetStringUTFChars(str, 0);
//}
//
//const char *GetPackageName(JNIEnv *env, jobject context) {
//    jclass contextClass = env->FindClass(/*android/content/Context*/ StrEnc("`L+&0^[S+-:J^$,r9q92(as", "\x01\x22\x4F\x54\x5F\x37\x3F\x7C\x48\x42\x54\x3E\x3B\x4A\x58\x5D\x7A\x1E\x57\x46\x4D\x19\x07", 23).c_str());
//    jmethodID getPackageNameId = env->GetMethodID(contextClass, /*getPackageName*/ StrEnc("YN4DaP)!{wRGN}", "\x3E\x2B\x40\x14\x00\x33\x42\x40\x1C\x12\x1C\x26\x23\x18", 14).c_str(), /*()Ljava/lang/String;*/ StrEnc("VnpibEspM(b]<s#[9cQD", "\x7E\x47\x3C\x03\x03\x33\x12\x5F\x21\x49\x0C\x3A\x13\x20\x57\x29\x50\x0D\x36\x7F", 20).c_str());
//
//    auto str = (jstring) env->CallObjectMethod(context, getPackageNameId);
//    return env->GetStringUTFChars(str, 0);
//}
//
//const char *GetDeviceUniqueIdentifier(JNIEnv *env, const char *uuid) {
//    jclass uuidClass = env->FindClass(/*java/util/UUID*/ StrEnc("B/TxJ=3BZ_]SFx", "\x28\x4E\x22\x19\x65\x48\x47\x2B\x36\x70\x08\x06\x0F\x3C", 14).c_str());
//
//    auto len = strlen(uuid);
//
//    jbyteArray myJByteArray = env->NewByteArray(len);
//    env->SetByteArrayRegion(myJByteArray, 0, len, (jbyte *) uuid);
//
//    jmethodID nameUUIDFromBytesMethod = env->GetStaticMethodID(uuidClass, /*nameUUIDFromBytes*/ StrEnc("P6LV|'0#A+zQmoat,", "\x3E\x57\x21\x33\x29\x72\x79\x67\x07\x59\x15\x3C\x2F\x16\x15\x11\x5F", 17).c_str(), /*([B)Ljava/util/UUID;*/ StrEnc("sW[\"Q[W3,7@H.vT0) xB", "\x5B\x0C\x19\x0B\x1D\x31\x36\x45\x4D\x18\x35\x3C\x47\x1A\x7B\x65\x7C\x69\x3C\x79", 20).c_str());
//    jmethodID toStringMethod = env->GetMethodID(uuidClass, /*toString*/ StrEnc("2~5292eW", "\x46\x11\x66\x46\x4B\x5B\x0B\x30", 8).c_str(), /*()Ljava/lang/String;*/ StrEnc("P$BMc' #j?<:myTh_*h0", "\x78\x0D\x0E\x27\x02\x51\x41\x0C\x06\x5E\x52\x5D\x42\x2A\x20\x1A\x36\x44\x0F\x0B", 20).c_str());
//
//    auto obj = env->CallStaticObjectMethod(uuidClass, nameUUIDFromBytesMethod, myJByteArray);
//    auto str = (jstring) env->CallObjectMethod(obj, toStringMethod);
//    return env->GetStringUTFChars(str, 0);
//}
//
//struct MemoryStruct {
//    char *memory;
//    size_t size;
//};
//
//static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {
//    size_t realsize = size * nmemb;
//    struct MemoryStruct *mem = (struct MemoryStruct *) userp;
//
//    mem->memory = (char *) realloc(mem->memory, mem->size + realsize + 1);
//    if (mem->memory == NULL) {
//        return 0;
//    }
//
//    memcpy(&(mem->memory[mem->size]), contents, realsize);
//    mem->size += realsize;
//    mem->memory[mem->size] = 0;
//
//    return realsize;
//}
//
//std::string Login(const char *user_key) {
//    if (!g_App)
//        return "Internal Error";
//
//    auto activity = g_App->activity;
//    if (!activity)
//        return "Internal Error";
//
//    auto vm = activity->vm;
//    if (!vm)
//        return "Internal Error";
//
//    auto object = activity->clazz;
//    if (!object)
//        return "Internal Error";
//
//    JNIEnv *env;
//    vm->AttachCurrentThread(&env, 0);
//
//    std::string hwid = user_key;
//    hwid += GetAndroidID(env, object);
//    hwid += GetDeviceModel(env);
//    hwid += GetDeviceBrand(env);
//
//    std::string UUID = GetDeviceUniqueIdentifier(env, hwid.c_str());
//
//    vm->DetachCurrentThread();
//
//    std::string errMsg;
//
//    struct MemoryStruct chunk{};
//    chunk.memory = (char *) malloc(1);
//    chunk.size = 0;
//
//    CURL *curl;
//    CURLcode res;
//    curl = curl_easy_init();
//    if (curl) {
//        curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, /*POST*/ StrEnc(",IL=", "\x7C\x06\x1F\x69", 4).c_str());
//        curl_easy_setopt(curl, CURLOPT_URL, "https://silent3frtx.000webhostapp.com/connect");
//        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
//            curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, /*https*/ StrEnc("!mLBO", "\x49\x19\x38\x32\x3C", 5).c_str());
//            struct curl_slist *headers = NULL;
//            headers = curl_slist_append(headers, /*Content-Type: application/x-www-form-urlencoded*/ StrEnc("@;Ls\\(KP4Qrop`b#d3094/r1cf<c<=H)AiiBG6i|Ta66s2[", "\x03\x54\x22\x07\x39\x46\x3F\x7D\x60\x28\x02\x0A\x4A\x40\x03\x53\x14\x5F\x59\x5A\x55\x5B\x1B\x5E\x0D\x49\x44\x4E\x4B\x4A\x3F\x04\x27\x06\x1B\x2F\x6A\x43\x1B\x10\x31\x0F\x55\x59\x17\x57\x3F", 47).c_str());
//            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
//
//            char data[4096];
//        sprintf(data, /*game=PUBG&user_key=%s&serial=%s*/ StrEnc("qu2yXK,YkJyGD@ut0.u~Nb'5(:.:chK", "\x16\x14\x5F\x1C\x65\x1B\x79\x1B\x2C\x6C\x0C\x34\x21\x32\x2A\x1F\x55\x57\x48\x5B\x3D\x44\x54\x50\x5A\x53\x4F\x56\x5E\x4D\x38", 31).c_str(), user_key, UUID.c_str());
//        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);
//        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);
//        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *) &chunk);
//        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
//        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
//
//        res = curl_easy_perform(curl);
//        if (res == CURLE_OK) {
//            try {
//                json result = json::parse(chunk.memory);
//                if (result[/*status*/ StrEnc("(>_LBm", "\x5B\x4A\x3E\x38\x37\x1E", 6).c_str()] == true) {
//                    std::string token = result[/*data*/ StrEnc("fAVA", "\x02\x20\x22\x20", 4).c_str()][/*token*/ StrEnc("{>3Lr", "\x0F\x51\x58\x29\x1C", 5).c_str()].get<std::string>();
//                    time_t rng = result[/*data*/ StrEnc("fAVA", "\x02\x20\x22\x20", 4).c_str()][/*rng*/ StrEnc("+n,", "\x59\x00\x4B", 3).c_str()].get<time_t>();
//                    
//               //     expiredDate = result[/*data*/ StrEnc("fAVA", "\x02\x20\x22\x20", 4).c_str()][/*exdate*/ StrEnc("=So_ D", "\x58\x2B\x0B\x3E\x54\x21", 6).c_str()].get<std::string>();
//                     if (rng + 30 > time(0)) {
//                        std::string auth = /*PUBG*/ StrEnc("Q*) ", "\x01\x7F\x6B\x67", 4).c_str();;
//                        auth += "-";
//                        auth += user_key;
//                        auth += "-";
//                        auth += UUID;
//                        auth += "-";
//                        auth += /*Vm8Lk7Uj2JmsjCPVPVjrLa7zgfx3uz9E*/ StrEnc("-2:uwZdV^%]?{{wHs2V,+(^NJU;kC*_{", "\x7B\x5F\x02\x39\x1C\x6D\x31\x3C\x6C\x6F\x30\x4C\x11\x38\x27\x1E\x23\x64\x3C\x5E\x67\x49\x69\x34\x2D\x33\x43\x58\x36\x50\x66\x3E", 32).c_str();
//                        std::string outputAuth = Tools::CalcMD5(auth);
//     
//                        g_Token = token;
//                        g_Auth = outputAuth;
//
//                        bValid = g_Token == g_Auth;
//                    }
//                } else {
//                    errMsg = result[/*reason*/ StrEnc("LW(3(c", "\x3E\x32\x49\x40\x47\x0D", 6).c_str()].get<std::string>();
//                }
//            } catch (json::exception &e) {
//                errMsg = "{";
//                errMsg += e.what();
//                errMsg += "}\n{";
//                errMsg += chunk.memory;
//                errMsg += "}";
//            }
//        } else {
//            errMsg = curl_easy_strerror(res);
//        }
//    }
//    curl_easy_cleanup(curl);
//
//    return bValid ? "OK" : errMsg;
//}

}}}
void DrawTextCentered(const char* text)
{
    ImGui::Separator();
    ImGui::SetCursorPosX((ImGui::GetWindowWidth() - ImGui::CalcTextSize(text).x) / 5.f);
    ImGui::Text(text);
    ImGui::Separator();
}




void HueText(const char* text, ImVec4 color)
{
    static auto start_time = std::chrono::high_resolution_clock::now(); // Get the current time
    auto elapsed_seconds = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now() - start_time).count() / 1000.0f; // Calculate the time elapsed since the start time in seconds
    ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.11f, 0.11f, 0.11f, 1.00f)); // Set the text color to be transparent
    for (int i = 0; i < strlen(text); i++)
    {
        ImGui::SameLine(); // Put each character on the same line
        float t = fmodf(elapsed_seconds + (float)i / (float)strlen(text), 1.0f); // Calculate the progress of the color change from 0 to 1, wrapping around at 1
        ImVec4 currentColor = ImVec4(color.x * t, color.y * t, color.z * t, color.w); // Calculate the current color for this character
        ImGui::PushStyleColor(ImGuiCol_Text, currentColor); // Change the text color for this character
        ImGui::Text("%c", text[i]); // Draw the character
        ImGui::PopStyleColor(); // Reset the text color
    }
    ImGui::PopStyleColor(); // Reset the transparent text color
}

int Jatin_FLOAT(long int addr, float value){
    Tools::WriteAddr((void*)(addr), (void*)&value , 4);
    return 0;
}
int WriteFloat(long int addr, float value){
    Tools::WriteAddr((void*)(addr), (void*)&value , 4);
    return 0;
}
int Jatin_QWORD(long int addr, int64_t value){
    Tools::WriteAddr((void*)(addr),(void*)&value ,sizeof(value));
    return 0;
}
int Write_Float(long int addr, int64_t value){
    Tools::WriteAddr((void*)(addr),(void*)&value ,sizeof(value));
    return 0;
}

// ======================================================================== //

#define IM_CLAMP(V, MN, MX) ((V) < (MN) ? (MN) : (V) > (MX) ? (MX) \
                                                            : (V))
namespace Settings
{
    static int Tab = 1;
}


static int skinxsuit = 0;
//weapon skins
static int skinm4 = 0;
static int skinakm = 0;
static int skinscar = 0;
static int skinm7 = 0;
static int skinuzi = 0;
static int skinump45 = 0;
static int skinvector = 0;
static int skinbizon = 0;
static int skingroza = 0;
static int skinkar = 0;
static int skinm24 = 0;
static int skinawm = 0;
static int skindp28 = 0;
static int skinm16a4 = 0;
static int skinm249 = 0;
static int skinaug = 0;
static int skinmk14 = 0;
static int skindbs = 0;
static int skinqbz = 0;
static int skinmg3 = 0;
static int skinsks = 0;
static int skinpan = 0;
static int skinmini14 = 0;
static int skinslr = 0;
static int skins1897 = 0;
static int skinvss = 0;
static int skins12k = 0;
static int skinfamas = 0;
static int skinthompson = 0;
static int skinns2000 = 0;
static int skinace32 = 0;
static int skinamr = 0;
static int skinmk12 = 0;
static int skinhoney = 0;
//cars skin
static int coupe = 0;
static int Uaz = 0;
static int Dacia = 0;
static int Motorcycle = 0;
static int Buggy = 0;
static int Scooter = 0;
static int monstertruck = 0;

//string cars skin
namespace Active{
inline int lastMotorcycleID = 0;
inline int newMotorcycleID = 0;
inline int lastScooterID = 0;
inline int newScooterID = 0;
inline int lastmonstertruckID = 0;
inline int newmonstertruckID = 0;
inline int lastBuggyID = 0;
inline int newBuggyID = 0;
inline int lastUazID = 0;
inline int newUazID = 0;
inline int lastDaciaID = 0;
inline int newDaciaID = 0;
inline int lastCoupeID = 0;
inline int newCoupeID = 0;
}
     
EGLBoolean (*orig_eglSwapBuffers)(EGLDisplay dpy, EGLSurface surface);
EGLBoolean _eglSwapBuffers(EGLDisplay dpy, EGLSurface surface) {
    eglQuerySurface(dpy, surface, EGL_WIDTH, &glWidth);
    eglQuerySurface(dpy, surface, EGL_HEIGHT, &glHeight);
    if (glWidth <= 0 || glHeight <= 0)
        return orig_eglSwapBuffers(dpy, surface);

    if (!g_App)
        return orig_eglSwapBuffers(dpy, surface);

    screenWidth = ANativeWindow_getWidth(g_App->window);
    screenHeight = ANativeWindow_getHeight(g_App->window);
    density = AConfiguration_getDensity(g_App->config);

    if (!initImGui) {
        ImGui::CreateContext();


        ImGuiStyle& style = ImGui::GetStyle();

        style.Alpha = 1.0f;
        style.WindowPadding = ImVec2(8.0f, 8.0f);
        style.WindowRounding = 10.0f;
        style.WindowBorderSize = 0.0f;
        style.WindowMinSize = ImVec2(30.0f, 30.0f);
        style.WindowTitleAlign = ImVec2(0.5f, 0.5f);
        style.WindowMenuButtonPosition = ImGuiDir_Right;
        style.ChildRounding = 5.0f;
        style.ChildBorderSize = 1.0f;
        style.PopupRounding = 10.0f;
        style.PopupBorderSize = 0.0f;
        style.FramePadding = ImVec2(5.0f, 3.5f);
        style.FrameRounding = 5.0f;
        style.FrameBorderSize = 0.0f;
        style.ItemSpacing = ImVec2(5.0f, 4.0f);
        style.ItemInnerSpacing = ImVec2(5.0f, 5.0f);
        style.CellPadding = ImVec2(4.0f, 2.0f);
        style.IndentSpacing = 5.0f;
        style.ColumnsMinSpacing = 5.0f;
        style.ScrollbarSize = 15.0f;
        style.ScrollbarRounding = 9.0f;
        style.GrabMinSize = 15.0f;
        style.GrabRounding = 5.0f;
        style.TabRounding = 5.0f;
        style.TabBorderSize = 0.0f;
        style.TabMinWidthForCloseButton = 0.0f;
        style.ColorButtonPosition = ImGuiDir_Right;
        style.ButtonTextAlign = ImVec2(0.5f, 0.5f);
        style.SelectableTextAlign = ImVec2(0.0f, 0.0f);

        ImVec4* colors = style.Colors;


        style.Colors[ImGuiCol_WindowBg] = ImColor(0, 0, 0, 235);
        style.Colors[ImGuiCol_Border] = ImColor(50, 50, 50, 255);
        style.Colors[ImGuiCol_FrameBg] = ImColor(66, 66, 66, 66);
        style.Colors[ImGuiCol_FrameBgHovered] = ImColor(158, 158, 158, 158);
        style.Colors[ImGuiCol_FrameBgActive] = ImColor(33, 33, 33, 33);
        style.Colors[ImGuiCol_TitleBg] = ImColor(0, 0, 0, 255);
        style.Colors[ImGuiCol_TitleBgCollapsed] = ImColor(0, 0, 0, 255);
        style.Colors[ImGuiCol_TitleBgActive] = ImColor(0, 0, 0, 255);
        style.Colors[ImGuiCol_CheckMark] = ImColor(255, 255, 255, 255);
        style.Colors[ImGuiCol_MenuBarBg] = ImColor(66, 66, 66, 250);
        style.Colors[ImGuiCol_SliderGrab] = ImColor(61, 133, 224, 250);
        style.Colors[ImGuiCol_SliderGrabActive] = ImColor(61, 133, 224, 250);
        style.Colors[ImGuiCol_Text] = ImVec4(1.000f, 1.000f, 1.000f, 1.000f);
        style.Colors[ImGuiCol_Header] = ImColor(66, 66, 66, 66);
        style.Colors[ImGuiCol_HeaderHovered] = ImColor(158, 158, 158, 158);
        style.Colors[ImGuiCol_HeaderActive] = ImColor(33, 33, 33, 33);
        colors[ImGuiCol_SliderGrabActive] = ImColor(61, 133, 224, 250);
        style.Colors[ImGuiCol_Button] = ImColor(66, 66, 66, 66);
        style.Colors[ImGuiCol_ButtonHovered] = ImColor(158, 158, 158, 158);
        style.Colors[ImGuiCol_ButtonActive] = ImColor(33, 33, 33, 33);
		
        colors[ImGuiCol_Separator] = ImColor(66, 66, 76, 200);//66 66 76
        colors[ImGuiCol_SeparatorHovered] = ImColor(25, 83, 152, 200);
        colors[ImGuiCol_SeparatorActive] = ImColor(26, 102, 191, 200);
		
        colors[ImGuiCol_ResizeGrip] = ImColor(66, 66, 66, 66);
        colors[ImGuiCol_ResizeGripHovered] = ImColor(158, 158, 158, 158);
        colors[ImGuiCol_ResizeGripActive] = ImColor(33, 33, 33, 33);
        style.Colors[ImGuiCol_PlotHistogram] = ImColor(66, 66, 66, 66);
        style.Colors[ImGuiCol_PlotHistogramHovered] = ImColor(158, 158, 158, 158);
        style.Colors[ImGuiCol_PlotLinesHovered] = ImColor(158, 158, 158, 158);
        style.Colors[ImGuiCol_PlotLines] = ImColor(66, 66, 66, 66);
        style.Colors[ImGuiCol_Tab] = ImColor(66, 66, 66, 66);
        style.Colors[ImGuiCol_TabHovered] = ImColor(158, 158, 158, 158);
        style.Colors[ImGuiCol_TabActive] = ImColor(33, 33, 33, 33);
        style.Colors[ImGuiCol_ChildBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
        style.Colors[ImGuiCol_PopupBg] = ImVec4(0.08f, 0.08f, 0.08f, 0.94f);
        style.Colors[ImGuiCol_BorderShadow] = ImVec4(1.00f, 0.20f, 0.30f, 0.10f);
        style.Colors[ImGuiCol_MenuBarBg] = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);
        style.Colors[ImGuiCol_ScrollbarBg] = ImVec4(0.02f, 0.02f, 0.02f, 0.53f);
        style.Colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.31f, 0.31f, 0.31f, 1.00f);
        style.Colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.41f, 0.41f, 0.41f, 1.00f);
        style.Colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);
        style.Colors[ImGuiCol_PlotLines] = ImVec4(0.61f, 0.61f, 0.61f, 1.00f);
        style.Colors[ImGuiCol_PlotLinesHovered] = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);
        style.Colors[ImGuiCol_PlotHistogram] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
        style.Colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
        style.Colors[ImGuiCol_TextSelectedBg] = ImVec4(0.26f, 0.59f, 0.98f, 0.35f);
        style.Colors[ImGuiCol_DragDropTarget] = ImVec4(1.00f, 1.00f, 0.00f, 0.90f);
        style.Colors[ImGuiCol_NavHighlight] = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
        style.Colors[ImGuiCol_NavWindowingHighlight] = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);
        style.Colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.20f);
        style.Colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.35f);


        ImGui_ImplAndroid_Init();
        ImGui_ImplOpenGL3_Init("#version 300 es");

        ImGuiIO& io = ImGui::GetIO();

        io.ConfigWindowsMoveFromTitleBarOnly = true;
        io.IniFilename = NULL;

        static const ImWchar ranges[] =
        {
            0x0020, 0x00FF,
            0x2010, 0x205E,
            0x0600, 0x06FF,
            0xFE00, 0xFEFF,
            0,
        };
        static const ImWchar icons_ranges[] = { 0xf000, 0xf3ff, 0 };
        ImFontConfig icons_config;

        ImFontConfig CustomFont;
        CustomFont.FontDataOwnedByAtlas = false;

        icons_config.MergeMode = true;
        icons_config.PixelSnapH = true;
        icons_config.OversampleH = 2.5;
        icons_config.OversampleV = 2.5;

        io.Fonts->AddFontFromMemoryTTF(const_cast<std::uint8_t*>(Custom), sizeof(Custom), 18.f, &CustomFont);
        io.Fonts->AddFontFromMemoryCompressedTTF(font_awesome_data, font_awesome_size, 18.0f, &icons_config, icons_ranges);
        ImFontConfig cfg;
        cfg.SizePixels = ((float)density / 20.0f);
        io.Fonts->AddFontDefault(&cfg);

        memset(&Config, 0, sizeof(sConfig));

        // ===============================ESPCOLOR ================================== //

        Config.ColorsESP.Line = CREATE_COLOR(255, 0, 0, 255);
        Config.ColorsESP.Box = CREATE_COLOR(255, 0, 0, 255);
        Config.ColorsESP.Name = CREATE_COLOR(255, 255, 255, 255);
        Config.ColorsESP.Skeleton = CREATE_COLOR(255, 0, 0, 255);
        Config.ColorsESP.Vehicle = CREATE_COLOR(255, 255, 255, 255);
        Config.ColorsESP.Fov = CREATE_COLOR(0, 0, 0, 199);
        Config.ColorsESP.Fovv = CREATE_COLOR(0, 0, 0, 199);
        Config.ColorsESP.Skeletonnon = CREATE_COLOR(255, 255, 255, 255);
        Config.ColorsESP.nonbot = CREATE_COLOR(150, 150, 150, 255);
        FLOAT1 = 00.00f;
        FLOAT2 = 00.00f;



        initImGui = true;
		
    }
    ImGuiIO& io = ImGui::GetIO();

    ImGui_ImplOpenGL3_NewFrame();
    ImGui_ImplAndroid_NewFrame(glWidth, glHeight);
    ImGui::NewFrame();


    DrawESP(ImGui::GetBackgroundDrawList(), glWidth, glHeight);




    if (ImGui::Begin(OBFUSCATE(" 99 "), 0, ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoScrollbar)) {
        static bool VR = false;


        ImGui::PushStyleColor(ImGuiCol_Border, IM_COL32(255, 0, 0, 255));
        ImGui::SetCursorPos({ 4.f,4.f });
        if (ImGui::Button(ICON_FA_PLAY, ImVec2(50, 30)))
        {
            VR = true;
        }
        ImGui::SameLine();
        ImGui::Text("  EGY v1  </>");
        ImGui::PopStyleColor();


        ImVec2 center = ImGui::GetMainViewport()->GetCenter();
        ImGui::SetNextWindowPos(center, ImGuiCond_Appearing, ImVec2(0.5f, 0.5f));
        ImGui::SetNextWindowSize(ImVec2(783, 603));
        if (VR) {
            static bool p_open = true;
            char buf[128];
            sprintf(buf, (OBFUSCATE("</> EGY-HAX PUBG MOBILE 3.0.1")), (io.Framerate), ImGui::GetFrameCount());

            ImGui::Begin(buf, &VR, ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBringToFrontOnFocus/* + ImGuiWindowFlags_NoTitleBar*/);
            
//==============================================//
  
     //  static bool isLogin = true;
	 //
     //   if (!isLogin) {
     //       ImGui::Text("Please Login! (Copy Key to Clipboard)");
	 //
     //       ImGui::PushItemWidth(-1);
     //       static char s[64];
     //       ImGui::InputText("##key", s, sizeof s);
     //       ImGui::PopItemWidth();
	 //
     //       if (ImGui::Button("Paste Your Key", ImVec2(ImGui::GetContentRegionAvailWidth(), 0))) {
     //           auto key = getClipboardText();
     //           strncpy(s, key.c_str(), sizeof s);
     //       }
     //      
	 //
     //       static std::string err;
     //       if (ImGui::Button("Login", ImVec2(ImGui::GetContentRegionAvailWidth(), 0))) {
     //           err = Login(s);
     //           if (err == "OK") {
     //               isLogin = bValid && g_Auth == g_Token;
     //           }
     //       }
	 //
     //       if (!err.empty() && err != "OK") {
     //           ImGui::Text("Error: %s", err.c_str());
     //       }
	 //
     //   } else 
		
		{


                if (!VR) {
                    VR = false;
                }
                else {



			        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 0.0f);
				    ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 0.0f);
				    ImGui::PushStyleColor(ImGuiCol_ChildBg, IM_COL32(66, 66, 66, 255));
				    ImGui::SetCursorPos(ImVec2(0, 0));
				    ImGui::BeginChild("TitileBg#1", ImVec2(850, 30), true);
				    ImGui::PopStyleVar(2);
				    ImGui::PopStyleColor();							
				    ImGui::EndChild();
			        static int tab = 1;
                    ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(8, 3));
                    if (ImGui::Button(ICON_FA_HOME" Home", ImVec2(152.5 - 6, 23)))
                        Settings::Tab = 1;
                    ImGui::SameLine();
                    if (ImGui::Button(ICON_FA_EYE" Visual", ImVec2(152.5 - 6, 23)))
                        Settings::Tab = 2;
                    ImGui::SameLine();
                    if (ImGui::Button(ICON_FA_CROSSHAIRS" Aimbot", ImVec2(152.5 - 6, 23)))
                        Settings::Tab = 3;

                    ImGui::SameLine();
                    if (ImGui::Button(ICON_FA_LIST" Memory", ImVec2(152.5 - 6, 23)))
                        Settings::Tab = 4;
                        
                    ImGui::SameLine();
                    if (ImGui::Button(ICON_FA_COG" Settings", ImVec2(152.5 - 6, 23)))
                        Settings::Tab = 5;

                    ImGui::PopStyleVar();

                    ImGui::Separator();
                    
     
                    if (Settings::Tab == 1) {
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("hdkdbfk ff#1", ImVec2(0, 0), true);
                        ImGui::PopStyleVar(2);
                        ICON_FA_IMAGE;
                        ImGui::Spacing();
                        ImGui::BulletText("Welcome To EGY HAX");
						ImGui::BulletText("Version : 1.1");
                        ImGui::Text("\n");
                        ImGui::BulletText("Bypass Status = Working;");
                        ImGui::SameLine();

                        ImGui::EndChild();
                    }
                    if (Settings::Tab == 2) {
                        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 2));
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("MAIN#1", ImVec2(0, 0), true);
                        ImGui::PopStyleVar(2);
						{
                        ImGui::Columns(2);
					    ImGui::SetColumnOffset(1, 257);
					    ImGui::SetCursorPos(ImVec2(8, 8));
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("EspMenu#1", ImVec2(250, 0), true);
                        ImGui::PopStyleVar(2);
                        {
                        ImGui::Checkbox("Draw line to enemy", &Config.ESPMenu.Line);
                        ImGui::Checkbox("Draw enemy skeleton", &Config.ESPMenu.Skeleton);
                        ImGui::Checkbox("Show enemy health", &Config.ESPMenu.Health);
                        ImGui::Checkbox("Draw player box", &Config.ESPMenu.Box);
                        ImGui::Checkbox("Show enemy distance", &Config.ESPMenu.Distance);
                        ImGui::Checkbox("Show enemy Name", &Config.ESPMenu.Name);
                        ImGui::Checkbox("Draw Radar", &Config.Alert);

						}


                        ImGui::EndChild();
						ImGui::TableNextColumn();
					    ImGui::SameLine();
						ImGui::TableNextColumn();
					    ImGui::NextColumn();
					    ImGui::SetCursorPos(ImVec2(265, 8));
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("PlayerSetting#1", ImVec2(0, 0), true);
                        ImGui::PopStyleVar(2);
						{
                        if (ImGui::BeginTabBar("Tab", ImGuiTabBarFlags_FittingPolicyScroll)) {

                            if (ImGui::BeginTabItem("Loot Item's")) {

                                for (auto& i : items_data) {
                                    if (ImGui::TreeNode(i["Category"].get<std::string>().c_str())) {
                                        ImGui::Spacing();
                                        for (auto& item : i["Items"]) {
                                            ImGui::Checkbox(item["itemName"].get<std::string>().c_str(),
                                                (bool*)&Items[item["itemId"].get<int>()]);

                                        }
                                    }
                                }


							}
                                ImGui::EndTabItem();
                            }
						}

                            if (ImGui::BeginTabItem("Player Setting")) {



                                ImGui::EndTabItem();
                            }
                        }

                        ImGui::EndChild();
                        ImGui::EndChild();

                        ImGui::PopStyleVar();
                    }
                    

                    if (Settings::Tab == 3) {

                        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 2));
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("MAIdbbxbcjdjfN#1", ImVec2(0, 0), true);
                        ImGui::PopStyleVar(2);
						{
                        ImGui::Columns(2);
					    ImGui::SetColumnOffset(1, 257);
					    ImGui::SetCursorPos(ImVec2(8, 8));
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("EspMexhxxbdbfnu#1", ImVec2(250, 0), true);
                        ImGui::PopStyleVar(2);
						{
                        ImGui::Checkbox(("Silent Aim"), &Config.BulletTracking.Enable);
                        ImGui::Checkbox("Auto fire", &AUTOOO);
                        ImGui::Checkbox("AIMPOS.Z (ROOM)", &tar);
                        ImGui::Checkbox("AIMPOS.Z (WOW)", &tarr);
						}

                        ImGui::EndChild();
						ImGui::TableNextColumn();
					    ImGui::SameLine();
						ImGui::TableNextColumn();
					    ImGui::NextColumn();
					    ImGui::SetCursorPos(ImVec2(265, 8));
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("PlayerShdjxhfetting#1", ImVec2(0, 0), true);
                        ImGui::PopStyleVar(2);
						{
                        if (Config.BulletTracking.Enable) {
                            if (ImGui::TreeNode(("Silent Aim"))) {
								ImGui::TableNextColumn();
								ImGui::TableNextColumn();
								ImGui::TableNextColumn();
								ImGui::TableNextColumn();
                                ImGui::Checkbox(("Visible Check"), &Config.BulletTracking.VisCheck);
                                ImGui::Checkbox(("Skip Knocked"), &Config.BulletTracking.IgnoreKnock);
                                ImGui::Checkbox(("Skip Bot"), &Config.BulletTracking.IgnoreBot);

                            }
							if (tarr) {
                            if (ImGui::TreeNode(("AIMPOS.Z SETTING"))) {
								ImGui::TableNextColumn();
								ImGui::TableNextColumn();
								ImGui::TableNextColumn();
								ImGui::TableNextColumn();
								ImGui::SliderFloat("AimPos.Z", &Targett, (-15.0f), (20.0f));

                            }
                        }
						}
						}
                        ImGui::EndChild();
                        ImGui::EndChild();

                        ImGui::PopStyleVar();

						}

                    } 
					
                    if (Settings::Tab == 4) {
                        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 2));
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("MAIoliiiiiiiiiiiiiiiiiiiiiN#1", ImVec2(0, 0), true);
                        ImGui::PopStyleVar(2);
						{
                        ImGui::Columns(2);
					    ImGui::SetColumnOffset(1, 257);
					    ImGui::SetCursorPos(ImVec2(8, 8));
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("EspMenoijkjkjkjkjkjkjkjkjkjku#1", ImVec2(250, 0), true);
                        ImGui::PopStyleVar(2);
						{
					    ImGui::Checkbox("IPad View", &Config.ESPMenu.Ipad);
                        ImGui::Checkbox("Show Damage", &Config.ShowDamage);
                        ImGui::Checkbox("Small Cross ", &Config.Cross);
                        ImGui::Checkbox("Fast run v1", &AutoFlashh);
                        ImGui::Checkbox("Fast Shoot", &FASTSHOOTOP);
                        ImGui::Checkbox("Speed Kook", &sp);
                        ImGui::Checkbox("No Recoil", &rec0);
                        ImGui::Checkbox("God view", &Config.GodView);
                        ImGui::Checkbox("Wall Shoot", &Magicbu);
                        ImGui::Checkbox("Magic Bulle", &Magicb);
                        ImGui::Checkbox("Hit Effect", &Config.HitEffect);
                        ImGui::Checkbox("Fix Stuck ", &Ficstuckk);
                        ImGui::Checkbox("Fix Stuck v1", &Config.Fixstuck);
                        ImGui::Checkbox("Fix Stuck v2", &fixx);
                        ImGui::Checkbox("Instant v1", &ins1);
                        ImGui::Checkbox("Instant v2", &ins2);
                        ImGui::Checkbox("Mod Skin", &Config.SKINoi);
						
						}
                        ImGui::EndChild();
						ImGui::TableNextColumn();
					    ImGui::SameLine();
						ImGui::TableNextColumn();
					    ImGui::NextColumn();
					    ImGui::SetCursorPos(ImVec2(265, 8));
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                        ImGui::BeginChild("PlayerSeti9999999999999ting#1", ImVec2(0, 0), true);
                        {	
                        ImGui::TableNextColumn();
                        if (FASTSHOOTOP) {
                            if (ImGui::CollapsingHeader(("FAST SHOT SETTING"))) {
                                ImGui::SliderFloat("", &FASTSHOOTOP1, (0.0f), (0.1f));
                            }
                        }     
						ImGui::TableNextColumn();
                        if (sp) {
                            if (ImGui::CollapsingHeader(("SPEED KCNOCK SETTING"))) {
                                ImGui::SliderInt("", &speedknock12, (0.0f), (1800.0f));
                            }
                        }     
						ImGui::TableNextColumn();
                        if (Config.HitEffect) {
                            if (ImGui::CollapsingHeader((" X "))) {
                          ImGui::SliderFloat("", &Config.PIROrainbowSpeedPIRO, 100.0f, 1000.0f);
						  ImGui::TableNextColumn();
						  ImGui::ColorEdit4("X Hit Color Edit", Config.Royal_color, ImGuiColorEditFlags_PickerHueWheel);
						  ImGui::TableNextColumn();
                          ImGui::SliderFloat("Size", &Config.xHitEffect, 0.0f, 2000.0f);

                            }
                        }
                        if (Config.SKINoi) {
                            if (ImGui::CollapsingHeader((" SKIN WEAPON "))) {
                                    ImGui::Text("M416 SKIN  ");
                                    const char* m416[] = { "NO SKIN", " Glacier - M416", "The Fool - M416","Lizard Roar - M416"," Wanderer - M416","Call of the Wild - M416", "Imperial Splendor - M416", "Silver Guru - M416", "TechnoCore - M416","Tidal Embrace - M416","Shinobi Kami - M416"};
                                    ImGui::Combo("##m4", &skinm4, m416, IM_ARRAYSIZE(m416));
									ImGui::Text("AKM ");
                                    const char* AKM[] = { "NO SKIN", "Sculpture - AKM", "The Seven Seas - AKM","Roaring Tiger - AKM","Glacier - AKM","Desert Fossil - AKM","Jack-o'-lantern - AKM","Ghillie Dragon - AKM", "Gold Pirate - AKM","Wandering Tyrant - AKM","Star Admiral - AKM","Hellfire - AKM"};
                                    ImGui::Combo("##AKM", &skinakm, AKM, IM_ARRAYSIZE(AKM));
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
									ImGui::Text("SCAR-L ");
                                    const char* SCAR[] = { "NO SKIN", "Water Blaster - SCAR-L", "Enchanted Pumpkin - SCAR-L","Operation Tomorrow - SCAR-L","Drop the Bass - SCAR-L ","Hextech Crystal - SCAR-L","THORN OF MALICE - SCAR-L"};
                                    ImGui::Combo("##SCAR-L", &skinscar, SCAR, IM_ARRAYSIZE(SCAR));
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
									ImGui::Text("M762 ");
                                    const char* M7[] =  {"NO SKIN", "8-bit Unicorn - M762", "GACKT MOONSAGA-M762","Lotus Fury - M762",  "Messi Football Icon M762","Concerto of Love - M762","StarCore-M762","Stray Rebellion - M762"};
                                    ImGui::Combo("##M762", &skinm7, M7, IM_ARRAYSIZE(M7));
								    ImGui::TableNextColumn();
									ImGui::Spacing();                                   
                                    ImGui::Text("M249 ");
                                    const char* m2499[] =  {"NO SKIN", "Party Parcel - M249", "Winter Queen M249 V","Mondrop Eterna - M249"};
                                    ImGui::Combo("##M249", &skinm249, m2499, IM_ARRAYSIZE(m2499));
									ImGui::TableNextColumn();
									ImGui::Spacing();
									ImGui::Text("AWM ");
                                    const char* AWMM[] =  {"NO SKIN", "Mauve Avenger - AWM", "Field Commander - AWM","Godzilla - AWM","Flame Wave - AWM"};
                                    ImGui::Combo("##AWM", &skinawm, AWMM, IM_ARRAYSIZE(AWMM));
									ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("KAR98K ");
                                    const char* KARR[] =  {"NO SKIN", "Terror Fang - Kar98K", "Kukulkan Fury - Kar98K","Night of Rock - Kar98K","Moonlit Grace - Kar98K"};
                                    ImGui::Combo("##KAR98K", &skinkar, KARR, IM_ARRAYSIZE(KARR));
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("M24 ");
                                    const char* m244[] =  {"NO SKIN", "The Seven Seas - M24", "Pharaoh's Might - M24","Lady Butterfly - M24","Killer Tune - M24","Circle of Life - M24"};
									ImGui::Combo("##M24", &skinm24, m244, IM_ARRAYSIZE(m244));
									ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("UZI ");
                                    const char* UZII[] = { "NO SKIN", "Savagery - UZI", "Ethereal Emblem - UZI","Romantic Moments - UZI","Shimmer Power - UZI"};
                                    ImGui::Combo("##UZI", &skinuzi, UZII, IM_ARRAYSIZE(UZII));
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("UMP ");
                                    const char* UMPP[] = { "NO SKIN", "Dragonfire - UMP45", "EMP - UMP45","Outlawed Fantasy - UMP45","Platinum Ripper - UMP45","Anniversary - UMP45","8 Bit Blast - UMP45"};
                                    ImGui::Combo("##UMP", &skinump45, UMPP, IM_ARRAYSIZE(UMPP));
									ImGui::TableNextColumn();
                                    ImGui::Spacing();								
                                    ImGui::Text("AUG ");
                                    const char* AUGG[] =  {"NO SKIN", "Wandering Circus - AUG"};
                                    ImGui::Combo("##AUG", &skinaug, AUGG, IM_ARRAYSIZE(AUGG));
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("GROZA ");
                                    const char* GROZZA[] =  {"NO SKIN", "Forest Raider - GROZA", "Styx - Groza","Eventide Aria - GROZA","Ryomen Sukuna - GROZA"};
                                    ImGui::Combo("##GROZA", &skingroza, GROZZA, IM_ARRAYSIZE(GROZZA));
									ImGui::TableNextColumn();
                                    ImGui::Spacing();									                                   
                                    ImGui::Text("DP ");
                                    const char* DPP[] =  {"NO SKIN", "Enigmatic Killer - DP28", "Gilded Jade Dragon - DP28"};
                                    ImGui::Combo("##DP", &skindp28, DPP, IM_ARRAYSIZE(DPP));
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("MK14 ");
                                    const char* MK144[] =  {"NO SKIN", "Gilded Galaxy - MK14"};
                                    ImGui::Combo("##MK14", &skinmk14, MK144, IM_ARRAYSIZE(MK144));
									ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("M16A4 ");
                                    const char* M16A44[] =  {"NO SKIN", "Blood & Bones - M16A4", "Aurora Pulse - M16A4","Radiant Edge - M16A4","Skeletal Core - M16A4"};
                                    ImGui::Combo("##M16A4", &skinm16a4, M16A44, IM_ARRAYSIZE(M16A44));
									ImGui::TableNextColumn();
									ImGui::Spacing();
                                    ImGui::Text("BIZON ");
                                    const char* BIZZON[] =  {"NO SKIN", "Blazing Chameleon - PP-19 Bizon", "Skullcrusher - PP-19 Bizon"};
                                    ImGui::Combo("##BIZON", &skinbizon, BIZZON, IM_ARRAYSIZE(BIZZON));
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("VECTOR ");
                                    const char* VECTORR[] = {"NO SKIN", "Blood Tooth - Vector", "Midnight Rose - Vector","Cute Baddie - Vector","Ultimate Predator - Vector","Gilded Reaper - Vector"};
                                    ImGui::Combo("##VECTOR", &skinvector, VECTORR, IM_ARRAYSIZE(VECTORR));
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("DBS ");
                                    const char* DBS[] = {"NO SKIN", "Blood Tooth - DBS", "Midnight Rose - DBS","Cute Baddie - DBS","Ultimate Predator - DBS","Gilded Reaper - DBS"};
                                    ImGui::Combo("##DBS", &skindbs, DBS, IM_ARRAYSIZE(DBS));
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("MG3 ");
                                    const char* MG3[] = {"NO SKIN", "Blood Tooth - MG3", "Midnight Rose - MG3","Cute Baddie - MG3","Ultimate Predator - MG3","Gilded Reaper - MG3"};
                                    ImGui::Combo("##MG3", &skinmg3, MG3, IM_ARRAYSIZE(MG3));
                                    
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("SKS ");
                                    const char* SKS[] = {"NO SKIN", "Blood Tooth - SKS", "Midnight Rose - SKS","Cute Baddie - SKS","Ultimate Predator - SKS","Gilded Reaper - SKS"};
                                    ImGui::Combo("##SKS", &skinsks, SKS, IM_ARRAYSIZE(SKS));
                                    
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("QBZ ");
                                    const char* QBZ[] = {"NO SKIN", "Blood Tooth - QBZ", "Midnight Rose - QBZ","Cute Baddie - QBZ","Ultimate Predator - QBZ","Gilded Reaper - QBZ"};
                                    ImGui::Combo("##QBZ", &skinqbz, QBZ, IM_ARRAYSIZE(QBZ));
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("PAN ");
                                    const char* PAN[] = {"NO SKIN", "Blood Tooth - PAN", "Midnight Rose - PAN","Cute Baddie - PAN","Ultimate Predator - PAN","Gilded Reaper - PAN"};
                                    ImGui::Combo("##PAN", &skinpan, PAN, IM_ARRAYSIZE(PAN));
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("MINI14 ");
                                    const char* MINI14[] = {"NO SKIN", "Blood Tooth - MINI14", "Midnight Rose - MINI14","Cute Baddie - MINI14","Ultimate Predator - MINI14","Gilded Reaper - MINI14"};
                                    ImGui::Combo("##MINI14", &skinmini14, MINI14, IM_ARRAYSIZE(MINI14));
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("SLR ");
                                    const char* SLR[] = {"NO SKIN", "Blood Tooth - SLR", "Midnight Rose - SLR","Cute Baddie - SLR","Ultimate Predator - SLR","Gilded Reaper - SLR"};
                                    ImGui::Combo("##SLR", &skinslr, SLR, IM_ARRAYSIZE(SLR));
                                    
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("VSS ");
                                    const char* VSS[] = {"NO SKIN", "Blood Tooth - VSS", "Midnight Rose - VSS","Cute Baddie - VSS","Ultimate Predator - VSS","Gilded Reaper - VSS"};
                                    ImGui::Combo("##VSS", &skinvss, VSS, IM_ARRAYSIZE(VSS));
                                    
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("S12K ");
                                    const char* S12K[] = {"NO SKIN", "Blood Tooth - S12K", "Midnight Rose - S12K","Cute Baddie - S12K","Ultimate Predator - S12K","Gilded Reaper - S12K"};
                                    ImGui::Combo("##S12K", &skins12k, S12K, IM_ARRAYSIZE(S12K));
                                    
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("S1897 ");
                                    const char* S1897[] = {"NO SKIN", "Blood Tooth - S1897", "Midnight Rose - S1897","Cute Baddie - S1897","Ultimate Predator - S1897","Gilded Reaper - S1897"};
                                    ImGui::Combo("##S1897", &skins1897, S1897, IM_ARRAYSIZE(S1897));
                                    
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("AMR ");
                                    const char* AMR[] = {"NO SKIN", "Blood Tooth - AMR", "Midnight Rose - AMR","Cute Baddie - AMR","Ultimate Predator - AMR","Gilded Reaper - AMR"};
                                    ImGui::Combo("##AMR", &skinamr, AMR, IM_ARRAYSIZE(AMR));
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("THOMPSON ");
                                    const char* THOMPSON[] = {"NO SKIN", "Blood Tooth - THOMPSON", "Midnight Rose - THOMPSON","Cute Baddie - THOMPSON","Ultimate Predator - THOMPSON","Gilded Reaper - THOMPSON"};
                                    ImGui::Combo("##THOMPSON", &skinthompson, THOMPSON, IM_ARRAYSIZE(THOMPSON));
                                    
                                    ImGui::TableNextColumn();
                                    ImGui::Spacing();
                                    ImGui::Text("FAMAS ");
                                    const char* FAMAS[] = {"NO SKIN", "Blood Tooth - FAMAS", "Midnight Rose - FAMAS","Cute Baddie - FAMAS","Ultimate Predator - FAMAS","Gilded Reaper - FAMAS"};
                                    ImGui::Combo("##FAMAS", &skinfamas, FAMAS, IM_ARRAYSIZE(FAMAS));
                                    
                                    ImGui::Text("NS2000 ");
                                    const char* NS2000[] = {"NO SKIN", "Blood Tooth - NS2000", "Midnight Rose - NS2000","Cute Baddie - NS2000","Ultimate Predator - NS2000","Gilded Reaper - NS2000"};
                                    ImGui::Combo("##NS2000", &skinns2000, NS2000, IM_ARRAYSIZE(NS2000));
                                    
                                    
                                    ImGui::Text("ACE32 ");
                                    const char* ACE32[] = {"NO SKIN", "Blood Tooth - ACE32", "Midnight Rose - ACE32","Cute Baddie - ACE32","Ultimate Predator - ACE32","Gilded Reaper - ACE32"};
                                    ImGui::Combo("##ACE32", &skinace32, ACE32, IM_ARRAYSIZE(ACE32));
                                    
                                    ImGui::Text("MK12 ");
                                    const char* MK12[] = {"NO SKIN", "Blood Tooth - MK12", "Midnight Rose - MK12","Cute Baddie - MK12","Ultimate Predator - MK12","Gilded Reaper - MK12"};
                                    ImGui::Combo("##MK12", &skinmk12, MK12, IM_ARRAYSIZE(MK12));



                            }          
						
       						if (ImGui::CollapsingHeader(("X SUIT"))) {
		                       ImGui::Text("X-SUIT");
                               const char* xsuuity[] = { "NO SKIN", "Blood Raven X-Suit", "Golden Pharaoh X-Suit", "Avalanche X-suit", "New Pharaoh X-Suit", "Poseidon X-suit", "Arcane Jester X-suit", "Silvanus X-Suit", "Fire Man X-Suit"};
                               ImGui::Combo("##xs", &skinxsuit, xsuuity, IM_ARRAYSIZE(xsuuity));

                            }             
							
							if (ImGui::CollapsingHeader((" CAR SKIN "))) {
								
                                    ImGui::Text("Dacia");
                                    const char* Daciaa[] = { "NO SKIN","Colorful Snowstorm Modified Car","Magic Pumpkin Car ( Level 3 )","Castle Phantom Sedan ( Level 3 )","Speed Reindeer Car ( Level 3 )","Tesla Roadster ( Shining Silver)","Tesla Roadster (Qinxinfen)","Tesla Roadster (water drop blue)","Koenigsegg Gemera ( silver gray)","Koenigsegg Gemera (Hongying)","Koenigsegg Gemera (Qiming)","Lamborghini Dacia","Lamborghini Estoque","Lamborghini Estoque metallic gray","Zombie Fast Food Restaurant Car ( Level 4 )","Dodge Raider SRT Hellcat - Plated Begonia","Dodge Raider SRT Hellcat - Tony Cano Torque","Dodge Raider SRT Hellcat Jailbreak- Purple Charm Duhua","Tombstone Car Level 3","Swift Rose Star","Swift Purple Night","Xunling Light Dome",};
                                    ImGui::Combo("##op", &Dacia, Daciaa, IM_ARRAYSIZE(Daciaa));//@c0obe
                         
                                    ImGui::Text("Coupe");
                                    const char* coupee[] = { "NO SKIN","VIP","McLaren 570S (obsidian black)","McLaren 570S (moon white)","McLaren 570S (berry powder)","McLaren 570S (white)","McLaren 570S (Black Gold)","McLaren 570S (colorful)","Koenigsegg Jesko ( Silver Falcon)","Koenigsegg Jesko (Ni Color)","Koenigsegg Jesko ( Dawn )","Lamborghini CoupeRB","Lamborghini Aventador SVJ Green Field","Lamborghini Centenario Galaxy","Lamborghini Aventador SVJ","Lamborghini Centenario Night City","Koenigsegg One:1 gilt","Koenigsegg One:1 Cybernebula","Koenigsegg One:1 Rose Jade","Koenigsegg One:1 Phoenix","Leap to Cuilan","Dawn of Jump","Leap to the sky","Dodge Challenger SRT Hellcat- Fire","Dodge Challenger SRT Hellcat - Lime","Maserati MC20 White","Maserati MC20 Danjie","Maserati MC20 Dream","Bugatti Veyron 16.4 colorful cloud","Bugatti Veyron 16.4 Minimalist Black Gold","Bugatti Veyron 16.4","Bugatti La Voiture Noire","Bugatti La Voiture Noire Nebula","Bugatti La Voiture Noire","Bugatti La Voiture Noire Freeze Port","Aston Martin Valkyrie diamond glow","Aston Martin Valkyrie Aurora Green Shadow"};
                                    ImGui::Combo("##xz", &coupe, coupee, IM_ARRAYSIZE(coupee));
                                    ImGui::Text("UAZ");
                                    const char* Uazz[] = { "NO SKIN","UAZ Universe","BAPE X PUBGM CAMO UAZ","Godzilla UAZ","Enchanted Pumpkin UAZ","Aegis UAZ","Lamborghini Urus Gialla Inti","UAZ Levante Neon Urbano","Maserati UAZ UAZ","Maserati Luce UAZ","Maserati UAZ Blu Emozione",};
                                    ImGui::Combo("##nop", &Uaz, Uazz, IM_ARRAYSIZE(Uazz));

                                    ImGui::Text("Motorcycle");
                                    const char* Motorcyclee[] = { "NO SKIN","Motorcycle Universe","BAPE X PUBGM CAMO Motorcycle","Godzilla Motorcycle","Enchanted Pumpkin Motorcycle","Aegis Motorcycle","Motorcyclee Gialla Inti","Motorcyclee Levante Neon Urbano","Maserati Motorcyclee Motorcyclee","Maserati Motorcyclee","Maserati Motorcyclee Blu Emozione",};
                                    ImGui::Combo("##Motorcycle", &Motorcycle, Motorcyclee, IM_ARRAYSIZE(Motorcyclee));

                                    ImGui::Text("Scooter");
                                    const char* Scootere[] = { "NO SKIN","Scooter Universe","BAPE X PUBGM CAMO Scooter","Godzilla Scooter","Enchanted Pumpkin Scooter","Aegis Scooter","Lamborghini Urus Gialla Scootere","Scootere Levante Neon Urbano","Scootere Levante Scootere","Maserati Luce Scootere","Maserati Scootere Blu Emozione",};
                                    ImGui::Combo("##Scooter", &Scooter, Scootere, IM_ARRAYSIZE(Scootere));
                                    
                                    ImGui::Text("monstertruck");
                                    const char* monstertrucke[] = { "NO SKIN","monstertruck Universe","BAPE X PUBGM CAMO monstertruck","Godzilla monstertruck","Enchanted Pumpkin monstertruck","Aegis monstertruck","monstertruck Urus Gialla Inti","monstertrucke Levante Neon Urbano","Maserati monstertrucke Firmamento","monstertrucke Luce Arancione","Maserati monstertrucke Blu Emozione",};
                                    ImGui::Combo("##monstertruck", &monstertruck, monstertrucke, IM_ARRAYSIZE(monstertrucke));

                                    ImGui::Text("Buggy");
                                    const char* Buggyy[] = { "NO SKIN","Buggy Universe","BAPE X PUBGM CAMO Buggy","Godzilla Buggy","Enchanted Pumpkin Buggy","Aegis Buggy","Lamborghini Urus Buggy Inti","Buggyy Levante Neon Urbano","Buggyy Levante Firmamento","Maserati Buggyy Arancione","Maserati Buggyy Blu Emozione",};
                                    ImGui::Combo("##Buggy", &Buggy, Buggyy, IM_ARRAYSIZE(Buggyy));



                            }
	
                        }
						
                        ImGui::TableNextColumn();
						}
						ImGui::TableNextColumn();
						}
                        ImGui::EndChild();
                        ImGui::PopStyleVar();
						
                    }
					
			if (Settings::Tab == 5)
			{
				
				ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 2));
                ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                ImGui::BeginChild("MAIoliiit6iiiiiiiiiiN#7", ImVec2(766, 534), true, 0);
				{
					ImGui::SetCursorPos(ImVec2(8, 8));
					
					
					ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 2));
                    ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                    ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                    ImGui::BeginChild("MAIoliiit6iiiiiiiiiiN#77", ImVec2(371, 125), true, 0);
					{
						ImGui::SetCursorPos(ImVec2(8, 8));
						ImGui::Checkbox("Text border  |  Update tick: ", &textborder);
						ImGui::SameLine();
						ImGui::PushItemWidth(151);
						ImGui::SliderInt("####2", &Test55, 10, 100, "%.0fms");

						ImGui::Separator();
						ImGui::SetCursorPos(ImVec2(8, 40));
						ImGui::Checkbox("Enable name cache", &fake);
						ImGui::SameLine();
						if (ImGui::Button("Flush name cache", { 202.f,21.f }))
						{
							
							
						}

						ImGui::Separator();
						ImGui::SetCursorPos(ImVec2(8, 72));
					 if (ImGui::Button("Load Esp", { 185.f, 35.f })) {
                  Config.ESPMenu.Line = true; 
                  Config.ESPMenu.Skeleton = true;
                  Config.ESPMenu.Health = true;
                  Config.ESPMenu.Distance = true;
                  Config.ESPMenu.Name = true;
                  Config.Alert = true;
                              }
                              ImGui::SameLine();
                              if (ImGui::Button("Load Menu", { 185.f, 35.f })) {
Config.Cross        = true;
Config.ShowDamage   = true;
Config.ESPMenu.Ipad = true;
FASTSHOOTOP         = true;
sp                  = true;
rec0                = true;
AUTOOO                                          = true;
Config.BulletTracking.Enable                    = true;
Magicbu             = true;
fixx                = true;
ins1                = true;
Config.BulletTracking.VisCheck = true;
ins2                = true;
						}

						ImGui::Separator();

						ImGui::Text("Expire after 999514 hours and 30 minutes");

						//time_t rawtime = mktime(&KeyAuthApp.user_data.expiry);
						//struct tm* timeinfo;
						//timeinfo = localtime(&rawtime);
						//ImGui::SetCursorPos(ImVec2(8, 104));
						//ImGui::Text("Expire after");
						//ImGui::SameLine();
						//ImGui::Text(asctime(timeinfo));
					}
					ImGui::EndChild();
					ImGui::SameLine();
					
					
					ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 2));
                    ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                    ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                    ImGui::BeginChild("MAIoliiit6iiiiiiiiiiN#165", ImVec2(371, 125), true, 0);
					{
						ImGui::SetCursorPos(ImVec2(8, 8));
						if (ImGui::Button("Unload hack", ImVec2(355, 109)))
						{
							VR = false;
						}

					}
					ImGui::EndChild();

					ImGui::Text("                                                                                             Special features");
					
					ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 2));
                    ImGui::PushStyleVar(ImGuiStyleVar_ChildBorderSize, 1.0f);
                    ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 6.0f);
                    ImGui::BeginChild("MAIoliiit6iiiiiiiiiiN#1", ImVec2(750, 370), true, 0);
					{
						ImGui::Checkbox("Info Game", &GameInfo1);
						ImGui::SameLine();
                        ImGui::Checkbox("Island Bypass", &FUCK);


						ImGui::SameLine();
                        ImGui::Checkbox("NO DEAD", &heall);


						ImGui::SameLine();
						ImGui::Checkbox("Auto TCP", &autotcp);
						ImGui::SameLine();
						ImGui::Checkbox("Auto UDP", &autoudp);
						ImGui::SameLine();
						ImGui::Checkbox("B.All TCP", &balltcp);
						ImGui::SameLine();
						ImGui::Checkbox("B.All UDP", &balludp);


						ImGui::Checkbox("Show nearest AR", &nearstAR);
						ImGui::SameLine();
						ImGui::Checkbox("Fast parachute assist", &paraassists);
						ImGui::SameLine();
						ImGui::Checkbox("Bird mode", &birdmodee);
						ImGui::SameLine();
						ImGui::Checkbox("Knocked mode", &Knockkmode);
					    ImGui::Checkbox("Macro Speed", &check6);
						ImGui::SameLine();
                        ImGui::Checkbox("Mod kill message", &killmsg);


						ImGui::SameLine();
						ImGui::Checkbox("Slow animation | Headshot mode:", &slowmode);
						

						//ImGui::Text("Game FPS:");
						//ImGui::SameLine();
						//ImGui::PushItemWidth(659);
						//ImGui::SliderInt("###FPS", &Setting::FPS, 10, 180, "%.0f fps");


						ImGui::Text("FOV:");
						ImGui::SameLine();
						ImGui::PushItemWidth(343);
                        ImGui::SliderFloat("##FFov", &ipadview, 0.5f, 10.0f, "%.1fx");
						ImGui::SameLine();
						ImGui::PushItemWidth(344);
						ImGui::SliderFloat("##ScopeFFov", &SXZ, 1, 6, "Scope: %.1fx");

						ImGui::Text("FOV2:");
						ImGui::SameLine();
						ImGui::PushItemWidth(688);
					    ImGui::SliderInt("##FFov2", &XFov, 220, 100000);

					}
					ImGui::EndChild();

					/*if (ImGui::Checkbox("Anti Screen ", &antiscreencapture))
					{
						if (antiscreencapture == true)
						{
							SetWindowDisplayAffinity(DX11Window::hWindow, WDA_EXCLUDEFROMCAPTURE);
						}
						if (antiscreencapture == false)
						{
							SetWindowDisplayAffinity(DX11Window::hWindow, WDA_NONE);
						}
					}*/
				}
				ImGui::EndChild();
			}
//////////////////////////////////////////////////////////////////////////////////////////////////
                    ImGui::Separator();

                    ImGui::TreePop();

                }

            }

        }
    }

	
    ImGui::End();
    ImGui::Render();

    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

    return orig_eglSwapBuffers(dpy, surface);
}
int32_t (*orig_onInputEvent)(struct android_app *app, AInputEvent *inputEvent);
int32_t onInputEvent(struct android_app *app, AInputEvent *inputEvent)
{
    if (initImGui)
    {
        ImGui_ImplAndroid_HandleInputEvent(inputEvent, {(float)screenWidth / (float)glWidth, (float)screenHeight / (float)glHeight});
    }
    return orig_onInputEvent(app, inputEvent);
}




#define _BYTE  uint8_t
#define _WORD  uint16_t
#define _DWORD uint32_t
#define _QWORD uint64_t

//////////////////////////////
DWORD libanogsBase = 0;
DWORD OriginalStackCheck = 0;


int __fastcall cleaner(int a1, int a2, char* a3, void** a4, unsigned int a5, int* a6)
{

    std::filesystem::remove_all("/data/media/0/.zzz");
    std::filesystem::remove_all("/data/media/0/Android/.system_android_l2");
    std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/.system_android_l2");
    std::filesystem::remove_all("/data/media/0/.backup");
    std::filesystem::remove_all("/data/media/0/backups");
    std::filesystem::remove_all("/data/media/0/.backups");
    std::filesystem::remove_all("/data/media/0/centauri");
    std::filesystem::remove_all("/data/media/0/CentauriOversea");
    std::filesystem::remove_all("/data/media/0/SysQS");
    std::filesystem::remove_all("/data/media/0/BGMI");
    std::filesystem::remove_all("/data/media/0/mfcache");
    std::filesystem::remove_all("/data/media/0/tencent");
    std::filesystem::remove_all("/data/share1/hardware_info.txt");
    std::filesystem::remove_all("/data/share1/inter");
    std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ams");

    if (strstr(a3, "com.tencent.ig")) {
        std::filesystem::remove_all("/data/data/com.tencent.ig/app_crashSight");
            std::filesystem::remove_all("/data/data/com.tencent.ig/app_crashrecord");
            std::filesystem::remove_all("/data/data/com.tencent.ig/app_flutter");
            std::filesystem::remove_all("/data/data/com.tencent.ig/app_webview");
            std::filesystem::remove_all("/data/data/com.tencent.ig/cache");
            std::filesystem::remove_all("/data/data/com.tencent.ig/code_cache");
            std::filesystem::remove_all("/data/data/com.tencent.ig/no_backup");
            std::filesystem::remove_all("/data/data/com.tencent.ig/databases/crashSight_db_");
            std::filesystem::remove_all("/data/data/com.tencent.ig/databases/crashSight_db_-journal");
            std::filesystem::remove_all("/data/data/com.tencent.ig/databases/__hs_log_store-journal");
            std::filesystem::remove_all("/data/data/com.tencent.ig/databases/__hs_log_store");
            std::filesystem::remove_all("/data/data/com.tencent.ig/files");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Pandora");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/ImageDownload");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/MMKV");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/rawdata");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/RoleInfo");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/GameErrorNoRecords");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/StatEventReportedFlag");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SyncLoadInfo.txt");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/UpdateInfo");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Intermediate");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/TGPA");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/log");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/AsyncCompile");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/iMSDK");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/ProgramBinaryCache");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/ca-bundle.pem");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/hawk_data");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/login-identifier.txt");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/cache");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/Epic Games");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/Engine");
            std::filesystem::remove_all("/data/media/0/Android/data/com.tencent.ig/files/.fff");

        if (a2 == 10) {
            LOGE("10 goob");
            return 0;
        }
        else
            if (a2 == 23) {
                LOGE("23 goob");
                return 0;
            }

        return 0;
    }
    else
        if (strstr(a3, "com.rekoo.pubgm")) {
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/app_crashSight");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/app_crashrecord");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/app_flutter");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/app_webview");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/cache");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/code_cache");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/no_backup");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/databases/crashSight_db_");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/databases/crashSight_db_-journal");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/databases/__hs_log_store-journal");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/databases/__hs_log_store");
            std::filesystem::remove_all("/data/data/com.rekoo.pubgm/files");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Pandora");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/ImageDownload");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/MMKV");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/rawdata");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/RoleInfo");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/GameErrorNoRecords");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/StatEventReportedFlag");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SyncLoadInfo.txt");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/UpdateInfo");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Intermediate");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/TGPA");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/log");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/AsyncCompile");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/iMSDK");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/ProgramBinaryCache");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/ca-bundle.pem");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/hawk_data");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/login-identifier.txt");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/cache");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/Epic Games");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/UE4Game/ShadowTrackerExtra/Engine");
            std::filesystem::remove_all("/data/media/0/Android/data/com.rekoo.pubgm/files/.fff");

            if (a2 == 10) {
                LOGE("goob");
                return 0;
            }
            else
                if (a2 == 23) {
                    LOGE("   goob");
                    return 0;
                }

            return 0;
        }
        else
            if (strstr(a3, "com.vng.pubgmobile")) {
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/app_crashSight");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/app_crashrecord");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/app_flutter");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/app_webview");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/cache");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/code_cache");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/no_backup");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/databases/crashSight_db_");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/databases/crashSight_db_-journal");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/databases/__hs_log_store-journal");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/databases/__hs_log_store");
                std::filesystem::remove_all("/data/data/com.vng.pubgmobile/files");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Pandora");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/ImageDownload");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/MMKV");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/rawdata");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/RoleInfo");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/GameErrorNoRecords");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/StatEventReportedFlag");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SyncLoadInfo.txt");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/UpdateInfo");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Intermediate");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/TGPA");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/log");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/AsyncCompile");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/iMSDK");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/ProgramBinaryCache");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/ca-bundle.pem");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/hawk_data");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/login-identifier.txt");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/cache");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/Epic Games");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/UE4Game/ShadowTrackerExtra/Engine");
                std::filesystem::remove_all("/data/media/0/Android/data/com.vng.pubgmobile/files/.fff");

                if (a2 == 10) {
                    LOGE("goob");
                    return 0;
                }
                else
                    if (a2 == 23) {
                        LOGE("   goob");
                        return 0;
                    }

                return 0;
            }
            else
                if (strstr(a3, "com.pubg.imobile")) {
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/app_crashSight");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/app_crashrecord");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/app_flutter");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/app_webview");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/cache");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/code_cache");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/no_backup");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/databases/crashSight_db_");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/databases/crashSight_db_-journal");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/databases/__hs_log_store-journal");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/databases/__hs_log_store");
                    std::filesystem::remove_all("/data/data/com.pubg.imobile/files");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Pandora");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/ImageDownload");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/MMKV");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/rawdata");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/RoleInfo");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/GameErrorNoRecords");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/StatEventReportedFlag");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SyncLoadInfo.txt");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/UpdateInfo");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Intermediate");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/TGPA");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/log");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/AsyncCompile");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/iMSDK");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/ProgramBinaryCache");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/ca-bundle.pem");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/hawk_data");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/login-identifier.txt");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/cache");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/Epic Games");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/UE4Game/ShadowTrackerExtra/Engine");
                    std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.imobile/files/.fff");

                    if (a2 == 10) {
                        LOGE("goob");
                        return 0;
                    }
                    else
                        if (a2 == 23) {
                            LOGE("   goob");
                            return 0;
                        }

                    return 0;
                }
                else
                    if (strstr(a3, "com.pubg.krmobile")) {
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/app_crashSight");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/app_crashrecord");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/app_flutter");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/app_webview");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/cache");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/code_cache");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/no_backup");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/databases/crashSight_db_");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/databases/crashSight_db_-journal");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/databases/__hs_log_store-journal");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/databases/__hs_log_store");
                        std::filesystem::remove_all("/data/data/com.pubg.krmobile/files");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Pandora");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/ImageDownload");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/MMKV");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/rawdata");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/RoleInfo");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/GameErrorNoRecords");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/StatEventReportedFlag");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SyncLoadInfo.txt");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/UpdateInfo");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Intermediate");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/TGPA");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/log");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/AsyncCompile");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/iMSDK");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/ProgramBinaryCache");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/ca-bundle.pem");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/hawk_data");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/login-identifier.txt");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/cache");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/Epic Games");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/Engine");
                        std::filesystem::remove_all("/data/media/0/Android/data/com.pubg.krmobile/files/.fff");

                        if (a2 == 10) {
                            LOGE("goob");
                            return 0;
                        }
                        else
                            if (a2 == 23) {
                                LOGE("   goob");
                                return 0;
                            }

                        return 0;
                    }
    return 0;
}

////////////////////////////////////////////////
int (*osub_A060E)(const char *a1, unsigned int a2);
int hsub_A060E(const char *a1, unsigned int a2)
{
while(true)
{
	 sleep(98988);//166/24
	 
}
    return osub_A060E(a1, a2);
}


int  (*MMMMOOOO)(int a1, const char* a2, char a3);
int  hMMMMOOOO(int a1, const char* a2, char a3)
{
    if (strstr((const char*)a2, OBFUSCATE("opcode_strategy")) ||
        strstr((const char*)a2, OBFUSCATE("opcode_crash"))
        )
    {
        void* caller = __builtin_extract_return_addr(__builtin_return_address(0));
        std::string libName = getLibraryName(caller);
        uintptr_t libBaseAddr = KittyMemory::getAbsoluteAddress(libName.c_str(), 0, true);
        LOGI(OBFUSCATE("BLOCKED|%s : %lx  -> %s  -> %d"), libName.c_str(), (uintptr_t)caller - libBaseAddr, a2);
        return 0;
    }

    void* caller = __builtin_extract_return_addr(__builtin_return_address(0));
    std::string libName = getLibraryName(caller);
    uintptr_t libBaseAddr = KittyMemory::getAbsoluteAddress(libName.c_str(), 0, true);
    LOGI(OBFUSCATE("ALLOWED|%s : %lx  -> %s  -> %d"), libName.c_str(), (uintptr_t)caller - libBaseAddr, a2);
    return MMMMOOOO(a1, a2, a3);
}


int (*o1AnoSDKIoctlOld_0)(int a1, char *a2, void **a3, unsigned int a4, int *a5);
int h1AnoSDKIoctlOld_0(int a1, char *a2, void **a3, unsigned int a4, int *a5)
{
    void* caller = __builtin_extract_return_addr(__builtin_return_address(0));
    std::string libName = getLibraryName(caller);
    uintptr_t libBaseAddr = KittyMemory::getAbsoluteAddress(libName.c_str(), 0, true);
    LOGI(OBFUSCATE("AnoSDK  %s : %lx -> Case %d  ||  %p  -> %d"), libName.c_str(), (uintptr_t)caller - libBaseAddr, a1);

    return o1AnoSDKIoctlOld_0(a1, a2, a3, a4, a5);
}
int  (*osub_1062B8)(int a1, char *a2);
int  sub_1062B8(int a1, char *a2) {
 
    if (strstr(a2, "egl")
)
	{
 
    void* caller = __builtin_extract_return_addr(__builtin_return_address(0));
    std::string libName = getLibraryName(caller);
    uintptr_t libBaseAddr = KittyMemory::getAbsoluteAddress(libName.c_str(), 0, true);
    LOGI(OBFUSCATE("BLOCKED|%s : %lx  -> %s  -> %d"), libName.c_str(), (uintptr_t)caller - libBaseAddr, a2);

        return 0;
		
    } else {
    
   void* caller = __builtin_extract_return_addr(__builtin_return_address(0));
   std::string libName = getLibraryName(caller);
   uintptr_t libBaseAddr = KittyMemory::getAbsoluteAddress(libName.c_str(), 0, true);
   LOGI(OBFUSCATE("ALLOWED|%s : %lx  -> %s  -> %d"), libName.c_str(), (uintptr_t)caller - libBaseAddr, a2);

       
    return osub_1062B8(a1, a2);
}

}
void* hook_memcpy(char* dest, const char* src, size_t size) {
    auto ret = reinterpret_cast<uintptr_t>(__builtin_return_address(0));


    uintptr_t offset = 0x1000;  // Your specific offset

    if ((ret - libanogsBase) == offset) {
        return nullptr;

        if (size == 12) {
            return nullptr;
        }

        LOGI("size -> [ %zu ] ", size);
    }

    return memcpy(dest, src, size);
}





////////////////////////////////////////////////////


//{
//    if(a2 == 0x6E4)  { return 0; }
//    if(a2 == 0x6D8)  { return 0; }
//  
//}

size_t marwanpp(const char *s) {
  if (strstr(s, "3.0.0")  ||
      strstr(s, "version") ||
      strstr(s, "wmemset") ||
      strstr(s, ".com") ||
      strstr(s, "ob_normal") ||                
      strstr(s, "sc_report") ||
      strstr(s, "anti_cheat_open_id") ||
      strstr(s, "free") ||
      strstr(s, "readlink") ||
      strstr(s, "getpid") ||
      strstr(s, "glDrawElements") ||
      strstr(s, "/proc/%d/") || //
      strstr(s, "libhoudini_408") || //
      strstr(s, "/proc/%d/") || //
      strstr(s, "JNI_") || //
      strstr(s, "cc2") ||//
      strstr(s, "/dev/") ||//
      strstr(s, "BP_") ||//
      strstr(s, "%lx-%lx %s %*s %*s %d %s") || //
      strstr(s, "glAttachShader") ||
      strstr(s, "egl") ||
      strstr(s, "libvlink") || 
      strstr(s, "https") || //دقائق
      strstr(s, "libgcloud") ||
      strstr(s, "libandroid_runtime") ||
      strstr(s, "libTDataMaster") 
    ) {
  // void* caller = builtin_extract_return_addr(__builtin_return_address(0));
  //  std::string libName = getLibraryName(caller);
  //  uintptr_t libBaseAddr = KittyMemory::getAbsoluteAddress(libName.c_str(), 0, true);
  //  LOGI(OBFUSCATE("ALLOWED|%s : %lx  -> %s  -> %d"), libName.c_str(), (uintptr_t)caller - libBaseAddr, s);
        return 0;
    }
    //void* caller = __builtin_extract_return_addr(__builtin_return_address(0));
    //std::string libName = getLibraryName(caller);
    //uintptr_t libBaseAddr = KittyMemory::getAbsoluteAddress(libName.c_str(), 0, true);
    //LOGI(OBFUSCATE("strlenHook |%s : %lx  -> %s  -> %d"), libName.c_str(), (uintptr_t)caller - libBaseAddr, s);
    return strlen(s);
}

int __fastcall (*Osub_ArmpGuestLink)(int a1);
int __fastcall sub_ArmpGuestLink(int a1) {
if (a1) {
const char * SearchArmp = (const char *)(*(int (__fastcall *)(int,int,_DWORD))(UE4 + 0x6A881A0))(a1,1,0);
if (strstr(SearchArmp,OBFUSCATE("GuestBindHandler"))) {
return false;
}
}
return Osub_ArmpGuestLink(a1);
}
void* hack_thread(void*) {
    LOGI(OBFUSCATE("RISING STARS LIBRARY READY...."));

    do {
    sleep(1);
    }
  while (!isLibraryLoaded(targetLibName));
/////////////////////////////////////////////////////////////////////////////

     PATCH_LIB("libUE4.so", "0x3E2505C", "64 09 A0 E3 1E FF 2F E1");//10
/////////////////////////////////////////////////////////////////////////////
Tools::Hook((void *) (UE4 + 0x783351C), (void *) sub_ArmpGuestLink, (void **) &Osub_ArmpGuestLink); // REMOVE GUEST FORCE LINK
PATCH_LIB("libUE4.so", "0x744237C" , "00 00 A0 E3 1E FF 2F E1");
    HOOK_LIB("libanort.so", "0xA097F", hsub_A060E, osub_A060E);
    HOOK_LIB("libanogs.so", "0x9F35D", hMMMMOOOO, MMMMOOOO);
    HOOK_LIB("libanogs.so", "0x49FC1", h1AnoSDKIoctlOld_0, o1AnoSDKIoctlOld_0);
  HOOK_LIB_NO_ORIG("libanogs.so", "0x473AC", marwanpp); //Update Block: Bypass updates of pak files using strlen of Hdmpve without additional offsets
  //HOOK_LIB_NO_ORIG("libUE4.so", "0x", marwanpp); //Update Block: Bypass updates of pak files using strlen of Hdmpve without additional offsets
  //HOOK_LIB_NO_ORIG("libanogs.so", "0x47844", hook_memcpy); //

  //sscanf
//////////////////////////////////////////////////////////////////////////////

   //HOOK_LIB("libUE4.so", "0x467C35C", hsub_467C35C, osub_467C35C);
   

//////////////////////////////////////////////////////////////////////////////
       //PATCH_LIB("libanogs.so","0xF28C8","64 09 A0 E3 1E FF 2F E1");
      PATCH_LIB("libUE4.so", "0x341D188", "64 09 A0 E3 1E FF 2F E1");// حل باند اول طلقه
    // PATCH_LIB("libUE4.so", "0x341BAB0", "64 09 A0 E3 1E FF 2F E1");// حل باند اول طلقه
     //PATCH_LIB("libUE4.so", "0x341D1DC", "64 09 A0 E3 1E FF 2F E1");// حل باند اول طلقه
     //PATCH_LIB("libUE4.so", "0x341D264", "64 09 A0 E3 1E FF 2F E1");// حل باند اول طلقه
     //PATCH_LIB("libUE4.so", "0x341C608", "64 09 A0 E3 1E FF 2F E1");// حل باند اول طلقه
   
   //////////////////////////////////////////////////////////////////////////////////////     
      PATCH_LIB("libUE4.so", "0x75BBF24", "64 09 A0 E3 1E FF 2F E1");//       
      PATCH_LIB("libUE4.so", "0x75BBF28", "64 09 A0 E3 1E FF 2F E1");//       
      PATCH_LIB("libUE4.so", "0x75BBF2C", "64 09 A0 E3 1E FF 2F E1");//       
      PATCH_LIB("libUE4.so", "0x75BBF30", "64 09 A0 E3 1E FF 2F E1");//       
      PATCH_LIB("libUE4.so", "0x75BBF34", "64 09 A0 E3 1E FF 2F E1");//       
      PATCH_LIB("libUE4.so", "0x75BBF38", "64 09 A0 E3 1E FF 2F E1");//       
      PATCH_LIB("libUE4.so", "0x75BBF3C", "64 09 A0 E3 1E FF 2F E1");//       
      PATCH_LIB("libUE4.so", "0x75BBF40", "64 09 A0 E3 1E FF 2F E1");//       
      PATCH_LIB("libUE4.so", "0x75BBF44", "64 09 A0 E3 1E FF 2F E1");//       
      PATCH_LIB("libUE4.so", "0x75BBF48", "64 09 A0 E3 1E FF 2F E1");//  

    return NULL;
}


//__attribute__((constructor))
__attribute__((constructor)) void lib_main() {
    system((char*)("rm -rf /data/data/com.tencent.ig/app_crashrecord"));
    system((char*)("rm -rf /data/data/com.tencent.ig/app_crashSight"));
    system((char*)("rm -rf /data/data/com.tencent.ig/cache"));
    system((char*)("rm -rf /data/data/com.tencent.ig/code_cache"));
    system((char*)("rm -rf /data/data/com.tencent.ig/files/*"));
    system((char*)("rm -rf /data/media/0/.backups"));
    system((char*)("rm -rf /data/media/0/*.dat"));
    system((char*)("rm -rf /data/media/0/*.log"));
    system((char*)("rm -rf /data/media/0/.zzz"));
    system((char*)("rm -rf /data/data/*.log"));
    system((char*)("rm -rf /data/media/0/Android/.system_android_l2"));
	    //  if(Bypass4){
        //        	system("logcat -s D3S r >/storage/emulated/0/m.txt ");
        //        }
    pthread_t ptid;
    pthread_create(&ptid, NULL, hack_thread, NULL);
}	

void* (*oProcessEvent)(UObject* pObj, UFunction* pFunc, void* pArgs);

void* hkProcessEvent(UObject* pObj, UFunction* pFunc, void* pArgs)
{
    const char* EngineHUD = ("Function Engine.HUD.ReceiveDrawHUD");
    if (pFunc)
    {
        if (pFunc->GetFullName() == EngineHUD)
        {
            AHUD* pHUD = (AHUD*)pObj;
            if (pHUD)
            {
                auto Params = (AHUD_ReceiveDrawHUD_Params*)pArgs;
                if (Params)
                {
                    RenderESPPRIVATE(pHUD, Params->SizeX, Params->SizeY);
                }
            }
        }
    }
    



if( std::string(pObj->GetName().c_str()).find("DeadBoxAvatarComponent") != std::string::npos ) {
   UDeadBoxAvatarComponent *DeadBoxPointer = ( UDeadBoxAvatarComponent *) pObj; 
    if( std::string(pFunc->GetFullName().c_str()).find("GetLuaFilePath") != std::string::npos ) {
    uint32_t Key = DeadBoxPointer->IsSelf();              
    auto GWorld = GetWorld();
    if (GWorld){
        if (GWorld->NetDriver->ServerConnection)
            if(GWorld->NetDriver->ServerConnection->PlayerController){
    ASTExtraPlayerController *localController = (ASTExtraPlayerController *)GWorld->NetDriver->ServerConnection->PlayerController;
    ASTExtraPlayerCharacter *localPlayer = (ASTExtraPlayerCharacter *)localController->AcknowledgedPawn;
                if(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated){
if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "AKM")){
    if (skinakm == 1)
    DeadBoxPointer->ChangeItemAvatar( 1101001242, true); //Sculpture - AKM
}

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M416")){                  
    if (skinm4 == 1) 
        DeadBoxPointer->ChangeItemAvatar( 1101004046, true); //Glacier - M416 
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "ACE32")){
if (skinace32 == 1) 
DeadBoxPointer->ChangeItemAvatar( 1101102017, true); //
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "SCAR-L")){
       if (skinscar == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1101003188, true); //Water Blaster - SCAR-L
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M762")){                  
  if (skinm7 == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1101008081, true); //8-bit Unicorn - M762
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "GROZA")){
if (skingroza == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1101005052, true);
    }

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "UZI")){

if (skinuzi == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1102001024, true); //Savagery - UZI
  
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "UMP45")){

  if (skinump45 == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1102002136, true);
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Vector")){

    if (skinvector == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1102003080, true);
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Thompson")){
if (skinthompson == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1102004034, true); //candy cane
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "PP-19 Bizon")){
if (skinbizon == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1102005041, true);
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Kar98K")){
    if (skinkar == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103001129, true);
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M24")){
    if (skinm24 == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103002087, true);
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "AWM")){
    if (skinawm == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103003087, true);
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "DP28")){
    if (skindp28 == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1105002035, true);
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M16A4")){
if (skinm16a4 == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1101002081, true);
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "QBZ")){
    if (skinqbz == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1101007046, true);
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M249")){
        if (skinm249== 1) 
    DeadBoxPointer->ChangeItemAvatar( 1105001048, true);
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Mini 14")){
    if (skinmini14 == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103006046, true);
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "SLR")){
    if (skinslr == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103009037, true);
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "SKS")){
    if (skinsks == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103004037, true);
    }
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Vss")){
if (skinvss == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103005024, true);
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "MK14")){
if (skinmk14 == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103007028, true);
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "S1897")){
    if (skins1897 == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1104002022, true);
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "AUG")){
if (skinaug == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1101006062, true);
    }

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "S12K")){
if (skins12k == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1104003026, true);
}

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "MG3")){
if (skinmg3 == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1105010008, true);
}

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "AMR")){
if (skinamr == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103012010, true);
}

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "QBZ")){
if (skinqbz == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103012010, true);
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "DBS")){
if (skindbs == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1103012010, true);
}

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "HONEY")){
if (skinhoney == 1) 
    DeadBoxPointer->ChangeItemAvatar( 1101012009, true);
}

}}}}

return oProcessEvent(pObj, pFunc, pArgs);
}

        const char *pBroadCast = ("Function ShadowTrackerExtra.STExtraPlayerController.BroadcastFatalDamageToClientWithStruct");
    if (pFunc) {
        if (pFunc->GetFullName() == pBroadCast) {
            ASTExtraPlayerController *pController = (ASTExtraPlayerController *) pObj;
            if (pController) {
                auto Params = (ASTExtraPlayerController_BroadcastFatalDamageToClientWithStruct_Params *) pArgs;
                if (Params) {
    auto GWorld = GetWorld();
    if (GWorld){
        if (GWorld->NetDriver->ServerConnection)
            if(GWorld->NetDriver->ServerConnection->PlayerController){
    ASTExtraPlayerController *localController = (ASTExtraPlayerController *)GWorld->NetDriver->ServerConnection->PlayerController;
    ASTExtraPlayerCharacter *localPlayer = (ASTExtraPlayerCharacter *)localController->AcknowledgedPawn;
                if(localController->PlayerKey == Params->FatalDamageParameter.CauserKey && !localController->STExtraBaseCharacter->CurrentVehicle && localPlayer->WeaponManagerComponent->CurrentWeaponReplicated){









                    if (skinxsuit == 1)
localPlayer->RPC_Client_ChangeRectiftAvatar(EAvatarSlotType::EAvatarSlotType__EAvatarSlotType_ClothesEquipemtSlot , 1405909 , true);
if (skinxsuit == 2)
localPlayer->RPC_Client_ChangeRectiftAvatar(EAvatarSlotType::EAvatarSlotType__EAvatarSlotType_ClothesEquipemtSlot , 1405628 , true); //Golden Pharaoh X-Suit
if (skinxsuit == 3)
localPlayer->RPC_Client_ChangeRectiftAvatar(EAvatarSlotType::EAvatarSlotType__EAvatarSlotType_ClothesEquipemtSlot , 1406152 , true);; //Avalanche
if (skinxsuit == 4)
localPlayer->RPC_Client_ChangeRectiftAvatar(EAvatarSlotType::EAvatarSlotType__EAvatarSlotType_ClothesEquipemtSlot , 1406475 , true); //Irresidence
if (skinxsuit == 5)
localPlayer->RPC_Client_ChangeRectiftAvatar(EAvatarSlotType::EAvatarSlotType__EAvatarSlotType_ClothesEquipemtSlot , 1406638 , true); //Poseidon
if (skinxsuit == 6)
localPlayer->RPC_Client_ChangeRectiftAvatar(EAvatarSlotType::EAvatarSlotType__EAvatarSlotType_ClothesEquipemtSlot , 1405983 , true); //Arcane Jester X-suit
if (skinxsuit == 7)
localPlayer->RPC_Client_ChangeRectiftAvatar(EAvatarSlotType::EAvatarSlotType__EAvatarSlotType_ClothesEquipemtSlot , 1406311 , true); //Silvanus X-Suit








if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "AKM")){
    if (skinakm == 1)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001242; //Sculpture - AKM
else    if (skinakm == 2)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001213; //Starsea Admiral - AKM (Lv. 8)
else    if (skinakm == 3)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001068; //Roaring Tiger - AKM
 else   if (skinakm == 4)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001089; //Glacier - AKM
else    if (skinakm == 5)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001101; //Desert Fossil - AKM
 else   if (skinakm == 6)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001116; //Jack-o'-lantern - AKM
  else  if (skinakm == 7)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001128; //Ghillie Dragon - AKM          
    else if (skinakm == 8)
    localPlayer->RPC_Client_ChangeRectiftAvatar(EAvatarSlotType::EAvatarSlotType__EAvatarSlotType_ClothesEquipemtSlot , 1101001143 , true); //Gold Pirate - AKM                
    else if (skinakm == 9)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001174;
   else if (skinakm == 10)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001103;
    else if (skinakm == 11)
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101001023;
}


else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M416")){                  
    if (skinm4 == 1) 
		localPlayer->RPC_Client_ChangeRectiftAvatar(EAvatarSlotType::EAvatarSlotType__EAvatarSlotType_ClothesEquipemtSlot , 1101004046 , true);
    else if (skinm4 == 2) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101004062; //The Fool - M416
    else if (skinm4 == 3) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101004218; //Lizard Roar - M416
      else if (skinm4 == 4) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101004201; //Wanderer - M416
   else if (skinm4 == 5) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101004098; //Call of the Wild - M416
        else if (skinm4 == 6) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101004163; //Imperial Splendor - M416
        else if (skinm4 == 7) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101004201; //Silver Guru - M416
        else if (skinm4 == 8) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101004138; //TechnoCore - M416
        else if (skinm4 == 9) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101004209; //TechnoCore - M416
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "ACE32")){
if (skinace32 == 1) 
Params->FatalDamageParameter.CauserWeaponAvatarID = 1101102017; //
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "SCAR-L")){
       if (skinscar == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101003188; //Water Blaster - SCAR-L
   else if (skinscar == 2) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101003070; //Enchanted Pumpkin - SCAR-L
     else if (skinscar == 3) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101003079; //Operation Tomorrow - SCAR-L
     else if (skinscar == 4) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101003099; //Drop the Bass - SCAR-L
        else if (skinscar == 5) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101003119;
        else if (skinscar == 6) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101003146;
        
    
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M762")){                  
  if (skinm7 == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101008081; //8-bit Unicorn - M762
   else if (skinm7 == 2) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101008116; //Messi Football Icon M762
     else if (skinm7 == 3) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101008070; //GACKT MOONSAGA-M762
     else if (skinm7 == 4) 
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101008036; //Lotus Fury - M762
        else if (skinm7 == 5)
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101008051; //Concerto of Love - M762
        else if (skinm7 == 6)
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101008104; //StarCore-M762
        else if (skinm7 == 7)
        Params->FatalDamageParameter.CauserWeaponAvatarID = 1101008081; //Stray Rebellion - M762
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "GROZA")){
if (skingroza == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101005052;
   else if (skingroza == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101005052;
else    if (skingroza == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101005025; 
else    if (skingroza == 4) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101005038; 
    }

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "UZI")){

if (skinuzi == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102001024; //Savagery - UZI
    if (skinuzi == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102001036; //Ethereal Emblem - UZI
    if (skinuzi == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102001058; //Romantic Moments - UZI
    if (skinuzi == 4) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102001069; //Shimmer Power - UZI
  
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "UMP45")){

  if (skinump45 == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102002136;
    if (skinump45 == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102002043;
    if (skinump45 == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102002061; 
    if (skinump45 == 4) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102002070; 
    if (skinump45 == 5) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102002030; 
    if (skinump45 == 6) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102002090; 
    if (skinump45 == 7) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102002136; 
    
  
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Vector")){

    if (skinvector == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102003080;
    if (skinvector == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102003031;
    if (skinvector == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102003039; 
    if (skinvector == 4) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102003072; 
    if (skinvector == 5) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102003060; 
  
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Thompson")){
if (skinthompson == 1) 

    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102004034; //candy cane
  
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "PP-19 Bizon")){

if (skinbizon == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102005041;
  else  if (skinbizon == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1102005020;
   
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Kar98K")){

    if (skinkar == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103001129;
else    if (skinkar == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103001079;
  else  if (skinkar == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103001085; 
else    if (skinkar == 4) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103001101;   
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M24")){

    if (skinm24 == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103002087;
else    if (skinm24 == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103002030;
else    if (skinm24 == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103002049; 
 else   if (skinm24 == 4) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103002047; 
 else   if (skinm24 == 5) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103002059; 
   
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "AWM")){

    if (skinawm == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103003087;
else    if (skinawm == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103003062;
  else  if (skinawm == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103003042; 
 else   if (skinawm == 4) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103003062; 
   
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "DP28")){

    if (skindp28 == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1105002035;
 else   if (skindp28 == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1105002035;
    
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M16A4")){
if (skinm16a4 == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101002081;
else    if (skinm16a4 == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101002056;
  else  if (skinm16a4 == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101002068; 
 else   if (skinm16a4 == 4) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101002081; 
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "QBZ")){
    if (skinqbz == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101007046;
else    if (skinqbz == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101007036;
else    if (skinqbz == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101007046;
    
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "M249")){
        if (skinm249== 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1105001048;
 else   if (skinm249== 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1105001020;
  else  if (skinm249== 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1105001048;
    
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Mini 14")){
    if (skinmini14 == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103006046;
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "SLR")){
    if (skinslr == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103009037;
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "SKS")){
    if (skinsks == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103004037;
  else  if (skinsks == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103004046;
  else  if (skinsks == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103004058; 
    }
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Pan")){

    if (skinpan == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1108004337;
   else if (skinpan == 2) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1108004145;
 else   if (skinpan == 3) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1108004160; 
    else if (skinpan == 4) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1108004337; 
   else if (skinpan == 5) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1108004283; 
    
  
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "Vss")){
if (skinvss == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103005024;
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "MK14")){
if (skinmk14 == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103007028;
    }
    else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "S1897")){
    if (skins1897 == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1104002022;
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "AUG")){
if (skinaug == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101006062;
    }

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "S12K")){
if (skins12k == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1104003026;
}

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "MG3")){
if (skinmg3 == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1105010008;
}

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "AMR")){
if (skinamr == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103012010;
}

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "QBZ")){
if (skinqbz == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103012010;
}
else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "DBS")){
if (skindbs == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1103012010;
}

else if(strstr(localPlayer->WeaponManagerComponent->CurrentWeaponReplicated->GetWeaponName().ToString(), "HONEY")){
if (skinhoney == 1) 
    Params->FatalDamageParameter.CauserWeaponAvatarID = 1101012009;
}


     }
    }
   }
  }
}
return oProcessEvent(pObj, pFunc, pArgs);
}
        }




//الاسكنات SKINS 




//void *(*oProcessEvent)(UObject *pObj, UFunction *pFunc, void *pArgs);
//void *hkProcessEvent(UObject *pObj, UFunction *pFunc, void *pArgs) {
if (std::string(pFunc->GetFullName().c_str()).find("BackpackBlueprintUtils_BP.BackpackBlueprintUtils_BP_C.CreateBattleItemHandle") != std::string::npos)
{
UBackpackUtils_CreateBattleItemHandle_Params *PARAMS = ( UBackpackUtils_CreateBattleItemHandle_Params * ) pArgs;
std::string strWeaponId = std::to_string((int)PARAMS->DefineID.TypeSpecificID);
//std::string strWeaponId = std::to_string((int)PARAMS->DefineID.TypeSpecificID);
std::string strHelmet = std::to_string((int)PARAMS->DefineID.TypeSpecificID);
std::string strBackPack = std::to_string((int)PARAMS->DefineID.TypeSpecificID);

//==============================================//==============================================//==============================================//==============================================//==============================================
 if (strstr(strWeaponId.c_str(), "1400129")){      
     if (skinxsuit == 1)
					    PARAMS->DefineID.TypeSpecificID = 1405909;
            else if (skinxsuit == 2)
					    PARAMS->DefineID.TypeSpecificID = 1405628;
            else if (skinxsuit == 3)
					    PARAMS->DefineID.TypeSpecificID = 1406152;
            else if (skinxsuit == 4)
					   PARAMS->DefineID.TypeSpecificID = 1406475;
            else if (skinxsuit == 5)
					    PARAMS->DefineID.TypeSpecificID = 1405983;
            else if (skinxsuit == 6)
					    PARAMS->DefineID.TypeSpecificID = 1406638;
            else if (skinxsuit == 7)
					    PARAMS->DefineID.TypeSpecificID = 1406311;
		    else if (skinxsuit == 8)
					    PARAMS->DefineID.TypeSpecificID = 1400117;
}


//BackPack
if (strstr(strBackPack.c_str(), "501001")){
if (skinxsuit == 1)
PARAMS->DefineID.TypeSpecificID = 1501001088;
else if (skinxsuit == 2)
PARAMS->DefineID.TypeSpecificID = 1501001174;
else if (skinxsuit == 3)
PARAMS->DefineID.TypeSpecificID = 1501001486;
else if (skinxsuit == 4)
PARAMS->DefineID.TypeSpecificID = 1501001489;
else if (skinxsuit == 5)
PARAMS->DefineID.TypeSpecificID = 1501001157;
else if (skinxsuit == 6)
PARAMS->DefineID.TypeSpecificID = 1501001086;
else if (skinxsuit == 7)
PARAMS->DefineID.TypeSpecificID = 1501001084;
else if (skinxsuit == 8)
PARAMS->DefineID.TypeSpecificID = 1501001174;
}
if (strstr(strBackPack.c_str(), "501002")){
if (skinxsuit == 1)
PARAMS->DefineID.TypeSpecificID = 1501002088;
else if (skinxsuit == 2)
PARAMS->DefineID.TypeSpecificID = 1501002174;
else if (skinxsuit == 3)
PARAMS->DefineID.TypeSpecificID = 1501002486;
else if (skinxsuit == 4)
PARAMS->DefineID.TypeSpecificID = 1501002489;
else if (skinxsuit == 5)
PARAMS->DefineID.TypeSpecificID = 1501002157;
else if (skinxsuit == 6)
PARAMS->DefineID.TypeSpecificID = 1501002086;
else if (skinxsuit == 7)
PARAMS->DefineID.TypeSpecificID = 1501002084;
else if (skinxsuit == 8)
PARAMS->DefineID.TypeSpecificID = 1501002174;
}
if (strstr(strBackPack.c_str(), "501003")){
if (skinxsuit == 1)
PARAMS->DefineID.TypeSpecificID = 1501003088;
else if (skinxsuit == 2)
PARAMS->DefineID.TypeSpecificID = 1501003174;
else if (skinxsuit == 3)
PARAMS->DefineID.TypeSpecificID = 1501003486;
else if (skinxsuit == 4)
PARAMS->DefineID.TypeSpecificID = 1501003489;
else if (skinxsuit == 5)
PARAMS->DefineID.TypeSpecificID = 1501003157;
else if (skinxsuit == 6)
PARAMS->DefineID.TypeSpecificID = 1501003086;
else if (skinxsuit == 7)
PARAMS->DefineID.TypeSpecificID = 1501003084;
else if (skinxsuit == 8)
PARAMS->DefineID.TypeSpecificID = 1501003174;
}

//Helmet
if (strstr(strHelmet.c_str(), "502001")){
if (skinxsuit == 1)
PARAMS->DefineID.TypeSpecificID = 1502001367;
else if (skinxsuit == 2)
PARAMS->DefineID.TypeSpecificID = 1502001014;
else if (skinxsuit == 3)
PARAMS->DefineID.TypeSpecificID = 1502001032;
else if (skinxsuit == 4)
PARAMS->DefineID.TypeSpecificID = 1502001023;
else if (skinxsuit == 5)
PARAMS->DefineID.TypeSpecificID = 1502001190;
else if (skinxsuit == 6)
PARAMS->DefineID.TypeSpecificID = 1502001191;
else if (skinxsuit == 7)
PARAMS->DefineID.TypeSpecificID = 1502001194;
else if (skinxsuit == 8)
PARAMS->DefineID.TypeSpecificID = 1502001014;
}
if (strstr(strHelmet.c_str(), "502002")){
if (skinxsuit == 1)
PARAMS->DefineID.TypeSpecificID = 1502002367;
else if (skinxsuit == 2)
PARAMS->DefineID.TypeSpecificID = 1502002014;
else if (skinxsuit == 3)
PARAMS->DefineID.TypeSpecificID = 1502002032;
else if (skinxsuit == 4)
PARAMS->DefineID.TypeSpecificID = 1502002023;
else if (skinxsuit == 5)
PARAMS->DefineID.TypeSpecificID = 1502002190;
else if (skinxsuit == 6)
PARAMS->DefineID.TypeSpecificID = 1502002191;
else if (skinxsuit == 7)
PARAMS->DefineID.TypeSpecificID = 1502002194;
else if (skinxsuit == 8)
PARAMS->DefineID.TypeSpecificID = 1502002014;
}
if (strstr(strHelmet.c_str(), "502003")){
if (skinxsuit == 1)
PARAMS->DefineID.TypeSpecificID = 1502003367;
else if (skinxsuit == 2)
PARAMS->DefineID.TypeSpecificID = 1502003014;
else if (skinxsuit == 3)
PARAMS->DefineID.TypeSpecificID = 1502003032;
else if (skinxsuit == 4)
PARAMS->DefineID.TypeSpecificID = 1502003023;
else if (skinxsuit == 5)
PARAMS->DefineID.TypeSpecificID = 1502003190;
else if (skinxsuit == 6)
PARAMS->DefineID.TypeSpecificID = 1502003191;
else if (skinxsuit == 7)
PARAMS->DefineID.TypeSpecificID = 1502003194;
else if (skinxsuit == 8)
PARAMS->DefineID.TypeSpecificID = 1502003014;
}


//==============================================//==============================================//==============================================
//            skinns2000        skin

else if (strstr(strWeaponId.c_str(), "104102")){

if (skinns2000 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1104102001; 
}
//            skinfamas        skin

else if (strstr(strWeaponId.c_str(), "101100")){

if (skinfamas == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101100004; 
}
//            Honey Badger        skin

else if (strstr(strWeaponId.c_str(), "101012")){

if (skinhoney == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101012009; 
}
//            skinqbz        skin

else if (strstr(strWeaponId.c_str(), "101007")){

if (skinqbz == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101007046; 
}
//            skindbs        skin

else if (strstr(strWeaponId.c_str(), "104004")){

if (skindbs == 1) 
        PARAMS->DefineID.TypeSpecificID = 1104004024; 
}
//            skins1897        skin

else if (strstr(strWeaponId.c_str(), "104002")){

if (skins1897 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1104002022; 
}
//            groza        skin

else if (strstr(strWeaponId.c_str(), "101005")){

if (skingroza == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101005052; 
}

//     Thompson    skin

else if (strstr(strWeaponId.c_str(), "102004")){

if (skinthompson == 1) 
        PARAMS->DefineID.TypeSpecificID = 1102004034; //Decisive Day - Thompson (Lv. 8)
}

//     skinpan    skin

else if (strstr(strWeaponId.c_str(), "108004")){

if (skinpan == 1) 
        PARAMS->DefineID.TypeSpecificID = 1108004337; //Decisive Day - Thompson (Lv. 8)
}
//skin   vss
else if (strstr(strWeaponId.c_str(), "103005")){

if (skinvss == 1) 
        PARAMS->DefineID.TypeSpecificID = 1103005024; //Decisive Day - Thompson (Lv. 8)
}

//skin   mk14
else if (strstr(strWeaponId.c_str(), "103007")){

if (skinmk14 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1103007028; //Decisive Day - Thompson (Lv. 8)
}

//skin   mk14
else if (strstr(strWeaponId.c_str(), "104002")){

if (skins1897 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1104002022; //Decisive Day - Thompson (Lv. 8)
}

//skin   aug
else if (strstr(strWeaponId.c_str(), "101006")){

if (skinaug == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101006062; //Decisive Day - Thompson (Lv. 8)
}
//skin   skins12k
else if (strstr(strWeaponId.c_str(), "104003")){

if (skins12k == 1) 
        PARAMS->DefineID.TypeSpecificID = 1104003026; //Decisive Day - Thompson (Lv. 8)
}

//skin   skinmg3
else if (strstr(strWeaponId.c_str(), "105010")){

if (skinmg3 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1105010008; //Decisive Day - Thompson (Lv. 8)
}

//skin   skinamr
else if (strstr(strWeaponId.c_str(), "103012")){

if (skinamr == 1) 
        PARAMS->DefineID.TypeSpecificID = 1103012010; //Decisive Day - Thompson (Lv. 8)
}
//     skinslr    skin

else if (strstr(strWeaponId.c_str(), "103009")){

if (skinslr == 1) 
        PARAMS->DefineID.TypeSpecificID = 1103009037; //Decisive Day - Thompson (Lv. 8)
}
//     skinsks    skin

else if (strstr(strWeaponId.c_str(), "103004")){

if (skinsks == 1) 
        PARAMS->DefineID.TypeSpecificID = 1103004037; //Decisive Day - Thompson (Lv. 8)
}

//     Mini14    skin

else if (strstr(strWeaponId.c_str(), "103006")){

if (skinmini14 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1103006046; //Decisive Day - Thompson (Lv. 8)
}

//     M249    skin

else if (strstr(strWeaponId.c_str(), "105001")){

if (skinm249 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1105001048; //Decisive Day - Thompson (Lv. 8)
}

//     qbz    skin

else if (strstr(strWeaponId.c_str(), "101007")){

if (skinqbz == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101007046; //Decisive Day - Thompson (Lv. 8)
}

//     DP28    skin

else if (strstr(strWeaponId.c_str(), "105002")){

if (skindp28 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1105002035; //Decisive Day - Thompson (Lv. 8)
}
//     skinm16a4    skin

else if (strstr(strWeaponId.c_str(), "101002")){

if (skinm16a4 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101002081; //Decisive Day - Thompson (Lv. 8)
}

//     AWM    skin

else if (strstr(strWeaponId.c_str(), "103003")){

if (skinawm == 1) 
        PARAMS->DefineID.TypeSpecificID = 1103003087; //Decisive Day - AWM (Lv. 8)
}

else if (strstr(strWeaponId.c_str(), "103003")){

if (skinawm == 2) 
        PARAMS->DefineID.TypeSpecificID = 1103003062; //Decisive Day - AWM (Lv. 8)
}

else if (strstr(strWeaponId.c_str(), "103003")){

if (skinawm == 3) 
        PARAMS->DefineID.TypeSpecificID = 1103003042; //Decisive Day - AWM (Lv. 8)
}

//     skinm24

else if (strstr(strWeaponId.c_str(), "103002")){

if (skinm24 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1103002087; //Decisive Day - skinm24 (Lv. 8)
}

else if (strstr(strWeaponId.c_str(), "103002")){

if (skinm24 == 2) 
        PARAMS->DefineID.TypeSpecificID = 1103002030; //Decisive Day - skinm24 (Lv. 8)
}

//     UZI    skin

else if (strstr(strWeaponId.c_str(), "102001")){

if (skinuzi == 1) 
        PARAMS->DefineID.TypeSpecificID = 1102001024; //Decisive Day - UZI (Lv. 8)
}

//     Bizon    skin

else if (strstr(strWeaponId.c_str(), "102005")){

if (skinbizon == 1) 
        PARAMS->DefineID.TypeSpecificID = 1102005041; //Decisive Day - Bizon (Lv. 8)
}

//     kar    skin

else if (strstr(strWeaponId.c_str(), "103001")){

if (skinkar == 1) 
        PARAMS->DefineID.TypeSpecificID = 1103001129; //Decisive Day - kar (Lv. 8)
}

//     vector    skin

else if (strstr(strWeaponId.c_str(), "102003")){

if (skinvector == 1) 
        PARAMS->DefineID.TypeSpecificID = 1102003080; //Decisive Day - vector (Lv. 8)
}

//     ump45    skin

else if (strstr(strWeaponId.c_str(), "102002")){

if (skinump45 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1102002136; //Decisive Day - ump45 (Lv. 8)
}
else if (strstr(strWeaponId.c_str(), "102002")){
if (skinump45 == 2) 
        PARAMS->DefineID.TypeSpecificID = 1102002043; //Decisive Day - ump45 (Lv. 8)
}

//AKMskin

else if (strstr(strWeaponId.c_str(), "101001")){

if (skinakm == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101001242; //Decisive Day - AKM (Lv. 8)
    else if (skinakm == 2) 
        PARAMS->DefineID.TypeSpecificID = 1101001213; //Starsea Admiral - AKM (Lv. 8)
    else if (skinakm == 3) 
        PARAMS->DefineID.TypeSpecificID = 1101001116; //Lizard Roar - AKM
						  else if (skinakm == 4) 
        PARAMS->DefineID.TypeSpecificID = 1101004078; //Wanderer - AKM
   else if (skinakm == 5) 
        PARAMS->DefineID.TypeSpecificID = 1101004098; //Call of the Wild - AKM
        else if (skinakm == 6) 
        PARAMS->DefineID.TypeSpecificID = 1101004163; //Imperial Splendor - AKM
         else if (skinakm == 7) 
        PARAMS->DefineID.TypeSpecificID = 1101004201; //Silver Guru - AKM
        else if (skinakm == 8) 
        PARAMS->DefineID.TypeSpecificID = 1101004138; //TechnoCore - AKM
        else if (skinakm == 9) 
        PARAMS->DefineID.TypeSpecificID = 1101004209; //Tidal Embrace - AKM
        else if (skinakm == 10) 
        PARAMS->DefineID.TypeSpecificID = 1101004218; //Shinobi Kami - AKM
        
}

//        ACE32      skin

else if (strstr(strWeaponId.c_str(), "101102"))
{

if (skinace32 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101102017; //Decisive Day - ACE32 (Lv. 8)
    else if (skinace32 == 2) 
        PARAMS->DefineID.TypeSpecificID = 1101001213; //Starsea Admiral - ACE32 (Lv. 8)
    else if (skinace32 == 3) 
        PARAMS->DefineID.TypeSpecificID = 1101001116; //Lizard Roar - ACE32
						  else if (skinace32 == 4) 
        PARAMS->DefineID.TypeSpecificID = 1101004078; //Wanderer - ACE32
   else if (skinace32 == 5) 
        PARAMS->DefineID.TypeSpecificID = 1101004098; //Call of the Wild - ACE32
        else if (skinace32 == 6) 
        PARAMS->DefineID.TypeSpecificID = 1101004163; //Imperial Splendor - ACE32
         else if (skinace32 == 7) 
        PARAMS->DefineID.TypeSpecificID = 1101004201; //Silver Guru - ACE32
        else if (skinace32 == 8) 
        PARAMS->DefineID.TypeSpecificID = 1101004138; //TechnoCore - ACE32
        else if (skinace32 == 9) 
        PARAMS->DefineID.TypeSpecificID = 1101004209; //Tidal Embrace - ACE32
        else if (skinace32 == 10) 
        PARAMS->DefineID.TypeSpecificID = 1101004218; //Shinobi Kami - ACE32
        
}

//        m7      skin

else if (strstr(strWeaponId.c_str(), "101008"))
{

if (skinm7 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101008081; //Decisive Day - m7 (Lv. 8)
    else if (skinm7 == 2) 
        PARAMS->DefineID.TypeSpecificID = 1101001213; //Starsea Admiral - m7 (Lv. 8)
    else if (skinm7 == 3) 
        PARAMS->DefineID.TypeSpecificID = 1101001116; //Lizard Roar - m7
						  else if (skinm7 == 4) 
        PARAMS->DefineID.TypeSpecificID = 1101004078; //Wanderer - m7
   else if (skinm7 == 5) 
        PARAMS->DefineID.TypeSpecificID = 1101004098; //Call of the Wild - m7
        else if (skinm7 == 6) 
        PARAMS->DefineID.TypeSpecificID = 1101004163; //Imperial Splendor - m7
         else if (skinm7 == 7) 
        PARAMS->DefineID.TypeSpecificID = 1101004201; //Silver Guru - m7
        else if (skinm7 == 8) 
        PARAMS->DefineID.TypeSpecificID = 1101004138; //TechnoCore - m7
        else if (skinm7 == 9) 
        PARAMS->DefineID.TypeSpecificID = 1101004209; //Tidal Embrace - m7
        else if (skinm7 == 10) 
        PARAMS->DefineID.TypeSpecificID = 1101004218; //Shinobi Kami - m7
        
}

//        skinscar      skin

else if (strstr(strWeaponId.c_str(), "101003"))
{

if (skinscar == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101003188; //Decisive Day - scar (Lv. 8)
    else if (skinscar == 2) 
        PARAMS->DefineID.TypeSpecificID = 1101001213; //Starsea Admiral - scar (Lv. 8)
    else if (skinscar == 3) 
        PARAMS->DefineID.TypeSpecificID = 1101001116; //Lizard Roar - scar
						  else if (skinscar == 4) 
        PARAMS->DefineID.TypeSpecificID = 1101004078; //Wanderer - scar
   else if (skinscar == 5) 
        PARAMS->DefineID.TypeSpecificID = 1101004098; //Call of the Wild - scar
        else if (skinscar == 6) 
        PARAMS->DefineID.TypeSpecificID = 1101004163; //Imperial Splendor - scar
         else if (skinscar == 7) 
        PARAMS->DefineID.TypeSpecificID = 1101004201; //Silver Guru - scar
        else if (skinscar == 8) 
        PARAMS->DefineID.TypeSpecificID = 1101004138; //TechnoCore - scar
        else if (skinscar == 9) 
        PARAMS->DefineID.TypeSpecificID = 1101004209; //Tidal Embrace - scar
        else if (skinscar == 10) 
        PARAMS->DefineID.TypeSpecificID = 1101004218; //Shinobi Kami - scar
        
}

//m416skin

else if (strstr(strWeaponId.c_str(), "101004"))
{

if (skinm4 == 1) 
        PARAMS->DefineID.TypeSpecificID = 1101004046; //Glacier - M416 
    else if (skinm4 == 2) 
        PARAMS->DefineID.TypeSpecificID = 1101004062; //The Fool - M416
    else if (skinm4 == 3) 
        PARAMS->DefineID.TypeSpecificID = 1101004218; //Lizard Roar - M416
	  else if (skinm4 == 4) 
        PARAMS->DefineID.TypeSpecificID = 1101004201; //Wanderer - M416
   else if (skinm4 == 5) 
        PARAMS->DefineID.TypeSpecificID = 1101004098; //Call of the Wild - M416
        else if (skinm4 == 6) 
        PARAMS->DefineID.TypeSpecificID = 1101004163; //Imperial Splendor - M416
         else if (skinm4 == 7) 
        PARAMS->DefineID.TypeSpecificID = 1101004201; //Silver Guru - M416
        else if (skinm4 == 8) 
        PARAMS->DefineID.TypeSpecificID = 1101004138; //TechnoCore - M416
        else if (skinm4 == 9) 
        PARAMS->DefineID.TypeSpecificID = 1101004209; //Tidal Embrace - M416
        else if (skinm4 == 10) 
        PARAMS->DefineID.TypeSpecificID = 1101004218; //Shinobi Kami - M416
        
}




}
return oProcessEvent(pObj, pFunc, pArgs);
}

// ======================================================================== //
#define SLEEP_TIME 1000LL / 60LL
[[noreturn]] void* Royal_thread(void*) {
    while (true) {
        auto t1 = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();



        auto objs = UObject::GetGlobalObjects();
        for (int i = 0; i < objs.Num(); i++) {
            auto Object = objs.GetByIndex(i);
            if (isObjectInvalid(Object))
                continue;
            /////////////////////////////////////////////
            if (Config.XhitCostumColorRoyal) {
                Config.XhitRainBowRoyal = false;
                if (Object->IsA(ASurviveHUD::StaticClass())) {
                    auto RoyalXhit = (ASurviveHUD*)Object;
                    FLinearColor GreenColor = FLinearColor(Config.Royal_color[0], Config.Royal_color[1], Config.Royal_color[2], Config.Royal_color[3]);
                    RoyalXhit->HitPerform.HitBodyDrawColor = GreenColor;
                    RoyalXhit->HitPerform.HitHeadDrawColor = GreenColor;

                }
            }
    
                                 if (Config.ShowDamage)
                             {
                                 if (Object->IsA(UDamageNumberWidget::StaticClass()))
                                 {
                                     auto LuaDamageInfo = (UDamageNumberWidget *) Object;
                                     auto DamageNumberConfigArray = LuaDamageInfo->DamageNumberConfigArray;
                                     for (int x = 0; x < DamageNumberConfigArray.Num(); ++x)
                                     {
                                         FDamageNumberConfig & DamageNumberConfig = DamageNumberConfigArray[x];
                                         FLinearColor BloodRedColor(0.7f, 0.0f, 0.0f, 1.0f);
                                         DamageNumberConfig.HeadDrawColor = BloodRedColor; // color
                                         DamageNumberConfig.BodyDrawColor = BloodRedColor; // color
                                         DamageNumberConfig.HeadDrawOutlineColor = BloodRedColor; // color
                                         DamageNumberConfig.BodyDrawOutlineColor = BloodRedColor; // color
                                         DamageNumberConfig.UpScaleFactor = 4.f; // for size
                                         DamageNumberConfig.ScaleRandOffset = 4.f; // for size
                             
                                     }
                                 }

                             }
            /////////////////////////////////////////////////////////

            /////////////////////////////////////////////////////////
			if (heall) {
				auto objs = UObject::GetGlobalObjects();
    for (int i = 0; i < objs.Num(); i++) {
       auto Object = objs.GetByIndex(i);
    if (isObjectInvalid(Object))
       continue;

    if (Object->IsA(ASTExtraPlayerController ::StaticClass())) {
    auto playerChar = (ASTExtraPlayerController  *) Object;    
if (Object->IsA(ASTExtraCharacter ::StaticClass())) {
    auto playerChar = (ASTExtraCharacter  *) Object;            
    playerChar->HealthMax = 9999999999999999999999999999999999999999999999999999999999999999999999999999.0f;
  playerChar->Health = 9999999999999999.0f;        
    }}}
//Don't add Return
}
			
            if (Config.HitEffect) {
                Config.XhitCostumColorRoyal = false;
                if (Object->IsA(ASurviveHUD::StaticClass())) {
                    auto RoyalXhit = (ASurviveHUD*)Object;

                    rainbowTimePIRO += 0.01f * Config.PIROrainbowSpeedPIRO;
                    float red = std::sin(rainbowTimePIRO) * 0.5f + 0.5f;
                    float green = std::sin(rainbowTimePIRO + 2.0f * 3.14159f / 3.0f) * 0.5f + 0.5f;
                    float blue = std::sin(rainbowTimePIRO + 4.0f * 3.14159f / 3.0f) * 0.5f + 0.5f;

                    FLinearColor RainbowColor = FLinearColor(red, green, blue, 1.0f);
                    RoyalXhit->HitPerform.HitBodyDrawColor = RainbowColor;
                    RoyalXhit->HitPerform.HitHeadDrawColor = RainbowColor;
                }
            }


            /////////////////////////////
        }
        auto td = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count() - t1;
        std::this_thread::sleep_for(std::chrono::milliseconds(std::max(std::min(0LL, SLEEP_TIME - td), SLEEP_TIME)));
    }
}
        

#define SLEEP_TIME 1000LL / 60LL
[[noreturn]] void* maps_thread(void*) {
    while (true) {
        auto t1 = std::chrono::duration_cast<std::chrono::milliseconds>(
            std::chrono::system_clock::now().time_since_epoch()).count();


if (coupe == 1) {
Active::newCoupeID = 1903193; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 2) {
Active::newCoupeID = 1961007; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 3) {
Active::newCoupeID = 1961010; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 4) {
Active::newCoupeID = 1961012; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 5) {
Active::newCoupeID = 1961013; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 6) {
Active::newCoupeID = 1961014; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 7) {
Active::newCoupeID = 1961015; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 8) {
Active::newCoupeID = 1961016; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 9) {
Active::newCoupeID = 1961017; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 10) {
Active::newCoupeID = 1961018; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 11) {
Active::newCoupeID = 1961019; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 12) {
Active::newCoupeID = 1961020; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 13) {
Active::newCoupeID = 1961021; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 14) {
Active::newCoupeID = 1961024; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 15) {
Active::newCoupeID = 1961025; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 16) {
Active::newCoupeID = 1961029; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 17) {
Active::newCoupeID = 1961030; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 18) {
Active::newCoupeID = 1961031; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 19) {
Active::newCoupeID = 1961032; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 20) {
Active::newCoupeID = 1961033; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 21) {
Active::newCoupeID = 1961034; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 22) {
Active::newCoupeID = 1961035; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 23) {
Active::newCoupeID = 1961036; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 24) {
Active::newCoupeID = 1961037; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 25) {
Active::newCoupeID = 1961038; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 26) {
Active::newCoupeID = 1961039; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 27) {
Active::newCoupeID = 1961040; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 28) {
Active::newCoupeID = 1961041; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 29) {
Active::newCoupeID = 1961042; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 30) {
Active::newCoupeID = 1961043; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 31) {
Active::newCoupeID = 1961044; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 32) {
Active::newCoupeID = 1961045; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 33) {
Active::newCoupeID = 1961046; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 34) {
Active::newCoupeID = 1961047; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 35) {
Active::newCoupeID = 1961048; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }

                        else if (coupe == 36) {
Active::newCoupeID = 1961049; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastCoupeID != Active::newCoupeID)
{
Active::lastCoupeID = Active::newCoupeID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newCoupeID, true);
 }
 }
 }
 }


 
 else if (Buggy == 1) {
Active::newBuggyID = 1907047; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastBuggyID != Active::newBuggyID)
{
Active::lastBuggyID = Active::newBuggyID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newBuggyID, true);
 }
 }
 }
 }
 
 else if (Buggy == 2) {
Active::newBuggyID = 1907021; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastBuggyID != Active::newBuggyID)
{
Active::lastBuggyID = Active::newBuggyID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newBuggyID, true);
 }
 }
 }
 }
 
 else if (Motorcycle == 1) {
Active::newMotorcycleID = 1901047; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastMotorcycleID != Active::newMotorcycleID)
{
Active::lastMotorcycleID = Active::newMotorcycleID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newMotorcycleID, true);
 }
 }
 }
 }
 
 else if (Motorcycle == 2) {
Active::newMotorcycleID = 1901085; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastMotorcycleID != Active::newMotorcycleID)
{
Active::lastMotorcycleID = Active::newMotorcycleID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newMotorcycleID, true);
 }
 }
 }
 }
 
 else if (Motorcycle == 3) {
Active::newMotorcycleID = 1901047; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastMotorcycleID != Active::newMotorcycleID)
{
Active::lastMotorcycleID = Active::newMotorcycleID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newMotorcycleID, true);
 }
 }
 }
 }
 
 else if (Motorcycle == 4) {
Active::newMotorcycleID = 1901027; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastMotorcycleID != Active::newMotorcycleID)
{
Active::lastMotorcycleID = Active::newMotorcycleID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newMotorcycleID, true);
 }
 }
 }
 }

else if (Motorcycle == 5) {
Active::newMotorcycleID = 1901018; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastMotorcycleID != Active::newMotorcycleID)
{
Active::lastMotorcycleID = Active::newMotorcycleID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newMotorcycleID, true);
 }
 }
 }
 }
 
 else if (Scooter == 1) {
Active::newScooterID = 1917005; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastScooterID != Active::newScooterID)
{
Active::lastScooterID = Active::newScooterID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newScooterID, true);
 }
 }
 }
 }
 
 else if (monstertruck == 1) {
Active::newmonstertruckID = 1953003; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastmonstertruckID != Active::newmonstertruckID)
{
Active::lastmonstertruckID = Active::newmonstertruckID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newmonstertruckID, true);
 }
 }
 }
 }
 
else if (Uaz == 1) {
Active::newUazID = 1913001; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }
else if (Uaz == 2) {
Active::newUazID = 1908019; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }
else if (Uaz == 3) {
Active::newUazID = 1908032; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }
else if (Uaz == 4) {
Active::newUazID = 1908036; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }
else if (Uaz == 5) {
Active::newUazID = 1908056; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }
else if (Uaz == 6) {
Active::newUazID = 1908067; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }
else if (Uaz == 7) {
Active::newUazID = 1908077; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }
else if (Uaz == 8) {
Active::newUazID = 1908078; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }
else if (Uaz == 9) {
Active::newUazID = 1908076; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }
else if (Uaz == 10) {
Active::newUazID = 1908075; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastUazID != Active::newUazID)
{
Active::lastUazID = Active::newUazID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newUazID, true);
 }
 }
 }
 }


else if (Dacia == 1) {
Active::newDaciaID = 1903089; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 2) {
Active::newDaciaID = 1903014; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 3) {
Active::newDaciaID = 1903017; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 4) {
Active::newDaciaID = 1903035; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 5) {
Active::newDaciaID = 1903071; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 6) {
Active::newDaciaID = 1903072; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 7) {
Active::newDaciaID = 1903073; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 8) {
Active::newDaciaID = 1903074; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 9) {
Active::newDaciaID = 1903075; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 10) {
Active::newDaciaID = 1903076; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 11) {
Active::newDaciaID = 1903077; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 12) {
Active::newDaciaID = 1903079; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 13) {
Active::newDaciaID = 1903080; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 14) {
Active::newDaciaID = 1903087; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 15) {
Active::newDaciaID = 1903088; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 16) {
Active::newDaciaID = 1903089; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 17) {
Active::newDaciaID = 1903090; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 18) {
Active::newDaciaID = 1903005; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 19) {
Active::newDaciaID = 1903191; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
 }
 }
else if (Dacia == 20) {
Active::newDaciaID = 1903192; 
if (g_LocalPlayer->CurrentVehicle)
{
if (g_LocalPlayer->CurrentVehicle->VehicleAvatar)
{
if (Active::lastDaciaID != Active::newDaciaID)
{
Active::lastDaciaID = Active::newDaciaID;
g_LocalPlayer->CurrentVehicle->VehicleAvatar->ChangeItemAvatar(Active::newDaciaID, true);
 }
 }
	}}}
 }                
#define SLEEP_TIME 1000LL / 60LL
[[noreturn]] void *ipad_thread(void *) {
    while (true) {
        auto t1 = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
   if (Config.ESPMenu.Ipad) {
        auto objs = UObject::GetGlobalObjects();
        for (int i = 0; i < objs.Num(); i++) {
            auto Object = objs.GetByIndex(i);
   if (isObjectInvalid(Object))
                continue;

if (Object->IsA(ULocalPlayer::StaticClass())) {
                auto playerChar = (ULocalPlayer *) Object;      
          playerChar->AspectRatioAxisConstraint = EAspectRatioAxisConstraint::AspectRatio_MaintainYFOV;
      }     
     }
     }
     
     if (FASTSHOOTOP) {
auto objs = UObject::GetGlobalObjects();
    for (int i = 0; i < objs.Num(); i++) {
        auto Object = objs.GetByIndex(i);
        if (isObjectInvalid(Object))
            continue;
        if (Object->IsA(UShootWeaponEntity::StaticClass())) {
            auto playerChar = (UShootWeaponEntity *) Object;
   playerChar->ShootInterval = (float) FASTSHOOTOP1;
}
  }
}
if (Magicb) {
      kFox::SetSearchRange(RegionType::ALL);
            kFox::MemorySearch( "25", Type::TYPE_FLOAT);
            kFox::MemoryOffset( "30.5", 4, Type::TYPE_FLOAT);
            kFox::MemoryWrite( "900", 0, Type::TYPE_FLOAT);
            kFox::MemoryWrite( "900", 4, Type::TYPE_FLOAT);
            kFox::ClearResult();
            kFox::SetSearchRange(RegionType::ALL);
            kFox::MemorySearch( "69.5", Type::TYPE_FLOAT);
            kFox::MemoryOffset( "33.0", -4, Type::TYPE_FLOAT);
            kFox::MemoryOffset( "35.0", -8, Type::TYPE_FLOAT);
            kFox::MemoryWrite( "89.5", 0, Type::TYPE_FLOAT);
//CREDIT :- IAMNOBI
   LOGI("Magic Bullet Active!");
            kFox::ClearResult();
   
  }
if (Ficstuckk) {
kFox::SetSearchRange(RegionType::ANONYMOUS);
kFox::MemorySearch( "1400.0", Type::TYPE_FLOAT);
kFox::MemoryOffset( "88.0", 20, Type::TYPE_FLOAT);
kFox::MemoryWrite( "-48", 24, Type::TYPE_FLOAT);
kFox::MemorySearch( "1400.0", Type::TYPE_FLOAT);
kFox::MemoryOffset( "60.0", 24, Type::TYPE_FLOAT);
kFox::MemoryWrite( "-48", 24, Type::TYPE_FLOAT);
kFox::MemorySearch( "1400.0", Type::TYPE_FLOAT);
kFox::MemoryOffset( "50.0", 28, Type::TYPE_FLOAT);
kFox::MemoryWrite( "-48", 24, Type::TYPE_FLOAT);
kFox::MemorySearch( "1400.0", Type::TYPE_FLOAT);
kFox::MemoryOffset( "2.0", 24, Type::TYPE_FLOAT);
kFox::MemoryWrite( "-48", 24, Type::TYPE_FLOAT);
kFox::ClearResult();
}
if(AutoFlashv5){
                Jatin_FLOAT(g_UE4 + 0x5e9d260, 21.0);
                Jatin_FLOAT(g_UE4 + 0x54d5478, 0.28000000119);
                Jatin_FLOAT(g_UE4 + 0x54b1580, 0.0);
            } else {
                Jatin_FLOAT(g_UE4 + 0x5b68a7c, 25.72529029846);
                Jatin_FLOAT(g_UE4 + 0x54d5478, 9.99999997e-7);
                Jatin_FLOAT(g_UE4 + 0x5e9d260, -1.86389771e-20);
            }
auto object = UObject::GetGlobalObjects();
for (int i = 0; i < object.Num(); i++){
auto Object = object.GetByIndex(i);
if (isObjectInvalid(Object))
continue;

    if (Flash) {
    if (Object->IsA(AWorldSettings::StaticClass())) {
    auto playerChar = (AWorldSettings *) Object;      
    playerChar->MinUndilatedFrameTime = 0.080f;
    }} else if (Object->IsA(AWorldSettings::StaticClass())) {
    auto playerChar = (AWorldSettings *) Object;      
    playerChar->MinUndilatedFrameTime = 0;
}
  }
/*     auto objs = UObject::GetGlobalObjects();
    for (int i = 0; i < objs.Num(); i++) {
       auto Object = objs.GetByIndex(i);
    if (isObjectInvalid(Object))
       continue;
         
         if (Config.Hihhh){
    if (Object->IsA(ASTExtraCharacter ::StaticClass())) {
    auto playerChar = (ASTExtraCharacter  *) Object;            
    playerChar->HealthMax = 9999999999999999999999999999999999999999999999999999999999999999999999999999.0f;
  playerChar->Health = 999999.f;
    }}}*/
/*    if (fas1) {
auto objs = UObject::GetGlobalObjects();
    for (int i = 0; i < objs.Num(); i++) {
        auto Object = objs.GetByIndex(i);
        if (isObjectInvalid(Object))
            continue;
        if (Object->IsA(UShootWeaponEntity::StaticClass())) {
            auto playerChar = (UShootWeaponEntity *) Object;
   playerChar->ShootInterval = 0;
}
  }
}*/
 /*if (Config.Hihhh){
    if (Object->IsA(ASTExtraCharacter ::StaticClass())) {
    auto playerChar = (ASTExtraCharacter  *) Object;            
    playerChar->HealthMax = 9999999999999999999999999999999999999999999999999999999999999999999999999999.0f;
  playerChar->Health = 9999999999999999.0f;
    }}}*/
// if(!isXhit){

if (sp) {
                              auto objs = UObject::GetGlobalObjects();
        for (int i = 0; i < objs.Num(); i++) {
            auto Object = objs.GetByIndex(i);
   if (isObjectInvalid(Object))
                continue;
if (Object->IsA(ASTExtraBaseCharacter::StaticClass())) {

                auto playerChar = (ASTExtraBaseCharacter *) Object;           
    playerChar->SwitchWeaponSpeedScale = (float) speedknock12;
           
         }
    }          
}

if (sp) {
   
    auto objs = UObject::GetGlobalObjects();
    for (int i = 0; i < objs.Num(); i++) {
       auto Object = objs.GetByIndex(i);
    if (isObjectInvalid(Object))
       continue;

                    if (Object->IsA(ASTExtraCharacter::StaticClass())) {
                       auto playerChar = (ASTExtraCharacter *) Object;           
                       playerChar->SpeedScale = (float) speedknock12;
                    }
                }}
           /*     if (Config.MemoryHacks.FlashV5) {
   
        auto objs = UObject::GetGlobalObjects();
        for (int i = 0; i < objs.Num(); i++) {
            auto Object = objs.GetByIndex(i);
   if (isObjectInvalid(Object))
                continue;

if (Object->IsA(ASTExtraBaseCharacter::StaticClass())) {
                auto playerChar = (ASTExtraBaseCharacter *) Object;           
   g_LocalPlayer->STPlayerController->AcknowledgedPawn->CustomTimeDilation = 5.0f;


   
       }     
    }
}*/
         auto td = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count() - t1;
         std::this_thread::sleep_for(std::chrono::milliseconds(std::max(std::min(0LL, SLEEP_TIME - td),SLEEP_TIME)));
     }
}

#define SLEEP_TIME 1000LL / 60LL
[[noreturn]] void* test_thread(void*)
{
    while (true)
    {
        auto t1 = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();

        auto localPlayer = g_LocalPlayer;
        auto localController = g_LocalController;
        if (localPlayer && localController)
        {
            if (highjumpp)
            {
                UCharacterMovementComponent* CharacterMovement = localPlayer->CharacterMovement;
                if (CharacterMovement)
                {
                    CharacterMovement->JumpZVelocity = 2000.f;
                }
            }
            else
            {
                UCharacterMovementComponent* CharacterMovement = localPlayer->CharacterMovement;
                if (CharacterMovement)
                {
                    CharacterMovement->JumpZVelocity = 443.f;
                }
            }


            if (Godviewpeak)
            {
                if (localPlayer->IsPeekLeft)
                {
                    auto lund = *(int*)(*(int*)(*(int*)(g_UE4 + 0x8456188) + 0x0) + 0x354) + 0x158;
                    float bro;
                    Tools::PVM_ReadAddr((void*)(lund), &bro, sizeof(bro));
                    while (true)
                    {
                        Write<float>(lund, bro + 300);

                        if (!localPlayer->IsPeekLeft)
                        {
                            break;
                        }
                    }
                }
            }
        }
        auto td = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count() - t1;
        std::this_thread::sleep_for(std::chrono::milliseconds(std::max(std::min(0LL, SLEEP_TIME - td), SLEEP_TIME)));
    }
}
int (*osub_fixcrash)(const char *a1, unsigned int a2);
//Hook
int hsub_fixcrash(const char *a1, unsigned int a2)
{
while(true)
{
sleep(10000);//166/24
}
return osub_fixcrash(a1,a2);
}

void* main_thread(void*) {
    UE4 = Tools::GetBaseAddress("libUE4.so");
    while (!UE4) {
        UE4 = Tools::GetBaseAddress("libUE4.so");
        sleep(1);
    }
    g_Anogs = Tools::GetBaseAddress("libanogs.so");
    while (!g_Anogs) {
        g_Anogs = Tools::GetBaseAddress("libanogs.so");
        sleep(1);
    }
    g_cloud = Tools::GetBaseAddress("libgcloud.so");
    while (!g_cloud) {
        g_cloud = Tools::GetBaseAddress("libgcloud.so");
        sleep(1);
    }

    while (!g_App) {
        g_App = *(android_app**)(UE4 + GNativeAndroidApp_Offset);
        sleep(1);
    }

    while (!g_App->onInputEvent)
        sleep(1);

    orig_onInputEvent = decltype(orig_onInputEvent)(g_App->onInputEvent);
    g_App->onInputEvent = onInputEvent;

    g_UE4 = Tools::GetBaseAddress("libUE4.so");

    while (!g_UE4)
    {
        g_UE4 = Tools::GetBaseAddress("libUE4.so");
        sleep(1);
    }

    while (!g_App)
    {
        g_App = *(android_app**)(g_UE4 + GNativeAndroidApp_Offset);
        sleep(1);
    }


    FName::GNames = GetGNames();
    while (!FName::GNames) {
        FName::GNames = GetGNames();
        sleep(1);
    }
    UObject::GUObjectArray = (FUObjectArray*)(UE4 + GUObject_Offset);
Tools::Hook((void*)DobbySymbolResolver(OBFUSCATE("/system/lib/libEGL.so"), OBFUSCATE("eglSwapBuffers")), (void*)_eglSwapBuffers, (void**)&orig_eglSwapBuffers);
Tools::Hook((void *) (g_Anort + 0xA097F), (void *) hsub_fixcrash, (void **) &osub_fixcrash);
    UObject::GUObjectArray = (FUObjectArray*)(UE4 + GUObject_Offset);
    Tools::Hook((void*)(UE4 + ProcessEvent_Offset), (void*)hkProcessEvent, (void**)&oProcessEvent);

    items_data = json::parse(JSON_ITEMS);
    pthread_t t;
    pthread_create(&t, 0, Royal_thread, 0);
    pthread_create(&t, 0, maps_thread, 0);
    pthread_create(&t, 0, test_thread, 0);
    pthread_create(&t, 0, ipad_thread, 0);
    return 0;
}

__attribute__((constructor)) void _init()
{
    pthread_t t;
    pthread_create(&t, 0, main_thread, 0);
}